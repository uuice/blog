{
  "posts": [
    {
      "id": "1ef3b5e4-51b0-6ce0-b727-e8921436fadf",
      "title": "短 URL 系统设计",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T20:52:14.000Z",
      "updated_time": "2017-04-29T20:52:14.000Z",
      "categories": [
        "notes"
      ],
      "tags": [],
      "excerpt": "原理通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。实现方式将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面通过访问短连接获取到62进制字符串",
      "published": true,
      "content": "\n\n\n### 原理\n\n通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。\n\n<!-- more -->\n\n### 实现方式\n\n- 将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面\n- 通过访问短连接获取到62进制字符串，转化为10进制，通过查询获得长链接进行跳转\n\n### 这里有几个问题\n\n- 1、62进制如何用数据库或者KV存储来做\n\n这个问题就不展开了，自行解决\n\n- 2、如何保证同一个长地址，每次转出来都是一样的短地址\n\n上面的发号原理中，是不判断长地址是否已经转过的。同一个长地址，产生多条短地址记录，这明显是浪费空间的。\n目前没有好的解决方法\n\n### 3、跳转用301还是302\n\n301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。\n\n但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。\n\n对于搜索引擎SEO优化来说301跳转更合适\n\n10进制62进制互转 （php实现）\n\n这里用了php手册中的一个方法，支持任意进制的转换\n点击跳转到php手册\n\n```php\n<?php\nfunction convBase($numberInput, $fromBaseInput, $toBaseInput)\n{\n    if ($fromBaseInput==$toBaseInput) return $numberInput;\n    $fromBase = str_split($fromBaseInput,1);\n    $toBase = str_split($toBaseInput,1);\n    $number = str_split($numberInput,1);\n    $fromLen=strlen($fromBaseInput);\n    $toLen=strlen($toBaseInput);\n    $numberLen=strlen($numberInput);\n    $retval='';\n    if ($toBaseInput == '0123456789')\n    {\n        $retval=0;\n        for ($i = 1;$i <= $numberLen; $i++)\n            $retval = bcadd($retval, bcmul(array_search($number[$i-1], $fromBase),bcpow($fromLen,$numberLen-$i)));\n        return $retval;\n    }\n    if ($fromBaseInput != '0123456789')\n        $base10=convBase($numberInput, $fromBaseInput, '0123456789');\n    else\n        $base10 = $numberInput;\n    if ($base10<strlen($toBaseInput))\n        return $toBase[$base10];\n    while($base10 != '0')\n    {\n        $retval = $toBase[bcmod($base10,$toLen)].$retval;\n        $base10 = bcdiv($base10,$toLen,0);\n    }\n    return $retval;\n}\n?>\n```\n\n### 用法：\n- 1、十进制转62进制\n\n```php\n<?php\necho convBase('1234567890987654321','0123456789','0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n?>\n```\n- 2、62进制转十进制\n\n```php\n<?php\necho convBase('1tckI2JJZDz','0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ','0123456789');\n?>\n```\n这只是一个基本的思路，对于一般的使用也够了",
      "mdContent": "<h3 id=\"toc-b6724c\">原理</h3>\n<p>通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。</p>\n<!-- more -->\n\n<h3 id=\"toc-3e9100\">实现方式</h3>\n<ul>\n<li>将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面</li>\n<li>通过访问短连接获取到62进制字符串，转化为10进制，通过查询获得长链接进行跳转</li>\n</ul>\n<h3 id=\"toc-afda0a\">这里有几个问题</h3>\n<ul>\n<li>1、62进制如何用数据库或者KV存储来做</li>\n</ul>\n<p>这个问题就不展开了，自行解决</p>\n<ul>\n<li>2、如何保证同一个长地址，每次转出来都是一样的短地址</li>\n</ul>\n<p>上面的发号原理中，是不判断长地址是否已经转过的。同一个长地址，产生多条短地址记录，这明显是浪费空间的。\n目前没有好的解决方法</p>\n<h3 id=\"toc-ff0abc\">3、跳转用301还是302</h3>\n<p>301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。</p>\n<p>但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。</p>\n<p>对于搜索引擎SEO优化来说301跳转更合适</p>\n<p>10进制62进制互转 （php实现）</p>\n<p>这里用了php手册中的一个方法，支持任意进制的转换\n点击跳转到php手册</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convBase</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$numberInput</span>, <span class=\"hljs-variable\">$fromBaseInput</span>, <span class=\"hljs-variable\">$toBaseInput</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$fromBaseInput</span>==<span class=\"hljs-variable\">$toBaseInput</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$numberInput</span>;\n    <span class=\"hljs-variable\">$fromBase</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$fromBaseInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$toBase</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$toBaseInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$number</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$numberInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$fromLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$fromBaseInput</span>);\n    <span class=\"hljs-variable\">$toLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$toBaseInput</span>);\n    <span class=\"hljs-variable\">$numberLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$numberInput</span>);\n    <span class=\"hljs-variable\">$retval</span>=<span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$toBaseInput</span> == <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>)\n    {\n        <span class=\"hljs-variable\">$retval</span>=<span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$i</span> &lt;= <span class=\"hljs-variable\">$numberLen</span>; <span class=\"hljs-variable\">$i</span>++)\n            <span class=\"hljs-variable\">$retval</span> = <span class=\"hljs-title function_ invoke__\">bcadd</span>(<span class=\"hljs-variable\">$retval</span>, <span class=\"hljs-title function_ invoke__\">bcmul</span>(<span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-variable\">$number</span>[<span class=\"hljs-variable\">$i</span>-<span class=\"hljs-number\">1</span>], <span class=\"hljs-variable\">$fromBase</span>),<span class=\"hljs-title function_ invoke__\">bcpow</span>(<span class=\"hljs-variable\">$fromLen</span>,<span class=\"hljs-variable\">$numberLen</span>-<span class=\"hljs-variable\">$i</span>)));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$retval</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$fromBaseInput</span> != <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>)\n        <span class=\"hljs-variable\">$base10</span>=<span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-variable\">$numberInput</span>, <span class=\"hljs-variable\">$fromBaseInput</span>, <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-variable\">$base10</span> = <span class=\"hljs-variable\">$numberInput</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$base10</span>&lt;<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$toBaseInput</span>))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$toBase</span>[<span class=\"hljs-variable\">$base10</span>];\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-variable\">$base10</span> != <span class=\"hljs-string\">&#x27;0&#x27;</span>)\n    {\n        <span class=\"hljs-variable\">$retval</span> = <span class=\"hljs-variable\">$toBase</span>[<span class=\"hljs-title function_ invoke__\">bcmod</span>(<span class=\"hljs-variable\">$base10</span>,<span class=\"hljs-variable\">$toLen</span>)].<span class=\"hljs-variable\">$retval</span>;\n        <span class=\"hljs-variable\">$base10</span> = <span class=\"hljs-title function_ invoke__\">bcdiv</span>(<span class=\"hljs-variable\">$base10</span>,<span class=\"hljs-variable\">$toLen</span>,<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$retval</span>;\n}\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<h3 id=\"toc-6c9ae3\">用法：</h3>\n<ul>\n<li>1、十进制转62进制</li>\n</ul>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-string\">&#x27;1234567890987654321&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>);\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<ul>\n<li>2、62进制转十进制</li>\n</ul>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-string\">&#x27;1tckI2JJZDz&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789&#x27;</span>);\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>这只是一个基本的思路，对于一般的使用也够了</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-b6724c\">原理</a></li>\n<li><a href=\"#toc-3e9100\">实现方式</a></li>\n<li><a href=\"#toc-afda0a\">这里有几个问题</a></li>\n<li><a href=\"#toc-ff0abc\">3、跳转用301还是302</a></li>\n<li><a href=\"#toc-6c9ae3\">用法：</a></li>\n</ul>\n",
      "url": "duan-url-xi-tong-she-ji",
      "created_timestamp": 1493499134000,
      "updated_timestamp": 1493499134000,
      "symbolsCount": 6072
    },
    {
      "id": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "title": "X-Frame-Options 响应头",
      "alias": "",
      "cover": "",
      "created_time": "2017-06-06T16:00:14.000Z",
      "updated_time": "2017-06-06T16:00:14.000Z",
      "categories": [
        "notes",
        "http"
      ],
      "tags": [],
      "excerpt": "做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display ‘XXXX’ in a frame because it set ‘X-Frame-Options’ to ‘de",
      "published": true,
      "content": "\n做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display 'XXXX' in a frame because it set 'X-Frame-Options' to 'deny'. 查询了MDN，具体原因如下(MDN上摘录)\n\n<!-- more -->\n\n### X-Frame-Options是什么？\nX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 `<frame>`, `<iframe>` 或者 `<object>` 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\n\n### 使用X-Frame-Options\nX-Frame-Options 有三个值:\n- DENY\n  表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\n- SAMEORIGIN\n  表示该页面可以在相同域名页面的 frame 中展示。\n- ALLOW-FROM uri\n  表示该页面可以在指定来源的 frame 中展示。\n  换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。\n\n### 服务器配置\n- 配置 Apache\n  配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 'site' 的配置中:\n```\nHeader always append X-Frame-Options SAMEORIGIN\n```\n\n### 配置 nginx\n\n- 配置 nginx\n  发送 X-Frame-Options 响应头，把下面这行添加到 'http', 'server' 或者 'location' 的配置中:\n\n```\nadd_header X-Frame-Options SAMEORIGIN;\n```\n\n### 配置 IIS\n\n- 配置 IIS\n\n发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中:\n\n```\n<system.webServer>\n  ...\n\n  <httpProtocol>\n    <customHeaders>\n      <add name=\"X-Frame-Options\" value=\"SAMEORIGIN\" />\n    </customHeaders>\n  </httpProtocol>\n\n  ...\n</system.webServer>\n```\n\n### 其他\n\n可以直接通过meta标签来设置，不需要放在http头部请求中了。\n\n```\n<meta http-equiv=\"X-Frame-Options\" content=\"deny\">\n```\n",
      "mdContent": "<p>做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display &#39;XXXX&#39; in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny&#39;. 查询了MDN，具体原因如下(MDN上摘录)</p>\n<!-- more -->\n\n<h3 id=\"toc-00452a\">X-Frame-Options是什么？</h3>\n<p>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p>\n<h3 id=\"toc-3c05a1\">使用X-Frame-Options</h3>\n<p>X-Frame-Options 有三个值:</p>\n<ul>\n<li>DENY\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li>\n<li>SAMEORIGIN\n表示该页面可以在相同域名页面的 frame 中展示。</li>\n<li>ALLOW-FROM uri\n表示该页面可以在指定来源的 frame 中展示。\n换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。</li>\n</ul>\n<h3 id=\"toc-171f7b\">服务器配置</h3>\n<ul>\n<li>配置 Apache\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 &#39;site&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-pgsql\"><span class=\"hljs-keyword\">Header</span> <span class=\"hljs-keyword\">always</span> append X-Frame-<span class=\"hljs-keyword\">Options</span> SAMEORIGIN\n</code></pre>\n<h3 id=\"toc-5f33f1\">配置 nginx</h3>\n<ul>\n<li>配置 nginx\n发送 X-Frame-Options 响应头，把下面这行添加到 &#39;http&#39;, &#39;server&#39; 或者 &#39;location&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-mathematica\"><span class=\"hljs-type\">add_header</span> <span class=\"hljs-variable\">X</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Frame</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Options</span> <span class=\"hljs-variable\">SAMEORIGIN</span><span class=\"hljs-operator\">;</span>\n</code></pre>\n<h3 id=\"toc-170914\">配置 IIS</h3>\n<ul>\n<li>配置 IIS</li>\n</ul>\n<p>发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中:</p>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n  ...\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;SAMEORIGIN&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n</code></pre>\n<h3 id=\"toc-0d98c7\">其他</h3>\n<p>可以直接通过meta标签来设置，不需要放在http头部请求中了。</p>\n<pre><code class=\"hljs lang-routeros\">&lt;meta <span class=\"hljs-attribute\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attribute\">content</span>=<span class=\"hljs-string\">&quot;deny&quot;</span>&gt;\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-00452a\">X-Frame-Options是什么？</a></li>\n<li><a href=\"#toc-3c05a1\">使用X-Frame-Options</a></li>\n<li><a href=\"#toc-171f7b\">服务器配置</a></li>\n<li><a href=\"#toc-5f33f1\">配置 nginx</a></li>\n<li><a href=\"#toc-170914\">配置 IIS</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n",
      "url": "x-frame-options-xiang-ying-tou",
      "created_timestamp": 1496764814000,
      "updated_timestamp": 1496764814000,
      "symbolsCount": 2777
    },
    {
      "id": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "title": "通过takeUntil取消订阅可观察对象",
      "alias": "",
      "cover": "",
      "created_time": "2023-03-01T10:46:32.000Z",
      "updated_time": "2023-03-01T10:46:32.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [
        "Rxjs",
        "Angular"
      ],
      "excerpt": "Angular 中的单例 Service通过@NgModule()装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单利service （单例模式）。Angular 中的非单例 Service通过@Component()装饰器来声明一个service时，会成为一个非单例的se",
      "published": true,
      "content": "\n\n### Angular 中的单例 Service / Angular singleton Service\n\n通过`@NgModule()`装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单例service （单例模式）。\n\n<!-- more -->\n\n### Angular 中的非单例 Service / Non-singleton Service in Angular\n\n通过`@Component()`装饰器来声明一个service时，会成为一个非单例的service， 生命周期与component 一致， 当Angular销毁组件实例时，Angular将同时销毁与之绑定的service实例。\n\n非单例service 拥有ngOnDestroy()生命周期， 因此可以通过创建一个非单例的service来取消订阅可观察对象。\n\n### 创建DestroyService / Create DestroyService\n\n```javascript\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class DestroyService extends Subject<void> implements OnDestroy {\n  ngOnDestroy(): void {\n    this.next();\n    this.complete();\n  }\n}\n\n```\n\n### 使用方法 /  How to use\n\n```javascript\n@Component({\n  providers: [DestroyService]\n})\n\nconstructor( private destroy$: DestroyService ) {}\n\nsome$.pipe( takeUntil(this.destroy$)).subscribe(...)\n```\n\n### 可能的问题 / Memory Leaks\n\n当有多个操作符时，应该始终保证takeUntil是序列中的最后一个操作符， 不然会有内存泄漏的可能。\n\nTo avoid problems with memory leaks, the general rule is that takeUntil should be the last operator in the sequence",
      "mdContent": "<h3 id=\"toc-133f92\">Angular 中的单例 Service / Angular singleton Service</h3>\n<p>通过<code>@NgModule()</code>装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单例service （单例模式）。</p>\n<!-- more -->\n\n<h3 id=\"toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</h3>\n<p>通过<code>@Component()</code>装饰器来声明一个service时，会成为一个非单例的service， 生命周期与component 一致， 当Angular销毁组件实例时，Angular将同时销毁与之绑定的service实例。</p>\n<p>非单例service 拥有ngOnDestroy()生命周期， 因此可以通过创建一个非单例的service来取消订阅可观察对象。</p>\n<h3 id=\"toc-51894b\">创建DestroyService / Create DestroyService</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">OnDestroy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Subject</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DestroyService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Subject</span>&lt;<span class=\"hljs-keyword\">void</span>&gt; implements <span class=\"hljs-title class_\">OnDestroy</span> {\n  <span class=\"hljs-title function_\">ngOnDestroy</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">complete</span>();\n  }\n}\n</code></pre>\n<h3 id=\"toc-8cb489\">使用方法 /  How to use</h3>\n<pre><code class=\"hljs lang-javascript\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">DestroyService</span>]\n})\n\n<span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"> private destroy$: DestroyService </span>) {}\n\nsome$.<span class=\"hljs-title function_\">pipe</span>( <span class=\"hljs-title function_\">takeUntil</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">destroy$</span>)).<span class=\"hljs-title function_\">subscribe</span>(...)\n</code></pre>\n<h3 id=\"toc-1f84c1\">可能的问题 / Memory Leaks</h3>\n<p>当有多个操作符时，应该始终保证takeUntil是序列中的最后一个操作符， 不然会有内存泄漏的可能。</p>\n<p>To avoid problems with memory leaks, the general rule is that takeUntil should be the last operator in the sequence</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-133f92\">Angular 中的单例 Service / Angular singleton Service</a></li>\n<li><a href=\"#toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</a></li>\n<li><a href=\"#toc-51894b\">创建DestroyService / Create DestroyService</a></li>\n<li><a href=\"#toc-8cb489\">使用方法 / How to use</a></li>\n<li><a href=\"#toc-1f84c1\">可能的问题 / Memory Leaks</a></li>\n</ul>\n",
      "url": "tong-guo-takeuntil-qu-xiao-ding-yue-ke-guan-cha-dui-xiang",
      "created_timestamp": 1677667592000,
      "updated_timestamp": 1677667592000,
      "symbolsCount": 2404
    },
    {
      "id": "1ef3b5a2-b387-6370-adf2-057eb14ae353",
      "title": "将布尔表达式转成json格式",
      "alias": "",
      "cover": "",
      "created_time": "2022-11-18T17:53:10.000Z",
      "updated_time": "2022-11-18T17:53:10.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "excerpt": "简单的词法分析和推栈的应用",
      "published": true,
      "content": "\n\n### 完整代码\n\n```javascript\nconst str = \"(((((1 & 2) | 3) & 4 & 5) | 6) & 7) | 8\";\n\nconst operate = [\"&\", \"|\"]; // 操作符\nconst divide = [\"(\", \")\"]; // 分隔符\n\n// 字符串去除空格转数组 进行词法分析\nfunction translate(str) {\n  let arr = str.replace(/ /gi, \"\").split(\"\");\n  let arrTranslate = [];\n  arr.forEach((itm, idx) => {\n    if (operate.indexOf(itm) > -1) {\n      // 操作\n      arrTranslate.push({\n        index: idx,\n        type: \"operate\",\n        value: itm,\n      });\n    } else if (divide.indexOf(itm) > -1) {\n      // 括号分隔符\n      arrTranslate.push({\n        index: idx,\n        type: \"divide\",\n        value: itm,\n      });\n    } else {\n      // 数字等符号\n      arrTranslate.push({\n        index: idx,\n        type: \"token\",\n        value: itm,\n      });\n    }\n  });\n\n  return getResultByStack(arrTranslate);\n}\n\nfunction getResultByStack(arrTranslate) {\n  // 通过栈分组 先匹配第一个括号 作为第一层的逻辑\n  let obj = {\n    operate: \"\",\n    tokenList: [],\n    children: [],\n  };\n  let stack = [];\n  arrTranslate.forEach((item) => {\n    if (item.value === \"(\") {\n      stack.push(item);\n    }\n    if (item.value === \")\") {\n      stack.push(item);\n      // 判断当前分组是否完备 即 （）成对匹配\n      if (checkStack(stack)) {\n        // 递归匹配子集\n        let child = getResultByStack(stack.slice(1, -1));\n        obj.children.push(child);\n        // 清空栈\n        stack = [];\n      }\n    }\n    if (item.type === \"operate\") {\n      if (stack.length === 0) {\n        // 如果栈为空 则为当前分组的 操作符\n        obj.operate = item.value;\n      } else {\n        // 不为空则是子分组的 操作符\n        stack.push(item);\n      }\n    }\n\n    if (item.type === \"token\") {\n      if (stack.length === 0) {\n        // 如果栈为空 则属于当前分组的 token 列表\n        obj.tokenList.push(item);\n      } else {\n        // 不为空则是子分组的 token 列表\n        stack.push(item);\n      }\n    }\n  });\n  return obj;\n}\n\n// 判断栈分组是否完备\nfunction checkStack(stack) {\n  let leftCount = stack.filter((itm) => itm.value === \"(\").length;\n  let rightCount = stack.filter((itm) => itm.value === \")\").length;\n  return leftCount === rightCount;\n}\n\nconsole.log(JSON.stringify(translate(str)));\n\n```\n\n### 结果\n\n```json\n{\n    \"operate\": \"|\",\n    \"tokenList\": [\n        {\n            \"index\": 24,\n            \"type\": \"token\",\n            \"value\": \"8\"\n        }\n    ],\n    \"children\": [\n        {\n            \"operate\": \"&\",\n            \"tokenList\": [\n                {\n                    \"index\": 21,\n                    \"type\": \"token\",\n                    \"value\": \"7\"\n                }\n            ],\n            \"children\": [\n                {\n                    \"operate\": \"|\",\n                    \"tokenList\": [\n                        {\n                            \"index\": 18,\n                            \"type\": \"token\",\n                            \"value\": \"6\"\n                        }\n                    ],\n                    \"children\": [\n                        {\n                            \"operate\": \"&\",\n                            \"tokenList\": [\n                                {\n                                    \"index\": 13,\n                                    \"type\": \"token\",\n                                    \"value\": \"4\"\n                                },\n                                {\n                                    \"index\": 15,\n                                    \"type\": \"token\",\n                                    \"value\": \"5\"\n                                }\n                            ],\n                            \"children\": [\n                                {\n                                    \"operate\": \"|\",\n                                    \"tokenList\": [\n                                        {\n                                            \"index\": 10,\n                                            \"type\": \"token\",\n                                            \"value\": \"3\"\n                                        }\n                                    ],\n                                    \"children\": [\n                                        {\n                                            \"operate\": \"&\",\n                                            \"tokenList\": [\n                                                {\n                                                    \"index\": 5,\n                                                    \"type\": \"token\",\n                                                    \"value\": \"1\"\n                                                },\n                                                {\n                                                    \"index\": 7,\n                                                    \"type\": \"token\",\n                                                    \"value\": \"2\"\n                                                }\n                                            ],\n                                            \"children\": []\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```",
      "mdContent": "<h3 id=\"toc-7c31fc\">完整代码</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&quot;(((((1 &amp; 2) | 3) &amp; 4 &amp; 5) | 6) &amp; 7) | 8&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> operate = [<span class=\"hljs-string\">&quot;&amp;&quot;</span>, <span class=\"hljs-string\">&quot;|&quot;</span>]; <span class=\"hljs-comment\">// 操作符</span>\n<span class=\"hljs-keyword\">const</span> divide = [<span class=\"hljs-string\">&quot;(&quot;</span>, <span class=\"hljs-string\">&quot;)&quot;</span>]; <span class=\"hljs-comment\">// 分隔符</span>\n\n<span class=\"hljs-comment\">// 字符串去除空格转数组 进行词法分析</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">translate</span>(<span class=\"hljs-params\">str</span>) {\n  <span class=\"hljs-keyword\">let</span> arr = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/ /gi</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-keyword\">let</span> arrTranslate = [];\n  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm, idx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (operate.<span class=\"hljs-title function_\">indexOf</span>(itm) &gt; -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-comment\">// 操作</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;operate&quot;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      });\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (divide.<span class=\"hljs-title function_\">indexOf</span>(itm) &gt; -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-comment\">// 括号分隔符</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;divide&quot;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      });\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 数字等符号</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;token&quot;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      });\n    }\n  });\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getResultByStack</span>(arrTranslate);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getResultByStack</span>(<span class=\"hljs-params\">arrTranslate</span>) {\n  <span class=\"hljs-comment\">// 通过栈分组 先匹配第一个括号 作为第一层的逻辑</span>\n  <span class=\"hljs-keyword\">let</span> obj = {\n    <span class=\"hljs-attr\">operate</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">tokenList</span>: [],\n    <span class=\"hljs-attr\">children</span>: [],\n  };\n  <span class=\"hljs-keyword\">let</span> stack = [];\n  arrTranslate.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&quot;(&quot;</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(item);\n    }\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&quot;)&quot;</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(item);\n      <span class=\"hljs-comment\">// 判断当前分组是否完备 即 （）成对匹配</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">checkStack</span>(stack)) {\n        <span class=\"hljs-comment\">// 递归匹配子集</span>\n        <span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-title function_\">getResultByStack</span>(stack.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>));\n        obj.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(child);\n        <span class=\"hljs-comment\">// 清空栈</span>\n        stack = [];\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&quot;operate&quot;</span>) {\n      <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 如果栈为空 则为当前分组的 操作符</span>\n        obj.<span class=\"hljs-property\">operate</span> = item.<span class=\"hljs-property\">value</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 不为空则是子分组的 操作符</span>\n        stack.<span class=\"hljs-title function_\">push</span>(item);\n      }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&quot;token&quot;</span>) {\n      <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 如果栈为空 则属于当前分组的 token 列表</span>\n        obj.<span class=\"hljs-property\">tokenList</span>.<span class=\"hljs-title function_\">push</span>(item);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 不为空则是子分组的 token 列表</span>\n        stack.<span class=\"hljs-title function_\">push</span>(item);\n      }\n    }\n  });\n  <span class=\"hljs-keyword\">return</span> obj;\n}\n\n<span class=\"hljs-comment\">// 判断栈分组是否完备</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkStack</span>(<span class=\"hljs-params\">stack</span>) {\n  <span class=\"hljs-keyword\">let</span> leftCount = stack.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm</span>) =&gt;</span> itm.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&quot;(&quot;</span>).<span class=\"hljs-property\">length</span>;\n  <span class=\"hljs-keyword\">let</span> rightCount = stack.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm</span>) =&gt;</span> itm.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&quot;)&quot;</span>).<span class=\"hljs-property\">length</span>;\n  <span class=\"hljs-keyword\">return</span> leftCount === rightCount;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-title function_\">translate</span>(str)));\n</code></pre>\n<h3 id=\"toc-5ad7f5\">结果</h3>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">24</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8&quot;</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">21</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7&quot;</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">,</span>\n                            <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                            <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6&quot;</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                            <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n                            <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                                <span class=\"hljs-punctuation\">{</span>\n                                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;4&quot;</span>\n                                <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n                                <span class=\"hljs-punctuation\">{</span>\n                                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">15</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;5&quot;</span>\n                                <span class=\"hljs-punctuation\">}</span>\n                            <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                            <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                                <span class=\"hljs-punctuation\">{</span>\n                                    <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                                        <span class=\"hljs-punctuation\">{</span>\n                                            <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">,</span>\n                                            <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                            <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3&quot;</span>\n                                        <span class=\"hljs-punctuation\">}</span>\n                                    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                                    <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                                        <span class=\"hljs-punctuation\">{</span>\n                                            <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                            <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                                                <span class=\"hljs-punctuation\">{</span>\n                                                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span>\n                                                    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                                    <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1&quot;</span>\n                                                <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n                                                <span class=\"hljs-punctuation\">{</span>\n                                                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">7</span><span class=\"hljs-punctuation\">,</span>\n                                                    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                                                    <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2&quot;</span>\n                                                <span class=\"hljs-punctuation\">}</span>\n                                            <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                                            <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n                                        <span class=\"hljs-punctuation\">}</span>\n                                    <span class=\"hljs-punctuation\">]</span>\n                                <span class=\"hljs-punctuation\">}</span>\n                            <span class=\"hljs-punctuation\">]</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                    <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-7c31fc\">完整代码</a></li>\n<li><a href=\"#toc-5ad7f5\">结果</a></li>\n</ul>\n",
      "url": "jiang-bu-er-biao-da-shi-zhuan-cheng-json-ge-shi",
      "created_timestamp": 1668793990000,
      "updated_timestamp": 1668793990000,
      "symbolsCount": 14341
    },
    {
      "id": "1ef3b5ed-f869-6b00-8f14-0e29fe3fa024",
      "title": "javascript观察者模式的简单实现",
      "alias": "",
      "cover": "",
      "created_time": "2018-03-14T15:15:33.000Z",
      "updated_time": "2018-03-14T15:15:33.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "excerpt": "观察者模式当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式基本的代码框架function PubSub() {    this.handlers = {};}PubSub.prototype = {",
      "published": true,
      "content": "\n### 观察者模式\n当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式\n\n<!-- more -->\n\n### 基本的代码框架\n```javascript\nfunction PubSub() {\n    this.handlers = {};\n}\nPubSub.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n    },\n    // 触发事件(发布事件)\n    emit: function(eventType){\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n    }\n};\n```\n`this.handlers`保存了所有的事件名称和对应的操作\n\n- 事件的绑定\n```javascript\n//订阅事件\nvar self = this;\nif(!(eventType in self.handlers)) {\n    self.handlers[eventType] = [];\n}\nself.handlers[eventType].push(handler);\nreturn this;\n```\n在绑定事件的时候先判断，当前事件名称是否已存在，如果不存在则创建事件名称的数组，再将事件加入\n\n- 触发事件(发布事件)\n```javascript\n// 触发事件(发布事件)\nvar self = this;\nvar handlerArgs = Array.prototype.slice.call(arguments,1);\nfor(var i = 0; i < self.handlers[eventType].length; i++) {\n    self.handlers[eventType][i].apply(self,handlerArgs);\n}\nreturn self;\n```\n触发事件时，通过通过事件名称获取绑定在这个事件名上的所有事件，循环调用事件\n\n- 事件删除\n```javascript\nvar currentEvent = this.handlers[eventType];\nvar len = 0;\nif (currentEvent) {\n    len = currentEvent.length;\n    for (var i = len - 1; i >= 0; i--){\n        if (currentEvent[i] === handler){\n            currentEvent.splice(i, 1);\n        }\n    }\n}\nreturn this;\n```\n> 上面的代码中最后都有一个return this;是为了实现方法的链式操作\n\n### 实例\n```javascript\nvar pubsub = new PubSub();\nvar callback = function(data){\n    console.log(data);\n};\n//订阅事件A\npubsub.on('A', function(data){\n    console.log(1 + data);\n}).on('A', function(data){\n    console.log(2 + data);\n}).on('A', callback).emit('A', '我是参数');\n//控制台将输出\n//1我是参数\n//2我是参数\n//我是参数\n```\n\n\n### 完整的代码\n```javascript\nfunction PubSub() {\n    this.handlers = {};\n}\nPubSub.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        if(!(eventType in self.handlers)) {\n            self.handlers[eventType] = [];\n        }\n        self.handlers[eventType].push(handler);\n        return this;\n    },\n    // 触发事件(发布事件)\n    emit: function(eventType){\n        var self = this;\n        var handlerArgs = Array.prototype.slice.call(arguments,1);\n        for(var i = 0; i < self.handlers[eventType].length; i++) {\n            self.handlers[eventType][i].apply(self,handlerArgs);\n        }\n        return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i >= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n\nvar pubsub = new PubSub();\nvar callback = function(data){\n    console.log(data);\n};\n//订阅事件A\npubsub.on('A', function(data){\n    console.log(1 + data);\n}).on('A', function(data){\n    console.log(2 + data);\n}).on('A', callback).emit('A', '我是参数');\n```",
      "mdContent": "<h3 id=\"toc-ed69b1\">观察者模式</h3>\n<p>当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式</p>\n<!-- more -->\n\n<h3 id=\"toc-8627bc\">基本的代码框架</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PubSub</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span> = {};\n}\n<span class=\"hljs-title class_\">PubSub</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n    <span class=\"hljs-comment\">// 订阅事件</span>\n    <span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType, handler</span>){\n    },\n    <span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n    <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType</span>){\n    },\n    <span class=\"hljs-comment\">// 删除订阅事件</span>\n    <span class=\"hljs-attr\">off</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType, handler</span>){\n    }\n};\n</code></pre>\n<p><code>this.handlers</code>保存了所有的事件名称和对应的操作</p>\n<ul>\n<li>事件的绑定</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//订阅事件</span>\n<span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>;\n<span class=\"hljs-keyword\">if</span>(!(eventType <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">handlers</span>)) {\n    self.<span class=\"hljs-property\">handlers</span>[eventType] = [];\n}\nself.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-title function_\">push</span>(handler);\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n</code></pre>\n<p>在绑定事件的时候先判断，当前事件名称是否已存在，如果不存在则创建事件名称的数组，再将事件加入</p>\n<ul>\n<li>触发事件(发布事件)</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n<span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>;\n<span class=\"hljs-keyword\">var</span> handlerArgs = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>,<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-property\">length</span>; i++) {\n    self.<span class=\"hljs-property\">handlers</span>[eventType][i].<span class=\"hljs-title function_\">apply</span>(self,handlerArgs);\n}\n<span class=\"hljs-keyword\">return</span> self;\n</code></pre>\n<p>触发事件时，通过通过事件名称获取绑定在这个事件名上的所有事件，循环调用事件</p>\n<ul>\n<li>事件删除</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> currentEvent = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span>[eventType];\n<span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">if</span> (currentEvent) {\n    len = currentEvent.<span class=\"hljs-property\">length</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = len - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--){\n        <span class=\"hljs-keyword\">if</span> (currentEvent[i] === handler){\n            currentEvent.<span class=\"hljs-title function_\">splice</span>(i, <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n</code></pre>\n<blockquote>\n<p>上面的代码中最后都有一个return this;是为了实现方法的链式操作</p>\n</blockquote>\n<h3 id=\"toc-480c21\">实例</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> pubsub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PubSub</span>();\n<span class=\"hljs-keyword\">var</span> callback = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n};\n<span class=\"hljs-comment\">//订阅事件A</span>\npubsub.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> + data);\n}).<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span> + data);\n}).<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, callback).<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;我是参数&#x27;</span>);\n<span class=\"hljs-comment\">//控制台将输出</span>\n<span class=\"hljs-comment\">//1我是参数</span>\n<span class=\"hljs-comment\">//2我是参数</span>\n<span class=\"hljs-comment\">//我是参数</span>\n</code></pre>\n<h3 id=\"toc-a88cff\">完整的代码</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PubSub</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span> = {};\n}\n<span class=\"hljs-title class_\">PubSub</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n    <span class=\"hljs-comment\">// 订阅事件</span>\n    <span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType, handler</span>){\n        <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>;\n        <span class=\"hljs-keyword\">if</span>(!(eventType <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">handlers</span>)) {\n            self.<span class=\"hljs-property\">handlers</span>[eventType] = [];\n        }\n        self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-title function_\">push</span>(handler);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n    },\n    <span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n    <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType</span>){\n        <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>;\n        <span class=\"hljs-keyword\">var</span> handlerArgs = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>,<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-property\">length</span>; i++) {\n            self.<span class=\"hljs-property\">handlers</span>[eventType][i].<span class=\"hljs-title function_\">apply</span>(self,handlerArgs);\n        }\n        <span class=\"hljs-keyword\">return</span> self;\n    },\n    <span class=\"hljs-comment\">// 删除订阅事件</span>\n    <span class=\"hljs-attr\">off</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">eventType, handler</span>){\n        <span class=\"hljs-keyword\">var</span> currentEvent = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span>[eventType];\n        <span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (currentEvent) {\n            len = currentEvent.<span class=\"hljs-property\">length</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = len - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--){\n                <span class=\"hljs-keyword\">if</span> (currentEvent[i] === handler){\n                    currentEvent.<span class=\"hljs-title function_\">splice</span>(i, <span class=\"hljs-number\">1</span>);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n    }\n};\n\n<span class=\"hljs-keyword\">var</span> pubsub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PubSub</span>();\n<span class=\"hljs-keyword\">var</span> callback = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n};\n<span class=\"hljs-comment\">//订阅事件A</span>\npubsub.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> + data);\n}).<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span> + data);\n}).<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, callback).<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;我是参数&#x27;</span>);\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-ed69b1\">观察者模式</a></li>\n<li><a href=\"#toc-8627bc\">基本的代码框架</a></li>\n<li><a href=\"#toc-480c21\">实例</a></li>\n<li><a href=\"#toc-a88cff\">完整的代码</a></li>\n</ul>\n",
      "url": "javascript-guan-cha-zhe-mo-shi-de-jian-dan-shi-xian",
      "created_timestamp": 1521040533000,
      "updated_timestamp": 1521040533000,
      "symbolsCount": 9294
    },
    {
      "id": "1ef3b5bb-0805-6d80-9432-553b597926f2",
      "title": "javascript 函数式编程之柯里化(currying)",
      "alias": "",
      "cover": "",
      "created_time": "2018-03-14T14:45:46.000Z",
      "updated_time": "2018-03-14T14:45:46.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "excerpt": "<h3 id=\"toc-b541c6\">什么是柯里化</h3>\n<p>函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n",
      "published": true,
      "content": "\n### 什么是柯里化\n函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n<!-- more -->\n\n### js中柯里化的基本实现\n```javascript\n// 柯里化通用实现\nfunction currying(fn) {\n    var slice = Array.prototype.slice;\n    var args = slice.call(arguments, 1);\n    return function() {\n        var innerArgs = slice.call(arguments);\n        var finalArgs = args.concat(innerArgs);\n        return fn.apply(null, finalArgs);\n    }\n}\n\n```\n\n### 通过柯里化实现阶乘的函数\n```javascript\n//乘积\nfunction tailFactorial(total,n){\n    if(n == 1) return total;\n    return tailFactorial(n * total,n-1);\n}\nconst factorial  = currying(tailFactorial,1);\nconsole.log(factorial(5));//120\n```\n`tailFactorial`传入了两个参数，最后返回一个函数\n\n### 上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次\n```javascript\nfunction currying2(fn){\n    var _args = [];\n    return function cb() {\n        if (arguments.length === 0) {\n            return fn.apply(this, _args);\n        }\n        Array.prototype.push.apply(_args, arguments);\n        return cb;\n    }\n}\n```\n在这个函数中，我们定义了一个_args变量，用于记录多次调用的参数，当最后一次调用没有传入参数时才最后处理\n\n- 下面定义一个累加函数，在这个例子中我们可以看到柯里化的一个特性--延迟求值\n```javascript\n//逐步求值 (延迟执行)\nfunction add() {\n    var sum = 0, i, len;\n    for (i = 0, len = arguments.length; i < len; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n}\nconst addCurry = currying2(add);\nconsole.log(addCurry(3)(3)(2)(1,1,1)());\n```\n\n\n\n\n\n",
      "mdContent": "<h3 id=\"toc-b541c6\">什么是柯里化</h3>\n<p>函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<!-- more -->\n\n<h3 id=\"toc-e2fb44\">js中柯里化的基本实现</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">// 柯里化通用实现</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">currying</span>(<span class=\"hljs-params\">fn</span>) {\n    <span class=\"hljs-keyword\">var</span> slice = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>;\n    <span class=\"hljs-keyword\">var</span> args = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">var</span> innerArgs = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);\n        <span class=\"hljs-keyword\">var</span> finalArgs = args.<span class=\"hljs-title function_\">concat</span>(innerArgs);\n        <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, finalArgs);\n    }\n}\n</code></pre>\n<h3 id=\"toc-f50a54\">通过柯里化实现阶乘的函数</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//乘积</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">tailFactorial</span>(<span class=\"hljs-params\">total,n</span>){\n    <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> total;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">tailFactorial</span>(n * total,n-<span class=\"hljs-number\">1</span>);\n}\n<span class=\"hljs-keyword\">const</span> factorial  = <span class=\"hljs-title function_\">currying</span>(tailFactorial,<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-number\">5</span>));<span class=\"hljs-comment\">//120</span>\n</code></pre>\n<p><code>tailFactorial</code>传入了两个参数，最后返回一个函数</p>\n<h3 id=\"toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">currying2</span>(<span class=\"hljs-params\">fn</span>){\n    <span class=\"hljs-keyword\">var</span> _args = [];\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cb</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, _args);\n        }\n        <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">push</span>.<span class=\"hljs-title function_\">apply</span>(_args, <span class=\"hljs-variable language_\">arguments</span>);\n        <span class=\"hljs-keyword\">return</span> cb;\n    }\n}\n</code></pre>\n<p>在这个函数中，我们定义了一个_args变量，用于记录多次调用的参数，当最后一次调用没有传入参数时才最后处理</p>\n<ul>\n<li>下面定义一个累加函数，在这个例子中我们可以看到柯里化的一个特性--延迟求值</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//逐步求值 (延迟执行)</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>, i, len;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>, len = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span>; i &lt; len; i++) {\n        sum += <span class=\"hljs-variable language_\">arguments</span>[i];\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n<span class=\"hljs-keyword\">const</span> addCurry = <span class=\"hljs-title function_\">currying2</span>(add);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">addCurry</span>(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)());\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-b541c6\">什么是柯里化</a></li>\n<li><a href=\"#toc-e2fb44\">js中柯里化的基本实现</a></li>\n<li><a href=\"#toc-f50a54\">通过柯里化实现阶乘的函数</a></li>\n<li><a href=\"#toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</a></li>\n</ul>\n",
      "url": "javascript-han-shu-shi-bian-cheng-zhi-ke-li-hua-currying",
      "created_timestamp": 1521038746000,
      "updated_timestamp": 1521038746000,
      "symbolsCount": 4391
    },
    {
      "id": "1ef3b5d9-1b23-6f70-9c72-cad688b0117d",
      "title": "jQuery 省市三级联动",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T20:58:13.000Z",
      "updated_time": "2017-04-29T20:58:13.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "excerpt": "<p>页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息</p>\n",
      "published": true,
      "content": "\n页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息\n\n<!-- more -->\n\n```js\n var regions = {\n        'state': $('#state'),\n        'city': $('#city'),\n        'district': $('#district'),\n        'init' : function(){\n            var _this = this;\n            _this.getState(_this.state,1);\n            _this.state.change(function(){\n                var id = ($(this).val());\n                _this.city.find('option:gt(0)').remove();\n                _this.district.find('option:gt(0)').remove();\n                _this.getCity(_this.city,id);\n            });\n\n            _this.city.change(function(){\n                var id = ($(this).val());\n                _this.district.find('option:gt(0)').remove();\n                _this.getDistrict(_this.district,id);\n            });\n        },\n        'getState':function(elem,id,callback){\n            this.getJson(elem,id,callback);\n        },\n        'getCity':function(elem,id,callback){\n            this.getJson(elem,id,callback);\n        },\n        'getDistrict':function(elem,id,callback){\n            this.getJson(elem,id,callback);\n        },\n        'render':function(elem,data,callback){\n            if(data.regions && !$.isEmptyObject(data.regions)){\n                elem.find('option:gt(0)').remove();\n                $.each(data.regions,function(name,value){\n                    elem.append('<option value =\"'+ value.id +'\">'+ value.name + '</option>')\n                });\n                if(callback && (typeof callback) == 'function'){\n                    callback();\n                }\n            }\n        },\n        'getJson':function(elem,id,callback){\n            var _this = this;\n            $.ajax({\n                type: \"post\",\n                url: system.url(\"address/get-regions\"),\n                data: {\n                    \"parent_id\":id\n                },\n                dataType: \"json\",\n                cache: false,\n                success: function(resp){\n                    if(resp.status){\n                        _this.render(elem,resp.data,callback);\n                    }\n                },\n                error:function(){\n                }\n            });\n        }\n    };\n```\n\n#### callback的作用\n\n当获取信息时，需要渲染对应的省市信息\n通过添加回调，可以依次获取省、市、地区信息\n\n```js\nregions.getState(regions.state,1,function(){\n    $('#state').val(_this.attr('data-state'));\n    regions.getCity(regions.city,_this.attr('data-state'),function(){\n        $('#city').val(_this.attr('data-city'));\n        regions.getDistrict(regions.district,_this.attr('data-city'),function(){\n            $('#district').val(_this.attr('data-district'));\n         });\n    });\n});\n```",
      "mdContent": "<p>页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息</p>\n<!-- more -->\n\n<pre><code class=\"hljs lang-js\"> <span class=\"hljs-keyword\">var</span> regions = {\n        <span class=\"hljs-string\">&#x27;state&#x27;</span>: $(<span class=\"hljs-string\">&#x27;#state&#x27;</span>),\n        <span class=\"hljs-string\">&#x27;city&#x27;</span>: $(<span class=\"hljs-string\">&#x27;#city&#x27;</span>),\n        <span class=\"hljs-string\">&#x27;district&#x27;</span>: $(<span class=\"hljs-string\">&#x27;#district&#x27;</span>),\n        <span class=\"hljs-string\">&#x27;init&#x27;</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n            <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-variable language_\">this</span>;\n            _this.<span class=\"hljs-title function_\">getState</span>(_this.<span class=\"hljs-property\">state</span>,<span class=\"hljs-number\">1</span>);\n            _this.<span class=\"hljs-property\">state</span>.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                <span class=\"hljs-keyword\">var</span> id = ($(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">val</span>());\n                _this.<span class=\"hljs-property\">city</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>();\n                _this.<span class=\"hljs-property\">district</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>();\n                _this.<span class=\"hljs-title function_\">getCity</span>(_this.<span class=\"hljs-property\">city</span>,id);\n            });\n\n            _this.<span class=\"hljs-property\">city</span>.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                <span class=\"hljs-keyword\">var</span> id = ($(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">val</span>());\n                _this.<span class=\"hljs-property\">district</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>();\n                _this.<span class=\"hljs-title function_\">getDistrict</span>(_this.<span class=\"hljs-property\">district</span>,id);\n            });\n        },\n        <span class=\"hljs-string\">&#x27;getState&#x27;</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,id,callback</span>){\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem,id,callback);\n        },\n        <span class=\"hljs-string\">&#x27;getCity&#x27;</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,id,callback</span>){\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem,id,callback);\n        },\n        <span class=\"hljs-string\">&#x27;getDistrict&#x27;</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,id,callback</span>){\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem,id,callback);\n        },\n        <span class=\"hljs-string\">&#x27;render&#x27;</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,data,callback</span>){\n            <span class=\"hljs-keyword\">if</span>(data.<span class=\"hljs-property\">regions</span> &amp;&amp; !$.<span class=\"hljs-title function_\">isEmptyObject</span>(data.<span class=\"hljs-property\">regions</span>)){\n                elem.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>();\n                $.<span class=\"hljs-title function_\">each</span>(data.<span class=\"hljs-property\">regions</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name,value</span>){\n                    elem.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;&lt;option value =&quot;&#x27;</span>+ value.<span class=\"hljs-property\">id</span> +<span class=\"hljs-string\">&#x27;&quot;&gt;&#x27;</span>+ value.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;&lt;/option&gt;&#x27;</span>)\n                });\n                <span class=\"hljs-keyword\">if</span>(callback &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> callback) == <span class=\"hljs-string\">&#x27;function&#x27;</span>){\n                    <span class=\"hljs-title function_\">callback</span>();\n                }\n            }\n        },\n        <span class=\"hljs-string\">&#x27;getJson&#x27;</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,id,callback</span>){\n            <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-variable language_\">this</span>;\n            $.<span class=\"hljs-title function_\">ajax</span>({\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n                <span class=\"hljs-attr\">url</span>: system.<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">&quot;address/get-regions&quot;</span>),\n                <span class=\"hljs-attr\">data</span>: {\n                    <span class=\"hljs-string\">&quot;parent_id&quot;</span>:id\n                },\n                <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&quot;json&quot;</span>,\n                <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resp</span>){\n                    <span class=\"hljs-keyword\">if</span>(resp.<span class=\"hljs-property\">status</span>){\n                        _this.<span class=\"hljs-title function_\">render</span>(elem,resp.<span class=\"hljs-property\">data</span>,callback);\n                    }\n                },\n                <span class=\"hljs-attr\">error</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                }\n            });\n        }\n    };\n</code></pre>\n<h4 id=\"toc-4b4d0f\">callback的作用</h4>\n<p>当获取信息时，需要渲染对应的省市信息\n通过添加回调，可以依次获取省、市、地区信息</p>\n<pre><code class=\"hljs lang-js\">regions.<span class=\"hljs-title function_\">getState</span>(regions.<span class=\"hljs-property\">state</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n    $(<span class=\"hljs-string\">&#x27;#state&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-state&#x27;</span>));\n    regions.<span class=\"hljs-title function_\">getCity</span>(regions.<span class=\"hljs-property\">city</span>,_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-state&#x27;</span>),<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n        $(<span class=\"hljs-string\">&#x27;#city&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-city&#x27;</span>));\n        regions.<span class=\"hljs-title function_\">getDistrict</span>(regions.<span class=\"hljs-property\">district</span>,_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-city&#x27;</span>),<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n            $(<span class=\"hljs-string\">&#x27;#district&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-district&#x27;</span>));\n         });\n    });\n});\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-4b4d0f\">callback的作用</a></li>\n</ul>\n",
      "url": "jquery-sheng-shi-san-ji-lian-dong",
      "created_timestamp": 1493499493000,
      "updated_timestamp": 1493499493000,
      "symbolsCount": 7006
    },
    {
      "id": "1ef3b5c3-e152-6d60-94dd-7da5eda79cf5",
      "title": "NODE.JS采集练手",
      "alias": "",
      "cover": "",
      "created_time": "2017-05-03T14:05:43.000Z",
      "updated_time": "2017-05-03T14:05:43.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "excerpt": "使用类库request发送请求获取网页内容co执行Generator函数cheerio解析html，和jQuery一样通过选择器获取node-xlsx生成excel文档代码如下&quot;use strict&quot;;const request = require(&#39;request&#3",
      "published": true,
      "content": "\n### 使用类库\n\n- request\n  发送请求获取网页内容\n- co\n  执行Generator函数\n- cheerio\n  解析html，和jQuery一样通过选择器获取\n- node-xlsx\n  生成excel文档\n\n<!-- more -->\n\n代码如下\n```javascript\n\"use strict\";\nconst request = require('request');\nconst co = require('co');\nconst cheerio = require('cheerio');\nconst xlsx = require('node-xlsx');\nconst fs = require('fs');\nlet base = 'https://aso100.com/app/rank/appid/1188599882/country/cn';\nlet base_url = 'https://aso100.com/app/rank/appid/1188599882/country/';\nlet urls = [];\nlet dataArray = [];\n\n//通过url，获取网页内容\nlet getUrl = (url) => {\n    return new Promise((resolve,reject) => {\n        request(url, function (err, response, body) {\n            if(err){\n                return reject(err);\n            }\n            return err ? reject(err) : resolve(body);\n\n        });\n\n    });\n};\n\n\n//通过url获取需要的字段内容，并存入dataArray\nlet getDetail = function* (url){\n    let data = yield getUrl(url);\n    let $ = cheerio.load(data);\n    let title = $('.appinfo-title').text();\n    let name = $('.appinfo-country .name').text();\n    console.log(title+name);\n\n    dataArray.push([title,name]);\n};\n\n//休眠函数，避免速度太快\nlet sleep = (t) => {\n    return new Promise((resolve,reject) => {\n        setTimeout(function(){\n            resolve();\n        },t)\n    });\n};\n\n\n//获取base目录中所有需要采集的url地址，并执行采集，最后导出excel\nlet getUrlArray = function* () {\n    let html = yield getUrl(base);\n    let $ = cheerio.load(html);\n    let ele = $('.select-container').find('a');\n    ele.each(function(){\n        if($(this).attr('data-country')){\n            urls.push(base_url + $(this).attr('data-country'));\n        }\n    });\n\n    //获取内容\n    for(let i=0;i<urls.length;i++){\n        yield sleep(20000);\n        yield getDetail(urls[i]);\n    }\n\n    //导出excel\n    let buffer = xlsx.build([{name: \"mySheetName\", data: dataArray}]);\n    fs.writeFileSync(\"test.csv\", buffer, 'binary');\n};\n\n//通过co执行Generator\nlet run = (fn) =>{\n    co(fn).catch((err) => {\n        console.log(err);\n    });\n};\n\n//开始采集\nrun(getUrlArray());\n```\n",
      "mdContent": "<h3 id=\"toc-4843fb\">使用类库</h3>\n<ul>\n<li>request\n发送请求获取网页内容</li>\n<li>co\n执行Generator函数</li>\n<li>cheerio\n解析html，和jQuery一样通过选择器获取</li>\n<li>node-xlsx\n生成excel文档</li>\n</ul>\n<!-- more -->\n\n<p>代码如下</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-meta\">&quot;use strict&quot;</span>;\n<span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> co = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;co&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> cheerio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;cheerio&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> xlsx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;node-xlsx&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n<span class=\"hljs-keyword\">let</span> base = <span class=\"hljs-string\">&#x27;https://aso100.com/app/rank/appid/1188599882/country/cn&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> base_url = <span class=\"hljs-string\">&#x27;https://aso100.com/app/rank/appid/1188599882/country/&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> urls = [];\n<span class=\"hljs-keyword\">let</span> dataArray = [];\n\n<span class=\"hljs-comment\">//通过url，获取网页内容</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">getUrl</span> = (<span class=\"hljs-params\">url</span>) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n        <span class=\"hljs-title function_\">request</span>(url, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, response, body</span>) {\n            <span class=\"hljs-keyword\">if</span>(err){\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">reject</span>(err);\n            }\n            <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(body);\n\n        });\n\n    });\n};\n\n\n<span class=\"hljs-comment\">//通过url获取需要的字段内容，并存入dataArray</span>\n<span class=\"hljs-keyword\">let</span> getDetail = <span class=\"hljs-keyword\">function</span>* (url){\n    <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getUrl</span>(url);\n    <span class=\"hljs-keyword\">let</span> $ = cheerio.<span class=\"hljs-title function_\">load</span>(data);\n    <span class=\"hljs-keyword\">let</span> title = $(<span class=\"hljs-string\">&#x27;.appinfo-title&#x27;</span>).<span class=\"hljs-title function_\">text</span>();\n    <span class=\"hljs-keyword\">let</span> name = $(<span class=\"hljs-string\">&#x27;.appinfo-country .name&#x27;</span>).<span class=\"hljs-title function_\">text</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(title+name);\n\n    dataArray.<span class=\"hljs-title function_\">push</span>([title,name]);\n};\n\n<span class=\"hljs-comment\">//休眠函数，避免速度太快</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">sleep</span> = (<span class=\"hljs-params\">t</span>) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n            <span class=\"hljs-title function_\">resolve</span>();\n        },t)\n    });\n};\n\n\n<span class=\"hljs-comment\">//获取base目录中所有需要采集的url地址，并执行采集，最后导出excel</span>\n<span class=\"hljs-keyword\">let</span> getUrlArray = <span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getUrl</span>(base);\n    <span class=\"hljs-keyword\">let</span> $ = cheerio.<span class=\"hljs-title function_\">load</span>(html);\n    <span class=\"hljs-keyword\">let</span> ele = $(<span class=\"hljs-string\">&#x27;.select-container&#x27;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>);\n    ele.<span class=\"hljs-title function_\">each</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n        <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-country&#x27;</span>)){\n            urls.<span class=\"hljs-title function_\">push</span>(base_url + $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-country&#x27;</span>));\n        }\n    });\n\n    <span class=\"hljs-comment\">//获取内容</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;urls.<span class=\"hljs-property\">length</span>;i++){\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">20000</span>);\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getDetail</span>(urls[i]);\n    }\n\n    <span class=\"hljs-comment\">//导出excel</span>\n    <span class=\"hljs-keyword\">let</span> buffer = xlsx.<span class=\"hljs-title function_\">build</span>([{<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;mySheetName&quot;</span>, <span class=\"hljs-attr\">data</span>: dataArray}]);\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(<span class=\"hljs-string\">&quot;test.csv&quot;</span>, buffer, <span class=\"hljs-string\">&#x27;binary&#x27;</span>);\n};\n\n<span class=\"hljs-comment\">//通过co执行Generator</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn</span>) =&gt;{\n    <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n    });\n};\n\n<span class=\"hljs-comment\">//开始采集</span>\n<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">getUrlArray</span>());\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-4843fb\">使用类库</a></li>\n</ul>\n",
      "url": "nodejs-cai-ji-lian-shou",
      "created_timestamp": 1493820343000,
      "updated_timestamp": 1493820343000,
      "symbolsCount": 6165
    },
    {
      "id": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "title": "pnpm install报错",
      "alias": "",
      "cover": "",
      "created_time": "2022-08-26T10:30:22.000Z",
      "updated_time": "2022-08-26T10:30:22.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [
        "pnpm"
      ],
      "excerpt": "在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况解决方法安装重试失败， 可以先删除 pnpm本地store- 执行-  执行 rm -rf $(pnpm store path)-  重新安装目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充",
      "published": true,
      "content": "\n\n在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况\n\n解决方法\n\npnpm install失败多次后， 可以删除 项目中的 `node_modules` 以及 `pnpm` 的本地store\n\n-  执行 `rm -rf node_modules`\n-  执行 `rm -rf $(pnpm store path)`\n-  重试 `pnpm install`\n\n\n目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充\n\n<!-- more -->",
      "mdContent": "<p>在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况</p>\n<p>解决方法</p>\n<p>pnpm install失败多次后， 可以删除 项目中的 <code>node_modules</code> 以及 <code>pnpm</code> 的本地store</p>\n<ul>\n<li>执行 <code>rm -rf node_modules</code></li>\n<li>执行 <code>rm -rf $(pnpm store path)</code></li>\n<li>重试 <code>pnpm install</code></li>\n</ul>\n<p>目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充</p>\n<!-- more -->",
      "toc": "",
      "url": "pnpm-install-bao-cuo",
      "created_timestamp": 1661509822000,
      "updated_timestamp": 1661509822000,
      "symbolsCount": 312
    },
    {
      "id": "1ef3b5b5-5f66-6ad0-9846-ac1b4e440327",
      "title": "koa2 + redis使用笔记",
      "alias": "",
      "cover": "",
      "created_time": "2018-04-18T21:23:14.000Z",
      "updated_time": "2018-04-18T21:23:14.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "excerpt": "安装redisyum install redis启动服务systemctl start redis添加开机启动项systemctl enable redisredis配置修改配置文件 /etc/redis.conf注释掉 bind 127.0.0.1去掉#requirepass foobared的注",
      "published": true,
      "content": "\n\n### 安装redis\n```bash\nyum install redis\n```\n### 启动服务\n```bash\nsystemctl start redis\n```\n### 添加开机启动项\n```bash\nsystemctl enable redis\n```\n\n<!-- more -->\n\n### redis配置\n\n修改配置文件 /etc/redis.conf\n\n- 注释掉 bind 127.0.0.1\n- 去掉#requirepass foobared的注释并设置密码\n\n\n未完",
      "mdContent": "<h3 id=\"toc-4f9b67\">安装redis</h3>\n<pre><code class=\"hljs lang-undefined\">yum install redis\n</code></pre>\n<h3 id=\"toc-33d81c\">启动服务</h3>\n<pre><code class=\"hljs lang-undefined\">systemctl start redis\n</code></pre>\n<h3 id=\"toc-83b1df\">添加开机启动项</h3>\n<pre><code class=\"hljs lang-bash\">systemctl <span class=\"hljs-built_in\">enable</span> redis\n</code></pre>\n<!-- more -->\n\n<h3 id=\"toc-a7948a\">redis配置</h3>\n<p>修改配置文件 /etc/redis.conf</p>\n<ul>\n<li>注释掉 bind 127.0.0.1</li>\n<li>去掉#requirepass foobared的注释并设置密码</li>\n</ul>\n<p>未完</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-4f9b67\">安装redis</a></li>\n<li><a href=\"#toc-33d81c\">启动服务</a></li>\n<li><a href=\"#toc-83b1df\">添加开机启动项</a></li>\n<li><a href=\"#toc-a7948a\">redis配置</a></li>\n</ul>\n",
      "url": "koa-redis-shi-yong-bi-ji",
      "created_timestamp": 1524086594000,
      "updated_timestamp": 1524086594000,
      "symbolsCount": 475
    },
    {
      "id": "1ef3b5db-fc15-6310-b8d7-128489aa72d6",
      "title": "express实践",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T20:52:30.000Z",
      "updated_time": "2017-04-29T20:52:30.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "excerpt": "Node.js 7.0发布之前，写一篇关于express的文章项目创建使用express-generator使用npm install express-generator -g代码修改自动重启使用nodemonnodemon ./bin/www全局设置//加载配置项global.Config = r",
      "published": true,
      "content": "\n\nNode.js 7.0发布之前，写一篇关于express的文章\n\n#### 项目创建\n\n使用express-generator\n- 使用npm install express-generator -g\n\n#### 代码修改自动重启\n\n使用nodemon\n- nodemon ./bin/www\n\n#### 全局设置\n\n<!-- more -->\n\n```js\n//加载配置项\nglobal.Config = require(path.resolve(Root, './config/config'));\n//通用方法(设置为全局对象，方便调用)\nglobal.F = require(path.resolve(Root, './common/funcs'));\n//socket事件方法\nglobal.Socket = require(path.resolve(Root, './socket/socket'));\n//加载所有的数据库model\nglobal.M = {};\n//model存储路径 （暂时不支持二级目录）\nvar modelsPath = path.resolve(Root, 'models');\nfs.readdirSync(modelsPath).forEach(function (name) {\n  if (path.extname(name) !== '') {\n    name = path.basename(name, '.js');\n    M[name] = require(path.resolve(modelsPath,name));\n  }\n});\n```\n使用co、Promise（bluebird）进行异步处理\n\n定义通用方法run实行Promise,并抛出错误\n\n```js\nlet run = (fn,next) =>{\n  co(fn).catch((err) => {\n    next(err);\n  });\n};\n```\n\n#### 通用方法列表 (大部分抄袭thinkjs)\n\n```js\nmodule.exports = {\n    run:run,\n    promisify:promisify,\n    camelCase:camelCase,\n    defer:defer,\n    Class:Class,\n    extend:extend,\n    isClass:isClass,\n    isBoolean:isBoolean,\n    isNumber:isNumber,\n    isObject:isObject,\n    isString:isString,\n    isArray:isArray,\n    isFunction:isFunction,\n    isDate: util.isDate,\n    isRegExp: util.isRegExp,\n    isError: util.isError,\n    isIP: net.isIP,\n    isIP4: net.isIPv4,\n    isIP6: net.isIPv6,\n    isFile:isFile,\n    isFileAsync:isFileAsync,\n    isDir:isDir,\n    isDirAsync:isDirAsync,\n    isNumberString:isNumberString,\n    isPromise:isPromise,\n    isWritable:isWritable,\n    isBuffer:isBuffer,\n    isTrueEmpty:isTrueEmpty,\n    isEmpty:isEmpty,\n    clone:clone,\n    mkdir:mkdir,\n    rmdir:rmdir,\n    md5:md5,\n    chmod:chmod,\n    getFiles:getFiles,\n    escapeHtml:escapeHtml,\n    datetime:datetime,\n    getDateTime:getDateTime,\n    randomString:randomString\n}\n```\n\n#### 数据库操作（mysql）\n\n简单的数据库查询，没有封装sql（懒）\n\n```js\nvar mysql = require('mysql');\nvar Promise = require('bluebird');\nvar dbConfig = Config.db;\n\nvar pool  = mysql.createPool(dbConfig);\n\n//使用连接池\nlet query = sql => {\n  return new Promise((resolve,reject) => {\n    pool.getConnection((err, connection) => {\n      connection.query(sql, function(err, result) {\n        return err ? reject(err) : resolve(result);\n      });\n      connection.release();\n    });\n  });\n};\n\nlet insert = (table,data) => {\n  return new Promise((resolve,reject) => {\n    pool.getConnection((err, connection) => {\n      connection.query('INSERT INTO {table} SET ?', data, function(err, result) {\n        return err ? reject(err) : resolve(result.insertId);\n      });\n      connection.release();\n    });\n  });\n};\n\n\n//普通连接\nlet queryTest = sql => {\n  var connection = mysql.createConnection(dbConfig);\n  return new Promise((resolve,reject) => {\n    connection.connect();\n    connection.query(sql, (err, rows, fields) => {\n      return err ? reject(err) : resolve(rows);\n    });\n    connection.end();\n  });\n};\n\n\nmodule.exports = {\n  query:query,\n  queryTest:queryTest\n};\n```\n\n数据库连接测试代码 (使用了上面定义的run方法)\n\n```js\nrouter.get('/', function(req, res, next) {\n  // 数据库操作测试\n  F.run(function* (){\n       var result = yield Db.query('SELECT * FROM fruitscities limit 5');\n       var result = yield Db.query('SELECT * FROM fruitscities limit 5');\n       req.session.admin = '111111111';\n       console.log(req.session.admin);\n       res.render('index', { title: 'Express```'});\n  },next)\n});\n\nrouter.get('/test', function(req, res, next) {\n  console.log(req.baseUrl);\n  console.log(req.route);\n  console.log(req.path);\n  // 数据库操作测试\n  F.run(function* (){\n       var result = yield Db.query('SELECT * FROM fruitscities limit 5');\n       var result = yield Db.query('SELECT * FROM fruitscities limit 5');\n       console.log(req.session.admin);\n  },next)\n});\n```\n\n#### 使用nunjucks模板引擎\n\n```js\n//模板引擎\nvar nunjucks = require('nunjucks');\n// 模板引擎设置\nvar env = new nunjucks.configure(path.join(__dirname, 'views'), { // 设置模板文件的目录，为views\n  autoescape: true,\n  watch: true,\n  express: app\n});\napp.set('view engine', 'html');\n```\n\n#### 使用nunjucks模板标签（用于cms，文章，新闻展示等）\n\n```js\n//标签测试\nvar tags = require(path.resolve(Root, './common/tags'));\n\n//绑定标签\nenv.addExtension(\"tagtest\",new tags.tagtest());\ncommon/tags.js中的代码\n\nvar tags;\nvar nunjucks = require('nunjucks');\ntags = {\n  tagtest:function(){\n    //tag标签测试\n    this.tags = ['tagtest'];\n    this.parse = function(parser, nodes, lexer) {\n      let tok = parser.nextToken();\n      var args = parser.parseSignature(null, true);\n      parser.advanceAfterBlockEnd(tok.value);\n      let body = parser.parseUntilBlocks('endtagtest');// 结束标签\n      parser.advanceAfterBlockEnd();\n      //return new nodes.CallExtension(this, 'run', args);\n      return new nodes.CallExtensionAsync(this, 'run', args,[body]); //异步调用\n    };\n    this.run = function(context,args,body,callback){\n      console.log(JSON.stringify(args)); //前台返回参数\n      var data = [{\n        id: 1,\n        city: '北京',\n        parent: 0,\n        spelling: 'BeiJing',\n        abbr: 'BJ',\n        short: 'B' },\n        {\n          id: 2,\n          city: '上海',\n          parent: 0,\n          spelling: 'ShangHai',\n          abbr: 'SH',\n          short: 'S' },\n        {\n          id: 3,\n          city: '天津',\n          parent: 0,\n          spelling: 'TianJin',\n          abbr: 'TJ',\n          short: 'T' },\n        {\n          id: 4,\n          city: '重庆',\n          parent: 0,\n          spelling: 'ZhongQing',\n          abbr: 'ZQ',\n          short: 'Z' },\n        {\n          id: 5,\n          city: '黑龙江',\n          parent: 0,\n          spelling: 'HeiLongJiang',\n          abbr: 'HLJ',\n          short: 'H' } ];\n      context.ctx['list'] = data;  //返回参数\n      let result = new nunjucks.runtime.SafeString(body());\n      return callback(null,result);\n    }\n  }\n};\n\nmodule.exports = tags;\n```\n\n#### 页面中使用\n\n```js\n{% tagtest list=\"key1=1,key2=2,key3=3,key4=4\" %}\n\n  {% for val in list %}\n  \n\n    {{ val.id }}:{{ val.city}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n\n\n{% tagtest key1=1,key2=2,key3=3,key4=4 %}\n\n  {% for val in list %}\n  \n\n    {{ val.id }}:{{ val.city}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n```\n\n#### 使用log4js进行日志记录\n\n记录access日志\n\n```js\napp.use(log4js.connectLogger(log4js.getLogger('log_access'), {level:'INFO'}));\n```\n\n配置文件 (配置可以根据需求修改)\n\n```js\nmodule.exports = {\n  db: {\n    host     : '',\n    user     : '',\n    password : '',\n    database : ''\n  },\n  cookieSession: {\n    name: 'session_uuice',\n    keys: ['key1', 'key2'],\n    secret: 'ksjf493248kjkj'\n  },\n  log4js :{\n    \"appenders\":\n        [\n            {\n                \"type\":\"console\",\n                \"category\":\"console\"\n            },\n            {\n                \"category\":\"log_file\",\n                \"type\": \"file\",\n                \"filename\": \"./logs/log_file/file.log\",\n                \"maxLogSize\": 104800,\n                \"backups\": 100\n            },\n            {\n                \"category\":\"log_date\",\n                \"type\": \"dateFile\",\n                \"filename\": \"./logs/log_date/date\",\n                \"alwaysIncludePattern\": true,\n                \"pattern\": \"-yyyy-MM-dd-hh.log\"\n\n            },\n            {\n                \"category\":\"log_access\",\n                \"type\": \"dateFile\",\n                \"filename\": \"./logs/log_access/date\",\n                \"alwaysIncludePattern\": true,\n                \"pattern\": \"-yyyy-MM-dd-hh.log\"\n\n            }\n        ],\n      \"replaceConsole\": true,\n      \"levels\":\n      {\n          \"log_file\":\"ALL\",\n          \"console\":\"ALL\",\n          \"log_date\":\"ALL\"\n      }\n  }\n};\n```\n其他记录日志代码\n\n```js\nconsole.log(\"log_start start!\");\n\nvar LogFile = log4js.getLogger('log_file');\n\nLogFile.trace('This is a Log4js-Test');\nLogFile.debug('We Write Logs with log4js');\nLogFile.info('You can find logs-files in the log-dir');\nLogFile.warn('log-dir is a configuration-item in the log4js.json');\nLogFile.error('In This Test log-dir is : \\'./logs/log_test/\\'');\n\nconsole.log(\"log_start end!\");\n\n\n\nvar log_date = log4js.getLogger('log_date');\n\nlog_date.trace('This is a Log4js-Test');\nlog_date.debug('We Write Logs with log4js');\nlog_date.info('You can find logs-files in the log-dir');\nlog_date.warn('log-dir is a configuration-item in the log4js.json');\nlog_date.error('In This Test log-dir is : \\'./logs/log_test/\\'');\n\nconsole.log(\"log_date end!\");\n```\n\n#### socket通讯\n\n使用socket.io\n在项目bin/www中添加\n\n```js\n //添加socket.io支持\n var io = require('socket.io')(server);\n io.on('connection', function(socket){\n   Socket(socket,io); //这里的Socket，就是app.js定义的全局变量\n });\n```\n\n在app.js中添加事件逻辑\n\n```js\n//socket事件方法\nglobal.Socket = require(path.resolve(Root, './socket/socket'));\n```\n\n错误处理\nPromise中的报错\n\n```js\nlet run = (fn,next) =>{\n  co(fn).catch((err) => {\n    next(err);\n  });\n};\n```\n\n其他报错\n\n```js\n// 将404交给错误处理中间件\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// 错误处理\n\n//开发环境报错，显示错误堆栈\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    if(req.xhr){\n      res.json({\n        status: err.status,\n        message: err.message,\n        error: err.stack\n      });\n    }else{\n      res.render('error', {\n        status: err.status,\n        message: err.message,\n        error: err\n      });\n    }\n\n  });\n}\n\n//生产环境报错，不展示错误堆栈\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  if(req.xhr){\n    res.json({\n      status: err.status,\n      message: err.message,\n      error: {}\n    });\n  }else{\n    res.render('error', {\n      status: err.status,\n      message: err.message,\n      error: {}\n    });\n  }\n});\n```\n#### 其他\n\n待补充",
      "mdContent": "<p>Node.js 7.0发布之前，写一篇关于express的文章</p>\n<h4 id=\"toc-05102a\">项目创建</h4>\n<p>使用express-generator</p>\n<ul>\n<li>使用npm install express-generator -g</li>\n</ul>\n<h4 id=\"toc-000d55\">代码修改自动重启</h4>\n<p>使用nodemon</p>\n<ul>\n<li>nodemon ./bin/www</li>\n</ul>\n<h4 id=\"toc-188768\">全局设置</h4>\n<!-- more -->\n\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//加载配置项</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Config</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./config/config&#x27;</span>));\n<span class=\"hljs-comment\">//通用方法(设置为全局对象，方便调用)</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">F</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./common/funcs&#x27;</span>));\n<span class=\"hljs-comment\">//socket事件方法</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Socket</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./socket/socket&#x27;</span>));\n<span class=\"hljs-comment\">//加载所有的数据库model</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">M</span> = {};\n<span class=\"hljs-comment\">//model存储路径 （暂时不支持二级目录）</span>\n<span class=\"hljs-keyword\">var</span> modelsPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;models&#x27;</span>);\nfs.<span class=\"hljs-title function_\">readdirSync</span>(modelsPath).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-title function_\">extname</span>(name) !== <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    name = path.<span class=\"hljs-title function_\">basename</span>(name, <span class=\"hljs-string\">&#x27;.js&#x27;</span>);\n    M[name] = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(modelsPath,name));\n  }\n});\n</code></pre>\n<p>使用co、Promise（bluebird）进行异步处理</p>\n<p>定义通用方法run实行Promise,并抛出错误</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn,next</span>) =&gt;{\n  <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">next</span>(err);\n  });\n};\n</code></pre>\n<h4 id=\"toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">run</span>:run,\n    <span class=\"hljs-attr\">promisify</span>:promisify,\n    <span class=\"hljs-attr\">camelCase</span>:camelCase,\n    <span class=\"hljs-attr\">defer</span>:defer,\n    <span class=\"hljs-title class_\">Class</span>:<span class=\"hljs-title class_\">Class</span>,\n    <span class=\"hljs-attr\">extend</span>:extend,\n    <span class=\"hljs-attr\">isClass</span>:isClass,\n    <span class=\"hljs-attr\">isBoolean</span>:isBoolean,\n    <span class=\"hljs-attr\">isNumber</span>:isNumber,\n    <span class=\"hljs-attr\">isObject</span>:isObject,\n    <span class=\"hljs-attr\">isString</span>:isString,\n    <span class=\"hljs-attr\">isArray</span>:isArray,\n    <span class=\"hljs-attr\">isFunction</span>:isFunction,\n    <span class=\"hljs-attr\">isDate</span>: util.<span class=\"hljs-property\">isDate</span>,\n    <span class=\"hljs-attr\">isRegExp</span>: util.<span class=\"hljs-property\">isRegExp</span>,\n    <span class=\"hljs-attr\">isError</span>: util.<span class=\"hljs-property\">isError</span>,\n    <span class=\"hljs-attr\">isIP</span>: net.<span class=\"hljs-property\">isIP</span>,\n    <span class=\"hljs-attr\">isIP4</span>: net.<span class=\"hljs-property\">isIPv4</span>,\n    <span class=\"hljs-attr\">isIP6</span>: net.<span class=\"hljs-property\">isIPv6</span>,\n    <span class=\"hljs-attr\">isFile</span>:isFile,\n    <span class=\"hljs-attr\">isFileAsync</span>:isFileAsync,\n    <span class=\"hljs-attr\">isDir</span>:isDir,\n    <span class=\"hljs-attr\">isDirAsync</span>:isDirAsync,\n    <span class=\"hljs-attr\">isNumberString</span>:isNumberString,\n    <span class=\"hljs-attr\">isPromise</span>:isPromise,\n    <span class=\"hljs-attr\">isWritable</span>:isWritable,\n    <span class=\"hljs-attr\">isBuffer</span>:isBuffer,\n    <span class=\"hljs-attr\">isTrueEmpty</span>:isTrueEmpty,\n    <span class=\"hljs-attr\">isEmpty</span>:isEmpty,\n    <span class=\"hljs-attr\">clone</span>:clone,\n    <span class=\"hljs-attr\">mkdir</span>:mkdir,\n    <span class=\"hljs-attr\">rmdir</span>:rmdir,\n    <span class=\"hljs-attr\">md5</span>:md5,\n    <span class=\"hljs-attr\">chmod</span>:chmod,\n    <span class=\"hljs-attr\">getFiles</span>:getFiles,\n    <span class=\"hljs-attr\">escapeHtml</span>:escapeHtml,\n    <span class=\"hljs-attr\">datetime</span>:datetime,\n    <span class=\"hljs-attr\">getDateTime</span>:getDateTime,\n    <span class=\"hljs-attr\">randomString</span>:randomString\n}\n</code></pre>\n<h4 id=\"toc-415823\">数据库操作（mysql）</h4>\n<p>简单的数据库查询，没有封装sql（懒）</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mysql&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Promise</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;bluebird&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> dbConfig = <span class=\"hljs-title class_\">Config</span>.<span class=\"hljs-property\">db</span>;\n\n<span class=\"hljs-keyword\">var</span> pool  = mysql.<span class=\"hljs-title function_\">createPool</span>(dbConfig);\n\n<span class=\"hljs-comment\">//使用连接池</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">query</span> = sql =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n    pool.<span class=\"hljs-title function_\">getConnection</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, connection</span>) =&gt;</span> {\n      connection.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>) {\n        <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(result);\n      });\n      connection.<span class=\"hljs-title function_\">release</span>();\n    });\n  });\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">insert</span> = (<span class=\"hljs-params\">table,data</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n    pool.<span class=\"hljs-title function_\">getConnection</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, connection</span>) =&gt;</span> {\n      connection.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;INSERT INTO {table} SET ?&#x27;</span>, data, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>) {\n        <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(result.<span class=\"hljs-property\">insertId</span>);\n      });\n      connection.<span class=\"hljs-title function_\">release</span>();\n    });\n  });\n};\n\n\n<span class=\"hljs-comment\">//普通连接</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">queryTest</span> = sql =&gt; {\n  <span class=\"hljs-keyword\">var</span> connection = mysql.<span class=\"hljs-title function_\">createConnection</span>(dbConfig);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n    connection.<span class=\"hljs-title function_\">connect</span>();\n    connection.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, rows, fields</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(rows);\n    });\n    connection.<span class=\"hljs-title function_\">end</span>();\n  });\n};\n\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">query</span>:query,\n  <span class=\"hljs-attr\">queryTest</span>:queryTest\n};\n</code></pre>\n<p>数据库连接测试代码 (使用了上面定义的run方法)</p>\n<pre><code class=\"hljs lang-js\">router.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-comment\">// 数据库操作测试</span>\n  F.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-keyword\">function</span>* (){\n       <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>);\n       <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>);\n       req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span> = <span class=\"hljs-string\">&#x27;111111111&#x27;</span>;\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span>);\n       res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;index&#x27;</span>, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Express```&#x27;</span>});\n  },next)\n});\n\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/test&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">baseUrl</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">route</span>);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">path</span>);\n  <span class=\"hljs-comment\">// 数据库操作测试</span>\n  F.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-keyword\">function</span>* (){\n       <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>);\n       <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>);\n       <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span>);\n  },next)\n});\n</code></pre>\n<h4 id=\"toc-5bd6e3\">使用nunjucks模板引擎</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//模板引擎</span>\n<span class=\"hljs-keyword\">var</span> nunjucks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;nunjucks&#x27;</span>);\n<span class=\"hljs-comment\">// 模板引擎设置</span>\n<span class=\"hljs-keyword\">var</span> env = <span class=\"hljs-keyword\">new</span> nunjucks.<span class=\"hljs-title function_\">configure</span>(path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;views&#x27;</span>), { <span class=\"hljs-comment\">// 设置模板文件的目录，为views</span>\n  <span class=\"hljs-attr\">autoescape</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">express</span>: app\n});\napp.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;view engine&#x27;</span>, <span class=\"hljs-string\">&#x27;html&#x27;</span>);\n</code></pre>\n<h4 id=\"toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//标签测试</span>\n<span class=\"hljs-keyword\">var</span> tags = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./common/tags&#x27;</span>));\n\n<span class=\"hljs-comment\">//绑定标签</span>\nenv.<span class=\"hljs-title function_\">addExtension</span>(<span class=\"hljs-string\">&quot;tagtest&quot;</span>,<span class=\"hljs-keyword\">new</span> tags.<span class=\"hljs-title function_\">tagtest</span>());\ncommon/tags.<span class=\"hljs-property\">js</span>中的代码\n\n<span class=\"hljs-keyword\">var</span> tags;\n<span class=\"hljs-keyword\">var</span> nunjucks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;nunjucks&#x27;</span>);\ntags = {\n  <span class=\"hljs-attr\">tagtest</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-comment\">//tag标签测试</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tags</span> = [<span class=\"hljs-string\">&#x27;tagtest&#x27;</span>];\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parse</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">parser, nodes, lexer</span>) {\n      <span class=\"hljs-keyword\">let</span> tok = parser.<span class=\"hljs-title function_\">nextToken</span>();\n      <span class=\"hljs-keyword\">var</span> args = parser.<span class=\"hljs-title function_\">parseSignature</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>);\n      parser.<span class=\"hljs-title function_\">advanceAfterBlockEnd</span>(tok.<span class=\"hljs-property\">value</span>);\n      <span class=\"hljs-keyword\">let</span> body = parser.<span class=\"hljs-title function_\">parseUntilBlocks</span>(<span class=\"hljs-string\">&#x27;endtagtest&#x27;</span>);<span class=\"hljs-comment\">// 结束标签</span>\n      parser.<span class=\"hljs-title function_\">advanceAfterBlockEnd</span>();\n      <span class=\"hljs-comment\">//return new nodes.CallExtension(this, &#x27;run&#x27;, args);</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> nodes.<span class=\"hljs-title class_\">CallExtensionAsync</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;run&#x27;</span>, args,[body]); <span class=\"hljs-comment\">//异步调用</span>\n    };\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">run</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context,args,body,callback</span>){\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(args)); <span class=\"hljs-comment\">//前台返回参数</span>\n      <span class=\"hljs-keyword\">var</span> data = [{\n        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;北京&#x27;</span>,\n        <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;BeiJing&#x27;</span>,\n        <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;BJ&#x27;</span>,\n        <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span> },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;上海&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;ShangHai&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;SH&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;S&#x27;</span> },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;天津&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;TianJin&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;TJ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;T&#x27;</span> },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;重庆&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;ZhongQing&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;ZQ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;Z&#x27;</span> },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;黑龙江&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;HeiLongJiang&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;HLJ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;H&#x27;</span> } ];\n      context.<span class=\"hljs-property\">ctx</span>[<span class=\"hljs-string\">&#x27;list&#x27;</span>] = data;  <span class=\"hljs-comment\">//返回参数</span>\n      <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">new</span> nunjucks.<span class=\"hljs-property\">runtime</span>.<span class=\"hljs-title class_\">SafeString</span>(<span class=\"hljs-title function_\">body</span>());\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>,result);\n    }\n  }\n};\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = tags;\n</code></pre>\n<h4 id=\"toc-ddaedc\">页面中使用</h4>\n<pre><code class=\"hljs lang-js\">{% tagtest list=<span class=\"hljs-string\">&quot;key1=1,key2=2,key3=3,key4=4&quot;</span> %}\n\n  {% <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> list %}\n  \n\n    {{ val.<span class=\"hljs-property\">id</span> }}:{{ val.<span class=\"hljs-property\">city</span>}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n\n\n{% tagtest key1=<span class=\"hljs-number\">1</span>,key2=<span class=\"hljs-number\">2</span>,key3=<span class=\"hljs-number\">3</span>,key4=<span class=\"hljs-number\">4</span> %}\n\n  {% <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> list %}\n  \n\n    {{ val.<span class=\"hljs-property\">id</span> }}:{{ val.<span class=\"hljs-property\">city</span>}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n</code></pre>\n<h4 id=\"toc-eb85c0\">使用log4js进行日志记录</h4>\n<p>记录access日志</p>\n<pre><code class=\"hljs lang-js\">app.<span class=\"hljs-title function_\">use</span>(log4js.<span class=\"hljs-title function_\">connectLogger</span>(log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_access&#x27;</span>), {<span class=\"hljs-attr\">level</span>:<span class=\"hljs-string\">&#x27;INFO&#x27;</span>}));\n</code></pre>\n<p>配置文件 (配置可以根据需求修改)</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">db</span>: {\n    host     : <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    user     : <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    password : <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    database : <span class=\"hljs-string\">&#x27;&#x27;</span>\n  },\n  <span class=\"hljs-attr\">cookieSession</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;session_uuice&#x27;</span>,\n    <span class=\"hljs-attr\">keys</span>: [<span class=\"hljs-string\">&#x27;key1&#x27;</span>, <span class=\"hljs-string\">&#x27;key2&#x27;</span>],\n    <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">&#x27;ksjf493248kjkj&#x27;</span>\n  },\n  log4js :{\n    <span class=\"hljs-string\">&quot;appenders&quot;</span>:\n        [\n            {\n                <span class=\"hljs-string\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;console&quot;</span>,\n                <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;console&quot;</span>\n            },\n            {\n                <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;log_file&quot;</span>,\n                <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;file&quot;</span>,\n                <span class=\"hljs-string\">&quot;filename&quot;</span>: <span class=\"hljs-string\">&quot;./logs/log_file/file.log&quot;</span>,\n                <span class=\"hljs-string\">&quot;maxLogSize&quot;</span>: <span class=\"hljs-number\">104800</span>,\n                <span class=\"hljs-string\">&quot;backups&quot;</span>: <span class=\"hljs-number\">100</span>\n            },\n            {\n                <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;log_date&quot;</span>,\n                <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;dateFile&quot;</span>,\n                <span class=\"hljs-string\">&quot;filename&quot;</span>: <span class=\"hljs-string\">&quot;./logs/log_date/date&quot;</span>,\n                <span class=\"hljs-string\">&quot;alwaysIncludePattern&quot;</span>: <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">&quot;pattern&quot;</span>: <span class=\"hljs-string\">&quot;-yyyy-MM-dd-hh.log&quot;</span>\n\n            },\n            {\n                <span class=\"hljs-string\">&quot;category&quot;</span>:<span class=\"hljs-string\">&quot;log_access&quot;</span>,\n                <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;dateFile&quot;</span>,\n                <span class=\"hljs-string\">&quot;filename&quot;</span>: <span class=\"hljs-string\">&quot;./logs/log_access/date&quot;</span>,\n                <span class=\"hljs-string\">&quot;alwaysIncludePattern&quot;</span>: <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">&quot;pattern&quot;</span>: <span class=\"hljs-string\">&quot;-yyyy-MM-dd-hh.log&quot;</span>\n\n            }\n        ],\n      <span class=\"hljs-string\">&quot;replaceConsole&quot;</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-string\">&quot;levels&quot;</span>:\n      {\n          <span class=\"hljs-string\">&quot;log_file&quot;</span>:<span class=\"hljs-string\">&quot;ALL&quot;</span>,\n          <span class=\"hljs-string\">&quot;console&quot;</span>:<span class=\"hljs-string\">&quot;ALL&quot;</span>,\n          <span class=\"hljs-string\">&quot;log_date&quot;</span>:<span class=\"hljs-string\">&quot;ALL&quot;</span>\n      }\n  }\n};\n</code></pre>\n<p>其他记录日志代码</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;log_start start!&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">LogFile</span> = log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_file&#x27;</span>);\n\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">trace</span>(<span class=\"hljs-string\">&#x27;This is a Log4js-Test&#x27;</span>);\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&#x27;We Write Logs with log4js&#x27;</span>);\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&#x27;You can find logs-files in the log-dir&#x27;</span>);\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&#x27;log-dir is a configuration-item in the log4js.json&#x27;</span>);\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;In This Test log-dir is : \\&#x27;./logs/log_test/\\&#x27;&#x27;</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;log_start end!&quot;</span>);\n\n\n\n<span class=\"hljs-keyword\">var</span> log_date = log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_date&#x27;</span>);\n\nlog_date.<span class=\"hljs-title function_\">trace</span>(<span class=\"hljs-string\">&#x27;This is a Log4js-Test&#x27;</span>);\nlog_date.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&#x27;We Write Logs with log4js&#x27;</span>);\nlog_date.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&#x27;You can find logs-files in the log-dir&#x27;</span>);\nlog_date.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&#x27;log-dir is a configuration-item in the log4js.json&#x27;</span>);\nlog_date.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;In This Test log-dir is : \\&#x27;./logs/log_test/\\&#x27;&#x27;</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;log_date end!&quot;</span>);\n</code></pre>\n<h4 id=\"toc-4a6b89\">socket通讯</h4>\n<p>使用socket.io\n在项目bin/www中添加</p>\n<pre><code class=\"hljs lang-js\"> <span class=\"hljs-comment\">//添加socket.io支持</span>\n <span class=\"hljs-keyword\">var</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;socket.io&#x27;</span>)(server);\n io.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">socket</span>){\n   <span class=\"hljs-title class_\">Socket</span>(socket,io); <span class=\"hljs-comment\">//这里的Socket，就是app.js定义的全局变量</span>\n });\n</code></pre>\n<p>在app.js中添加事件逻辑</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//socket事件方法</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Socket</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./socket/socket&#x27;</span>));\n</code></pre>\n<p>错误处理\nPromise中的报错</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn,next</span>) =&gt;{\n  <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">next</span>(err);\n  });\n};\n</code></pre>\n<p>其他报错</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">// 将404交给错误处理中间件</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-keyword\">var</span> err = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Not Found&#x27;</span>);\n  err.<span class=\"hljs-property\">status</span> = <span class=\"hljs-number\">404</span>;\n  <span class=\"hljs-title function_\">next</span>(err);\n});\n\n<span class=\"hljs-comment\">// 错误处理</span>\n\n<span class=\"hljs-comment\">//开发环境报错，显示错误堆栈</span>\n<span class=\"hljs-keyword\">if</span> (app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;env&#x27;</span>) === <span class=\"hljs-string\">&#x27;development&#x27;</span>) {\n  app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, req, res, next</span>) {\n    res.<span class=\"hljs-title function_\">status</span>(err.<span class=\"hljs-property\">status</span> || <span class=\"hljs-number\">500</span>);\n    <span class=\"hljs-keyword\">if</span>(req.<span class=\"hljs-property\">xhr</span>){\n      res.<span class=\"hljs-title function_\">json</span>({\n        <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n        <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n        <span class=\"hljs-attr\">error</span>: err.<span class=\"hljs-property\">stack</span>\n      });\n    }<span class=\"hljs-keyword\">else</span>{\n      res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, {\n        <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n        <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n        <span class=\"hljs-attr\">error</span>: err\n      });\n    }\n\n  });\n}\n\n<span class=\"hljs-comment\">//生产环境报错，不展示错误堆栈</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, req, res, next</span>) {\n  res.<span class=\"hljs-title function_\">status</span>(err.<span class=\"hljs-property\">status</span> || <span class=\"hljs-number\">500</span>);\n  <span class=\"hljs-keyword\">if</span>(req.<span class=\"hljs-property\">xhr</span>){\n    res.<span class=\"hljs-title function_\">json</span>({\n      <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n      <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n      <span class=\"hljs-attr\">error</span>: {}\n    });\n  }<span class=\"hljs-keyword\">else</span>{\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, {\n      <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n      <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n      <span class=\"hljs-attr\">error</span>: {}\n    });\n  }\n});\n</code></pre>\n<h4 id=\"toc-0d98c7\">其他</h4>\n<p>待补充</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-05102a\">项目创建</a></li>\n<li><a href=\"#toc-000d55\">代码修改自动重启</a></li>\n<li><a href=\"#toc-188768\">全局设置</a></li>\n<li><a href=\"#toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</a></li>\n<li><a href=\"#toc-415823\">数据库操作（mysql）</a></li>\n<li><a href=\"#toc-5bd6e3\">使用nunjucks模板引擎</a></li>\n<li><a href=\"#toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</a></li>\n<li><a href=\"#toc-ddaedc\">页面中使用</a></li>\n<li><a href=\"#toc-eb85c0\">使用log4js进行日志记录</a></li>\n<li><a href=\"#toc-4a6b89\">socket通讯</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n",
      "url": "express-shi-jian",
      "created_timestamp": 1493499150000,
      "updated_timestamp": 1493499150000,
      "symbolsCount": 29081
    },
    {
      "id": "1ef3b5dd-e4d9-6b40-b309-a07bac6c751a",
      "title": "Yarn &amp;&amp; npm设置镜像源",
      "alias": "",
      "cover": "",
      "created_time": "2020-04-17T22:35:21.000Z",
      "updated_time": "2020-04-17T22:35:21.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "excerpt": "安装yarnnpm i -g yarnyarnyarn config set registry https://registry.npm.taobao.org --global  &amp;&amp; \\yarn config set disturl https://npm.taobao.org/d",
      "published": true,
      "content": "\n### 安装yarn\n    npm i -g yarn\n### yarn\n    yarn config set registry https://registry.npm.taobao.org --global  && \\\n    yarn config set disturl https://npm.taobao.org/dist --global && \\\n    yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass --global  && \\\n    yarn config set electron_mirror https://npm.taobao.org/mirrors/electron/ --global  && \\\n    yarn config set puppeteer_download_host https://npm.taobao.org/mirrors --global  && \\\n    yarn config set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver --global  && \\\n    yarn config set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver --global  && \\\n    yarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs --global  && \\\n    yarn config set selenium_cdnurl https://npm.taobao.org/mirrors/selenium --global  && \\\n    yarn config set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector --global\n### npm\n    npm set registry https://registry.npm.taobao.org && \\\n    npm set disturl https://npm.taobao.org/dist && \\\n    npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass && \\\n    npm set electron_mirror https://npm.taobao.org/mirrors/electron && \\\n    npm set puppeteer_download_host https://npm.taobao.org/mirrors && \\\n    npm set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver && \\\n    npm set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver && \\\n    npm set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs && \\\n    npm set selenium_cdnurl https://npm.taobao.org/mirrors/selenium && \\\n    npm set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector && \\\n    npm cache clean --force",
      "mdContent": "<h3 id=\"toc-5a2a5b\">安装yarn</h3>\n<pre><code class=\"hljs lang-coffeescript\"><span class=\"hljs-built_in\">npm</span> i -g yarn\n</code></pre>\n<h3 id=\"yarn\">yarn</h3>\n<pre><code class=\"hljs lang-jboss-cli\">yarn config <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> <span class=\"hljs-params\">--global</span> &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron/</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> <span class=\"hljs-params\">--global</span>\n</code></pre>\n<h3 id=\"npm\">npm</h3>\n<pre><code class=\"hljs lang-jboss-cli\">npm <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> &amp;&amp; \\\nnpm cache clean <span class=\"hljs-params\">--force</span>\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-5a2a5b\">安装yarn</a></li>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#npm\">npm</a></li>\n</ul>\n",
      "url": "yarn-ampamp-npm-she-zhi-jing-xiang-yuan",
      "created_timestamp": 1587162921000,
      "updated_timestamp": 1587162921000,
      "symbolsCount": 3489
    },
    {
      "id": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "title": "Linux npm -g 全局安装的命令找不到",
      "alias": "",
      "cover": "",
      "created_time": "2022-08-26T10:19:04.000Z",
      "updated_time": "2022-08-26T10:19:04.000Z",
      "categories": [
        "linux",
        "nodejs"
      ],
      "tags": [],
      "excerpt": "在Linux 上通过npm -g全局安装 pm2、yarn、pnpm 等命令找不到的解决方法修改 ~/.bash_profile vim ~/.bash_profile新增环境变量export PATH=$(npm prefix -g)/bin:$PATH在宝塔面板中export PATH=$PAT",
      "published": true,
      "content": "\n在Linux 上通过`npm -g`全局安装 pm2、yarn、pnpm 等命令找不到的解决方法\n\n<!-- more -->\n\n## 修改 ~/.bash_profile\n\n```\n vim ~/.bash_profile\n```\n\n##  新增环境变量\n\n```\nexport PATH=$(npm prefix -g)/bin:$PATH\n```\n\n### 使用宝塔面板的服务器\n\n```\nexport PATH=$PATH://usr/lib/node_modules/corepack/shims:$PATH\nexport PATH=$(npm prefix -g)/bin:$PATH\n```\n\n## 生效\n\n```\nsource ~/.bash_profile\n```",
      "mdContent": "<p>在Linux 上通过<code>npm -g</code>全局安装 pm2、yarn、pnpm 等命令找不到的解决方法</p>\n<!-- more -->\n\n<h2 id=\"toc-58e525\">修改 ~/.bash_profile</h2>\n<pre><code class=\"hljs lang-bash\"> vim ~/.bash_profile\n</code></pre>\n<h2 id=\"toc-b6dff4\">新增环境变量</h2>\n<pre><code class=\"hljs lang-routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=$(npm<span class=\"hljs-built_in\"> prefix </span>-g)/bin:<span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h3 id=\"toc-de21ab\">使用宝塔面板的服务器</h3>\n<pre><code class=\"hljs lang-elixir\">export <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$PATH</span><span class=\"hljs-symbol\">://usr/lib/node_modules/corepack/shims</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-variable\">$PATH</span>\nexport <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$(</span>npm prefix -g)/<span class=\"hljs-symbol\">bin:</span><span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h2 id=\"toc-9a72cf\">生效</h2>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">source</span> ~/.bash_profile\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-58e525\">修改 ~/.bash_profile</a></li>\n<li><a href=\"#toc-b6dff4\">新增环境变量</a><ul>\n<li><a href=\"#toc-de21ab\">使用宝塔面板的服务器</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-9a72cf\">生效</a></li>\n</ul>\n",
      "url": "linux-npm-g-quan-ju-an-zhuang-de-ming-ling-zhao-bu-dao",
      "created_timestamp": 1661509144000,
      "updated_timestamp": 1661509144000,
      "symbolsCount": 1036
    },
    {
      "id": "1ef3b5d3-d10c-6040-8228-d52499675442",
      "title": "让浏览器兼容placeholder",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T21:00:51.000Z",
      "updated_time": "2017-04-29T21:00:51.000Z",
      "categories": [
        "html"
      ],
      "tags": [],
      "excerpt": "什么是placeholderplaceholder 属性提供可描述输入字段预期值的提示信息（hint）。该提示会在输入字段为空时显示，并会在字段获得焦点时消失。placeholder兼容性解决$(function(){    if(!placeholderSupport()){   // 判断浏览器",
      "published": true,
      "content": "\n#### 什么是placeholder\n\nplaceholder 属性提供可描述输入字段预期值的提示信息（hint）。\n该提示会在输入字段为空时显示，并会在字段获得焦点时消失。\n\n<!-- more -->\n\n#### placeholder兼容性解决\n\n```js\n$(function(){\n    if(!placeholderSupport()){   // 判断浏览器是否支持 placeholder\n        $('[placeholder]').focus(function() {\n            var input = $(this);\n            if (input.val() == input.attr('placeholder')) {\n                input.val('');\n                input.removeClass('placeholder');\n            }\n        }).blur(function() {\n            var input = $(this);\n            if (input.val() == '' || input.val() == input.attr('placeholder')) {\n                input.addClass('placeholder');\n                input.val(input.attr('placeholder'));\n            }\n        }).blur();\n    };\n})\nfunction placeholderSupport() {\n    return 'placeholder' in document.createElement('input');\n}\n```",
      "mdContent": "<h4 id=\"toc-04a6ee\">什么是placeholder</h4>\n<p>placeholder 属性提供可描述输入字段预期值的提示信息（hint）。\n该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p>\n<!-- more -->\n\n<h4 id=\"toc-9c8b5f\">placeholder兼容性解决</h4>\n<pre><code class=\"hljs lang-js\">$(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_\">placeholderSupport</span>()){   <span class=\"hljs-comment\">// 判断浏览器是否支持 placeholder</span>\n        $(<span class=\"hljs-string\">&#x27;[placeholder]&#x27;</span>).<span class=\"hljs-title function_\">focus</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-variable language_\">this</span>);\n            <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-title function_\">val</span>() == input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)) {\n                input.<span class=\"hljs-title function_\">val</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n                input.<span class=\"hljs-title function_\">removeClass</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>);\n            }\n        }).<span class=\"hljs-title function_\">blur</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-variable language_\">this</span>);\n            <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-title function_\">val</span>() == <span class=\"hljs-string\">&#x27;&#x27;</span> || input.<span class=\"hljs-title function_\">val</span>() == input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)) {\n                input.<span class=\"hljs-title function_\">addClass</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>);\n                input.<span class=\"hljs-title function_\">val</span>(input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>));\n            }\n        }).<span class=\"hljs-title function_\">blur</span>();\n    };\n})\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">placeholderSupport</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;placeholder&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>);\n}\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-04a6ee\">什么是placeholder</a></li>\n<li><a href=\"#toc-9c8b5f\">placeholder兼容性解决</a></li>\n</ul>\n",
      "url": "rang-liu-lan-qi-jian-rong-placeholder",
      "created_timestamp": 1493499651000,
      "updated_timestamp": 1493499651000,
      "symbolsCount": 2383
    },
    {
      "id": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "title": "浏览器指定内核访问",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T21:13:03.000Z",
      "updated_time": "2017-04-29T21:13:03.000Z",
      "categories": [
        "notes",
        "html"
      ],
      "tags": [],
      "excerpt": "360页面默认使用极速内核&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;页面默认使用ie兼容内核&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quo",
      "published": true,
      "content": "\n360页面默认使用极速内核\n```html\n<meta name=\"renderer\" content=\"webkit\">\n```\n页面默认使用ie兼容内核\n```html\n<meta name=\"renderer\" content=\"ie-comp\">\n```\n页面默认使用ie标准内核\n```html\n<meta name=\"renderer\" content=\"ie-stand\">\n\n<!-- more -->\n```",
      "mdContent": "<p>360页面默认使用极速内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span>&gt;</span>\n</code></pre>\n<p>页面默认使用ie兼容内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-comp&quot;</span>&gt;</span>\n</code></pre>\n<p>页面默认使用ie标准内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-stand&quot;</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- more --&gt;</span>\n</code></pre>\n",
      "toc": "",
      "url": "liu-lan-qi-zhi-ding-nei-he-fang-wen",
      "created_timestamp": 1493500383000,
      "updated_timestamp": 1493500383000,
      "symbolsCount": 984
    },
    {
      "id": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "title": "在Directive中获取组件DOM以及实例",
      "alias": "",
      "cover": "",
      "created_time": "2022-06-29T10:37:52.000Z",
      "updated_time": "2022-06-29T10:37:52.000Z",
      "categories": [
        "angular"
      ],
      "tags": [
        "angular",
        "directive"
      ],
      "excerpt": "在Directive中获取组件DOM以及实例",
      "published": true,
      "content": "\n### 获取DOM\n\n从 `@angular/core` 导入 `ElementRef`。`ElementRef` 的 `nativeElement `属性会提供对宿主 DOM 元素的直接访问权限。\n\n<!-- more -->\n```javascript\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appTest]'\n})\nexport class TestDirective {\n  constructor(\n    private el: ElementRef,\n  ) {\n    el.nativeElement.style.backgroundColor = 'yellow';\n  }\n}\n```\n\n### 获取组件实例\n\n> 组件已知的情况下，在自定义指令中获取组件实例\n\n直接在`constructor`中注入对应组件就可以\n\n如下面代码，通过 `this.com` 就可以调用组件的属性和事件\n\n```javascript\nimport { Directive } from '@angular/core';\nimport { comTest } from 'comTest';\n@Directive({\n  selector: '[appTest]'\n})\nexport class TestDirective {\n  constructor(\n    private com: comTest\n  ) {\n    console.log(this.com)\n  }\n}\n\n```",
      "mdContent": "<h3 id=\"toc-291011\">获取DOM</h3>\n<p>从 <code>@angular/core</code> 导入 <code>ElementRef</code>。<code>ElementRef</code> 的 <code>nativeElement </code>属性会提供对宿主 DOM 元素的直接访问权限。</p>\n<!-- more -->\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span>, <span class=\"hljs-title class_\">ElementRef</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[appTest]&#x27;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestDirective</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private el: ElementRef,\n  </span>) {\n    el.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">&#x27;yellow&#x27;</span>;\n  }\n}\n</code></pre>\n<h3 id=\"toc-fd30cc\">获取组件实例</h3>\n<blockquote>\n<p>组件已知的情况下，在自定义指令中获取组件实例</p>\n</blockquote>\n<p>直接在<code>constructor</code>中注入对应组件就可以</p>\n<p>如下面代码，通过 <code>this.com</code> 就可以调用组件的属性和事件</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { comTest } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;comTest&#x27;</span>;\n@<span class=\"hljs-title class_\">Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[appTest]&#x27;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestDirective</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private com: comTest\n  </span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">com</span>)\n  }\n}\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-291011\">获取DOM</a></li>\n<li><a href=\"#toc-fd30cc\">获取组件实例</a></li>\n</ul>\n",
      "url": "zai-directive-zhong-huo-qu-zu-jian-dom-yi-ji-shi-li",
      "created_timestamp": 1656499072000,
      "updated_timestamp": 1656499072000,
      "symbolsCount": 2129
    },
    {
      "id": "1ef3b5e1-c89c-6410-866c-c03a58533afa",
      "title": "通过视频url，获取缩略图",
      "alias": "",
      "cover": "",
      "created_time": "2019-06-20T14:22:06.000Z",
      "updated_time": "2019-06-20T14:22:06.000Z",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "excerpt": "通过视频url，获取缩略图  getVideoImg (url) {      let _this = this      // 创建视频对象      let video = document.createElement(&#39;video&#39;)      video.src = url      video.",
      "published": true,
      "content": "\n### 通过视频url，获取缩略图\n\n<!-- more -->\n\n```javascript\n    getVideoImg (url) {\n      let _this = this\n      // 创建视频对象\n      let video = document.createElement('video')\n      video.src = url\n      video.width = 503\n      video.height = 295\n      video.setAttribute('crossOrigin', 'Anonymous')\n      video.autoplay = true\n      // video.play() // 开始播放\n      video.addEventListener('loadeddata', () => {\n        setTimeout(() => {\n          let canvas = document.createElement('canvas')\n          canvas.width = 503\n          canvas.height = 503\n          let ctx = canvas.getContext('2d')\n          let imgHeight = video.videoHeight\n          let imgWidth = video.videoWidth\n          // canvas.width = imgWidth\n          // canvas.height = imgHeight\n          ctx.drawImage(video, 0, 0, imgWidth, imgHeight, 0, 0, video.width, video.width)\n          let img = canvas.toDataURL('image/png')\n          // img 为图片信息\n          _this.$set(_this.imgList, url, img)\n        }, 10)\n      }, false)\n    },\n```",
      "mdContent": "<h3 id=\"toc-44405d\">通过视频url，获取缩略图</h3>\n<!-- more -->\n\n<pre><code class=\"hljs lang-javascript\">    getVideoImg (url) {\n      <span class=\"hljs-keyword\">let</span> _this = <span class=\"hljs-variable language_\">this</span>\n      <span class=\"hljs-comment\">// 创建视频对象</span>\n      <span class=\"hljs-keyword\">let</span> video = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;video&#x27;</span>)\n      video.<span class=\"hljs-property\">src</span> = url\n      video.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">503</span>\n      video.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">295</span>\n      video.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;crossOrigin&#x27;</span>, <span class=\"hljs-string\">&#x27;Anonymous&#x27;</span>)\n      video.<span class=\"hljs-property\">autoplay</span> = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\">// video.play() // 开始播放</span>\n      video.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;loadeddata&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n          <span class=\"hljs-keyword\">let</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n          canvas.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">503</span>\n          canvas.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">503</span>\n          <span class=\"hljs-keyword\">let</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n          <span class=\"hljs-keyword\">let</span> imgHeight = video.<span class=\"hljs-property\">videoHeight</span>\n          <span class=\"hljs-keyword\">let</span> imgWidth = video.<span class=\"hljs-property\">videoWidth</span>\n          <span class=\"hljs-comment\">// canvas.width = imgWidth</span>\n          <span class=\"hljs-comment\">// canvas.height = imgHeight</span>\n          ctx.<span class=\"hljs-title function_\">drawImage</span>(video, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, imgWidth, imgHeight, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, video.<span class=\"hljs-property\">width</span>, video.<span class=\"hljs-property\">width</span>)\n          <span class=\"hljs-keyword\">let</span> img = canvas.<span class=\"hljs-title function_\">toDataURL</span>(<span class=\"hljs-string\">&#x27;image/png&#x27;</span>)\n          <span class=\"hljs-comment\">// img 为图片信息</span>\n          _this.$set(_this.<span class=\"hljs-property\">imgList</span>, url, img)\n        }, <span class=\"hljs-number\">10</span>)\n      }, <span class=\"hljs-literal\">false</span>)\n    },\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-44405d\">通过视频url，获取缩略图</a></li>\n</ul>\n",
      "url": "tong-guo-shi-pin-url-huo-qu-suo-lve-tu",
      "created_timestamp": 1561040526000,
      "updated_timestamp": 1561040526000,
      "symbolsCount": 2673
    },
    {
      "id": "1ef3b5e7-6a16-6cf0-bda8-629a71b2a5d5",
      "title": "“被污染”的 canvas",
      "alias": "",
      "cover": "",
      "created_time": "2018-04-18T21:23:37.000Z",
      "updated_time": "2018-04-18T21:23:37.000Z",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "excerpt": "什么是“被污染”的 canvas?尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 toBlob(), toDataURL() 或 getImageData() 方法，调用它们会抛出安全错误。这种机制可以避免未经许可拉取远程",
      "published": true,
      "content": "\n### 什么是“被污染”的 canvas?\n\n尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 `toBlob()`, `toDataURL()` 或 `getImageData()` 方法，调用它们会抛出安全错误。\n\n这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。\n\n<!-- more -->\n\n### 如何在canvas中使用跨越图片\n\nHTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域  元素的图像。\n\n设置 Access-Control-Allow-Origin 为 \"*\"\n\n### 例如通过url获取base64图片，代码如下\n\n```javascript\ngetImgBase64 (path, callback) {\n\tlet img = new Image()\n\timg.crossOrigin = 'anonymous'\n\timg.onload = function () {\n\t\tlet canvas = document.createElement('canvas')\n\t\tlet ctx = canvas.getContext('2d')\n\t\t// 获取图片宽高\n\t\tlet imgWidth = img.width\n\t\tlet imgHeight = img.height\n\t\t// 设置画布宽高与图片宽高相同\n\t\tcanvas.width = imgWidth\n\t\tcanvas.height = imgHeight\n\t\t// 绘制图片\n\t\tctx.drawImage(img, 0, 0, imgWidth, imgHeight)\n\n\t\t// 图片展示的 data URI\n\t\tlet dataUrl = canvas.toDataURL('image/jpeg')\n\t\tcallback(dataUrl)\n\t}\n\n\timg.onerror = function () {\n\t}\n\timg.src = path\n}\n```\n\n回调处理\n\n```javascript\ngetImgBase64(imgUrl, function (base64) {\n\tconsole.log(base64)\n})\n```",
      "mdContent": "<h3 id=\"toc-e5fb87\">什么是“被污染”的 canvas?</h3>\n<p>尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 方法，调用它们会抛出安全错误。</p>\n<p>这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。</p>\n<!-- more -->\n\n<h3 id=\"toc-020feb\">如何在canvas中使用跨越图片</h3>\n<p>HTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域  元素的图像。</p>\n<p>设置 Access-Control-Allow-Origin 为 &quot;*&quot;</p>\n<h3 id=\"toc-f4e9b1\">例如通过url获取base64图片，代码如下</h3>\n<pre><code class=\"hljs lang-javascript\">getImgBase64 (path, callback) {\n    <span class=\"hljs-keyword\">let</span> img = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>()\n    img.<span class=\"hljs-property\">crossOrigin</span> = <span class=\"hljs-string\">&#x27;anonymous&#x27;</span>\n    img.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">let</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n        <span class=\"hljs-keyword\">let</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n        <span class=\"hljs-comment\">// 获取图片宽高</span>\n        <span class=\"hljs-keyword\">let</span> imgWidth = img.<span class=\"hljs-property\">width</span>\n        <span class=\"hljs-keyword\">let</span> imgHeight = img.<span class=\"hljs-property\">height</span>\n        <span class=\"hljs-comment\">// 设置画布宽高与图片宽高相同</span>\n        canvas.<span class=\"hljs-property\">width</span> = imgWidth\n        canvas.<span class=\"hljs-property\">height</span> = imgHeight\n        <span class=\"hljs-comment\">// 绘制图片</span>\n        ctx.<span class=\"hljs-title function_\">drawImage</span>(img, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, imgWidth, imgHeight)\n\n        <span class=\"hljs-comment\">// 图片展示的 data URI</span>\n        <span class=\"hljs-keyword\">let</span> dataUrl = canvas.<span class=\"hljs-title function_\">toDataURL</span>(<span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>)\n        <span class=\"hljs-title function_\">callback</span>(dataUrl)\n    }\n\n    img.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    }\n    img.<span class=\"hljs-property\">src</span> = path\n}\n</code></pre>\n<p>回调处理</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-title function_\">getImgBase64</span>(imgUrl, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">base64</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(base64)\n})\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-e5fb87\">什么是“被污染”的 canvas?</a></li>\n<li><a href=\"#toc-020feb\">如何在canvas中使用跨越图片</a></li>\n<li><a href=\"#toc-f4e9b1\">例如通过url获取base64图片，代码如下</a></li>\n</ul>\n",
      "url": "-bei-wu-ran-de-canvas",
      "created_timestamp": 1524086617000,
      "updated_timestamp": 1524086617000,
      "symbolsCount": 2516
    },
    {
      "id": "1ef3b5b1-f8de-63b0-8838-ac54a1c91482",
      "title": "canvas实现圆形进度条",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T22:16:42.000Z",
      "updated_time": "2017-04-29T22:16:42.000Z",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "excerpt": "<h3 id=\"toc-450c58\">需要关注的几个点</h3>\n<ul>\n<li>弧形的圆角\n通过定义<code>ctx.lineCap = &#39;round&#39;;</code>来实现</li>\n<li>避免移动端canvas模糊，需要先计算<code>dpi</code>来进行适配，通过<code>getPixelRatio</code>方法。也可以直接计算为2倍或3倍（偷懒的做法）</li>\n<li>可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。</li>\n</ul>\n",
      "published": true,
      "content": "\n\n### 需要关注的几个点\n\n- 弧形的圆角\n  通过定义`ctx.lineCap = 'round';`来实现\n- 避免移动端canvas模糊，需要先计算`dpi`来进行适配，通过`getPixelRatio`方法。也可以直接计算为2倍或3倍（偷懒的做法）\n- 可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。\n\n<!-- more -->\n\n### 代码如下\n\nhtml\n\n```html\n<div class=\"canvas_box\">\n    <canvas id=\"canvas\" width=\"420\" height=\"420\" data-val=\"90\"></canvas>\n    <div id=\"canvas_text\">\n        <p class=\"s_title\">预期年化利率</p>\n        <p class=\"s_value\">\n            6<em>%</em>\n            <i>+9%</i>\n        </p>\n    </div>\n\n</div>\n```\n\ncss\n```css\n        .canvas_box {\n            position: relative;\n            display: block;\n            width: 210px;\n            height: 200px;\n            margin: 15px auto 0;\n            overflow: hidden\n        }\n\n        .canvas_box #canvas,.canvas_box #canvas_text {\n            width: 210px;\n            height: 210px;\n            margin: 0 auto;\n            position: relative;\n            display: block\n        }\n\n        .canvas_box #canvas_text {\n            top: -210px\n        }\n\n        .canvas_box #canvas_text .s_title {\n            margin-top: 65px;\n            color: #6b6d7c;\n            text-align: center;\n            font-size: 14px\n        }\n\n        .canvas_box #canvas_text .s_value {\n            margin-top: 20px;\n            text-align: center;\n            color: #ff5971;\n            font-size: 40px;\n            font-weight: 700;\n            position: relative\n        }\n\n        .canvas_box #canvas_text .s_value em {\n            font-size: 14px;\n            font-style: normal\n        }\n\n        .canvas_box #canvas_text .s_value i {\n            width: 42px;\n            height: 22px;\n            font-size: 12px;\n            font-style: normal;\n            position: absolute;\n            top: -15px;\n            left: 45%;\n            margin-left: 35px;\n            line-height: 18px;\n            text-align: center;\n            -webkit-background-size: 100% 100%;\n            -moz-background-size: 100% 100%;\n            -o-background-size: 100% 100%;\n            background-size: 100% 100%;\n            color: #7ac6f5\n        }\n```\n\njs\n```javascript\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    function draw(degrees){\n        var canvas = document.getElementById('canvas');\n        var ctx = canvas.getContext('2d');\n        var dpi = getPixelRatio(ctx);\n        canvas.width = 210*dpi;\n        canvas.height = 210*dpi;\n\n\n        ctx.beginPath();\n        ctx.clearRect(0,0,210*dpi,210*dpi);\n        ctx.arc(105*dpi, 105*dpi, 90*dpi, Math.PI*0.75, Math.PI*0.25, false);\n        ctx.lineWidth = 8*dpi;\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'rgb(236,236,236)';\n        ctx.stroke();\n\n        if(degrees != 0.75){\n            ctx.beginPath();\n            ctx.arc(105*dpi, 105*dpi, 90*dpi, Math.PI*0.75, Math.PI*degrees, false);\n            ctx.lineWidth = 12*dpi;\n            ctx.lineCap = 'round';\n            ctx.strokeStyle = 'rgb(255,89,113)';\n            ctx.stroke();\n        }\n\n        // ctx.beginPath();\n        // ctx.font = \"14px serif\";\n        // ctx.fillText(\"预期年化利率\", 105, 65);\n        // ctx.fillStyle = \"#6b6d7c\";\n        // ctx.textAlign = \"center\";\n\n    }\n    (function($){\n        $(function(){\n            var canvas = $('#canvas');\n            var val = canvas.attr('data-val');\n            var _val = 0;\n            var degrees = 0;\n\n            var t = setInterval(function(){\n                degrees = 0.75 + 1.5*_val/100;\n                draw(degrees);\n                if(_val == val){\n                    clearInterval(t);\n                }else {\n                    _val++;\n                    if(_val >val){\n                        clearInterval(t);\n                    }\n                }\n            },10);\n\n        });\n    })(jQuery);\n\n\n    function getPixelRatio(context) {\n        var backingStore = context.backingStorePixelRatio ||\n            context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio || 1;\n\n        return (window.devicePixelRatio || 1) / backingStore;\n    }\n\n```",
      "mdContent": "<h3 id=\"toc-450c58\">需要关注的几个点</h3>\n<ul>\n<li>弧形的圆角\n通过定义<code>ctx.lineCap = &#39;round&#39;;</code>来实现</li>\n<li>避免移动端canvas模糊，需要先计算<code>dpi</code>来进行适配，通过<code>getPixelRatio</code>方法。也可以直接计算为2倍或3倍（偷懒的做法）</li>\n<li>可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。</li>\n</ul>\n<!-- more -->\n\n<h3 id=\"toc-72aa4d\">代码如下</h3>\n<p>html</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;canvas_box&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;420&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;420&quot;</span> <span class=\"hljs-attr\">data-val</span>=<span class=\"hljs-string\">&quot;90&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas_text&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;s_title&quot;</span>&gt;</span>预期年化利率<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;s_value&quot;</span>&gt;</span>\n            6<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>%<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>+9%<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>css</p>\n<pre><code class=\"hljs lang-css\">        <span class=\"hljs-selector-class\">.canvas_box</span> {\n            <span class=\"hljs-attribute\">position</span>: relative;\n            <span class=\"hljs-attribute\">display</span>: block;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">210px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">15px</span> auto <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">overflow</span>: hidden\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas</span>,<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> {\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">210px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">210px</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n            <span class=\"hljs-attribute\">position</span>: relative;\n            <span class=\"hljs-attribute\">display</span>: block\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> {\n            <span class=\"hljs-attribute\">top</span>: -<span class=\"hljs-number\">210px</span>\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_title</span> {\n            <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">65px</span>;\n            <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#6b6d7c</span>;\n            <span class=\"hljs-attribute\">text-align</span>: center;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> {\n            <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>;\n            <span class=\"hljs-attribute\">text-align</span>: center;\n            <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff5971</span>;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">40px</span>;\n            <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">700</span>;\n            <span class=\"hljs-attribute\">position</span>: relative\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> <span class=\"hljs-selector-tag\">em</span> {\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n            <span class=\"hljs-attribute\">font-style</span>: normal\n        }\n\n        <span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> <span class=\"hljs-selector-tag\">i</span> {\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">42px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n            <span class=\"hljs-attribute\">font-style</span>: normal;\n            <span class=\"hljs-attribute\">position</span>: absolute;\n            <span class=\"hljs-attribute\">top</span>: -<span class=\"hljs-number\">15px</span>;\n            <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">45%</span>;\n            <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">35px</span>;\n            <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">18px</span>;\n            <span class=\"hljs-attribute\">text-align</span>: center;\n            -webkit-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n            -moz-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n            -o-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#7ac6f5</span>\n        }\n</code></pre>\n<p>js</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">mozRequestAnimationFrame</span> || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">webkitRequestAnimationFrame</span> || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">msRequestAnimationFrame</span>;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\">degrees</span>){\n        <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n        <span class=\"hljs-keyword\">var</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n        <span class=\"hljs-keyword\">var</span> dpi = <span class=\"hljs-title function_\">getPixelRatio</span>(ctx);\n        canvas.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">210</span>*dpi;\n        canvas.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">210</span>*dpi;\n\n\n        ctx.<span class=\"hljs-title function_\">beginPath</span>();\n        ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">210</span>*dpi,<span class=\"hljs-number\">210</span>*dpi);\n        ctx.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">105</span>*dpi, <span class=\"hljs-number\">105</span>*dpi, <span class=\"hljs-number\">90</span>*dpi, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>*<span class=\"hljs-number\">0.75</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>*<span class=\"hljs-number\">0.25</span>, <span class=\"hljs-literal\">false</span>);\n        ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">8</span>*dpi;\n        ctx.<span class=\"hljs-property\">lineCap</span> = <span class=\"hljs-string\">&#x27;round&#x27;</span>;\n        ctx.<span class=\"hljs-property\">strokeStyle</span> = <span class=\"hljs-string\">&#x27;rgb(236,236,236)&#x27;</span>;\n        ctx.<span class=\"hljs-title function_\">stroke</span>();\n\n        <span class=\"hljs-keyword\">if</span>(degrees != <span class=\"hljs-number\">0.75</span>){\n            ctx.<span class=\"hljs-title function_\">beginPath</span>();\n            ctx.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">105</span>*dpi, <span class=\"hljs-number\">105</span>*dpi, <span class=\"hljs-number\">90</span>*dpi, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>*<span class=\"hljs-number\">0.75</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>*degrees, <span class=\"hljs-literal\">false</span>);\n            ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">12</span>*dpi;\n            ctx.<span class=\"hljs-property\">lineCap</span> = <span class=\"hljs-string\">&#x27;round&#x27;</span>;\n            ctx.<span class=\"hljs-property\">strokeStyle</span> = <span class=\"hljs-string\">&#x27;rgb(255,89,113)&#x27;</span>;\n            ctx.<span class=\"hljs-title function_\">stroke</span>();\n        }\n\n        <span class=\"hljs-comment\">// ctx.beginPath();</span>\n        <span class=\"hljs-comment\">// ctx.font = &quot;14px serif&quot;;</span>\n        <span class=\"hljs-comment\">// ctx.fillText(&quot;预期年化利率&quot;, 105, 65);</span>\n        <span class=\"hljs-comment\">// ctx.fillStyle = &quot;#6b6d7c&quot;;</span>\n        <span class=\"hljs-comment\">// ctx.textAlign = &quot;center&quot;;</span>\n\n    }\n    (<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$</span>){\n        $(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n            <span class=\"hljs-keyword\">var</span> canvas = $(<span class=\"hljs-string\">&#x27;#canvas&#x27;</span>);\n            <span class=\"hljs-keyword\">var</span> val = canvas.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-val&#x27;</span>);\n            <span class=\"hljs-keyword\">var</span> _val = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> degrees = <span class=\"hljs-number\">0</span>;\n\n            <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                degrees = <span class=\"hljs-number\">0.75</span> + <span class=\"hljs-number\">1.5</span>*_val/<span class=\"hljs-number\">100</span>;\n                <span class=\"hljs-title function_\">draw</span>(degrees);\n                <span class=\"hljs-keyword\">if</span>(_val == val){\n                    <span class=\"hljs-built_in\">clearInterval</span>(t);\n                }<span class=\"hljs-keyword\">else</span> {\n                    _val++;\n                    <span class=\"hljs-keyword\">if</span>(_val &gt;val){\n                        <span class=\"hljs-built_in\">clearInterval</span>(t);\n                    }\n                }\n            },<span class=\"hljs-number\">10</span>);\n\n        });\n    })(jQuery);\n\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPixelRatio</span>(<span class=\"hljs-params\">context</span>) {\n        <span class=\"hljs-keyword\">var</span> backingStore = context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">webkitBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">mozBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">msBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">oBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">backingStorePixelRatio</span> || <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">devicePixelRatio</span> || <span class=\"hljs-number\">1</span>) / backingStore;\n    }\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-450c58\">需要关注的几个点</a></li>\n<li><a href=\"#toc-72aa4d\">代码如下</a></li>\n</ul>\n",
      "url": "canvas-shi-xian-yuan-xing-jin-du-tiao",
      "created_timestamp": 1493504202000,
      "updated_timestamp": 1493504202000,
      "symbolsCount": 11782
    },
    {
      "id": "1ef3b5cf-0201-6880-9695-c8862c624a56",
      "title": "Web动画优化--requestAnimationFrame",
      "alias": "",
      "cover": "",
      "created_time": "2017-05-03T10:06:42.000Z",
      "updated_time": "2017-05-03T10:06:42.000Z",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "excerpt": "什么是requestAnimationFramewindow.requestAnimationFrame（callback）方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 callback该方法作为参数，在重绘之前调用回调。注意：如果您要在下一次重新绘制时进行别",
      "published": true,
      "content": "\n### 什么是requestAnimationFrame\n\n`window.requestAnimationFrame（callback）`方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 `callback`该方法作为参数，在重绘之前调用回调。\n\n> 注意：如果您要在下一次重新绘制时进行别的动画处理，则您的回调本身必须调用requestAnimationFrame（）。\n\n<!-- more -->\n\n### 例如：\n\n```javascript\nvar i=0;\nfunction step(){\n\tconsole.log(i++);\n\twindow.requestAnimationFrame(step);//调用step自身\n}\nwindow.requestAnimationFrame(step);\n```\n此例中`step`方法中必须调用`requestAnimationFrame`，才能循环输出\n\n### 优点\n\n该方法通过在系统准备好绘制动画帧时调用该帧，从而为创建动画网页提供了一种更平滑更高效的方法。在此 API 之前，使用 `setTimeout` 和 `setInterval` 绘制的动画并没有为 Web 开发人员提供有效的方法来规划动画的图形计时器。这导致了动画过度绘制，浪费 CPU 周期以及消耗额外的电能等问题。而且，即使看不到网站，特别是当网站使用背景选项卡中的页面或浏览器已最小化时，动画都会频繁出现。\n\n具体可以查看<a href=\"https://msdn.microsoft.com/library/hh920765(v=vs.85).aspx\" target=\"_blank\">MSDN</a>\n\n### 使用方法\n\n`requestAnimationFrame`的用法与`settimeout`很相似，只是不需要设置时间间隔而已。`requestAnimationFrame`使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给`cancelAnimationFrame`用于取消这个函数的执行\n\n对上面的方法进行修改\n\n```javascript\n    var i=0;\n    var time;\n    function step(){\n        console.log(i++);\n        time = window.requestAnimationFrame(step);\n        if(i>10){\n            cancelAnimationFrame(time);//取消动画\n        }\n\n    }\n    time = window.requestAnimationFrame(step);\n```\n\n### 兼容性\n\n在老的浏览器中，requestAnimationFrame的方法名是带浏览器前缀的。以下是张鑫旭为在各个浏览器中能统一的调用requestAnimationFrame做的处理。不支持requestAnimationFrame的用setTimeout来代替。\n\n```javascript\n/* requestAnimationFrame.js\n * by zhangxinxu 2013-09-30\n*/\n(function() {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||    // Webkit中此取消方法的名字变了\n                                      window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n}());\n\n```\n\n",
      "mdContent": "<h3 id=\"toc-ecace5\">什么是requestAnimationFrame</h3>\n<p><code>window.requestAnimationFrame（callback）</code>方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 <code>callback</code>该方法作为参数，在重绘之前调用回调。</p>\n<blockquote>\n<p>注意：如果您要在下一次重新绘制时进行别的动画处理，则您的回调本身必须调用requestAnimationFrame（）。</p>\n</blockquote>\n<!-- more -->\n\n<h3 id=\"toc-ddcf3f\">例如：</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i++);\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step);<span class=\"hljs-comment\">//调用step自身</span>\n}\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step);\n</code></pre>\n<p>此例中<code>step</code>方法中必须调用<code>requestAnimationFrame</code>，才能循环输出</p>\n<h3 id=\"toc-52b8c1\">优点</h3>\n<p>该方法通过在系统准备好绘制动画帧时调用该帧，从而为创建动画网页提供了一种更平滑更高效的方法。在此 API 之前，使用 <code>setTimeout</code> 和 <code>setInterval</code> 绘制的动画并没有为 Web 开发人员提供有效的方法来规划动画的图形计时器。这导致了动画过度绘制，浪费 CPU 周期以及消耗额外的电能等问题。而且，即使看不到网站，特别是当网站使用背景选项卡中的页面或浏览器已最小化时，动画都会频繁出现。</p>\n<p>具体可以查看<a href=\"https://msdn.microsoft.com/library/hh920765(v=vs.85).aspx\" target=\"_blank\">MSDN</a></p>\n<h3 id=\"toc-ec0964\">使用方法</h3>\n<p><code>requestAnimationFrame</code>的用法与<code>settimeout</code>很相似，只是不需要设置时间间隔而已。<code>requestAnimationFrame</code>使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给<code>cancelAnimationFrame</code>用于取消这个函数的执行</p>\n<p>对上面的方法进行修改</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">var</span> time;\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-params\"></span>){\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i++);\n        time = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step);\n        <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">10</span>){\n            <span class=\"hljs-title function_\">cancelAnimationFrame</span>(time);<span class=\"hljs-comment\">//取消动画</span>\n        }\n\n    }\n    time = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step);\n</code></pre>\n<h3 id=\"toc-c11b90\">兼容性</h3>\n<p>在老的浏览器中，requestAnimationFrame的方法名是带浏览器前缀的。以下是张鑫旭为在各个浏览器中能统一的调用requestAnimationFrame做的处理。不支持requestAnimationFrame的用setTimeout来代替。</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">/* requestAnimationFrame.js\n * by zhangxinxu 2013-09-30\n*/</span>\n(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> lastTime = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">var</span> vendors = [<span class=\"hljs-string\">&#x27;webkit&#x27;</span>, <span class=\"hljs-string\">&#x27;moz&#x27;</span>];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">0</span>; x &lt; vendors.<span class=\"hljs-property\">length</span> &amp;&amp; !<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span>; ++x) {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> = <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;RequestAnimationFrame&#x27;</span>];\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span> = <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;CancelAnimationFrame&#x27;</span>] ||    <span class=\"hljs-comment\">// Webkit中此取消方法的名字变了</span>\n                                      <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;CancelRequestAnimationFrame&#x27;</span>];\n    }\n\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span>) {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback, element</span>) {\n            <span class=\"hljs-keyword\">var</span> currTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>();\n            <span class=\"hljs-keyword\">var</span> timeToCall = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16.7</span> - (currTime - lastTime));\n            <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n                <span class=\"hljs-title function_\">callback</span>(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            <span class=\"hljs-keyword\">return</span> id;\n        };\n    }\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span>) {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>) {\n            <span class=\"hljs-built_in\">clearTimeout</span>(id);\n        };\n    }\n}());\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-ecace5\">什么是requestAnimationFrame</a></li>\n<li><a href=\"#toc-ddcf3f\">例如：</a></li>\n<li><a href=\"#toc-52b8c1\">优点</a></li>\n<li><a href=\"#toc-ec0964\">使用方法</a></li>\n<li><a href=\"#toc-c11b90\">兼容性</a></li>\n</ul>\n",
      "url": "web-dong-hua-you-hua-requestanimationframe",
      "created_timestamp": 1493806002000,
      "updated_timestamp": 1493806002000,
      "symbolsCount": 5479
    },
    {
      "id": "1ef3b5cb-5325-6760-803d-418bab754735",
      "title": "HTML5 Canvas手机九宫格手势密码解锁 ，支持N*N个点",
      "alias": "",
      "cover": "",
      "created_time": "2018-03-10T11:22:03.000Z",
      "updated_time": "2018-03-10T11:22:03.000Z",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "excerpt": "对于canvas不熟悉的可以查看 MDN 上的canvas教程在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内通过判断一个点到圆心的距离是否大于半径。例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） （x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R 那么在",
      "published": true,
      "content": "\n> 对于canvas不熟悉的可以查看 MDN 上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\">canvas教程</a>\n\n在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内\n通过判断一个点到圆心的距离是否大于半径。\n例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） `（x-x1）*(x-x1)+(y-y1)*(y-y1)>R*R` 那么在圆外 反之在圆内\n\n<!-- more -->\n\n### 准备及布局设置\n本例引入了jQuery，写成了jQuery插件的形式，真实使用的时候，可以去掉jQuery，用原生的js写。\n\njQuery插件的写法\n```javascript\n    (function($){\n        $.fn.locked = function(settings) {\n\t\tsettings = $.extend({},defaultSettings,settings);\n        }\n    })(jQuery);\n\n\n    $(function(){\n        $('#canvas').locked({\n            n:4\n        });\n    });\n\n```\n\n默认配置\njQuery插件调用时传入的配置会覆盖defaultSettings\n其中`document.body.offsetWidth`获取的是网页可见区域宽，没特殊需要可以不改\n\n```javascript\n    //两个变量记录，所有的点以及选中的点\n    var pointArr = []; //点数组\n    var pointActiveArr = [];//已激活点数组\n\n    //默认配置\n    var defaultSettings = {\n        r :25,//大圆半径\n        sr :8,//小圆半径，小圆既选中状态，内部的小圆\n        w :document.body.offsetWidth,//canvas宽度\n        h : document.body.offsetWidth,//canvas高度\n        n : 3,//数量n*n\n        pointColor:'#ff0000',//选中状态点线颜色\n        pointDefault:'#686868'//默认点颜色\n\n    };\n```\n\n获取到canvas对象，并根据设备`dpi`对settings配置进行修改\n> 根据`dpi`处理，主要是为了防止手机端访问的时候，canvas变模糊\n```javascript\n    var canvas = $(this)[0];//jQuery对象转成js对象\n    var ctx = canvas.getContext('2d');\n\n    //防止手机端canvas模糊，计算dpi\n    var dpi = getPixelRatio(ctx);\n    settings.r *= dpi;\n    settings.sr *= dpi;\n    settings.w *= dpi;\n    settings.h *= dpi;\n\n    //设置canvas宽度高度\n    canvas.width = settings.w;\n    canvas.height = settings.h;\n```\n\n获取`dpi`的方式\n```javascript\n    //获取dpi\n    function getPixelRatio(context) {\n        var backingStore = context.backingStorePixelRatio ||\n            context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio || 1;\n\n        return (window.devicePixelRatio || 1) / backingStore;\n    }\n```\n\n创建N*N个点并将x,y点的坐标记录到pointArr数组中，点的位置根据canvas宽高平均分配\n```javascript\n    pointArr = creatPoint();\n\n    //创建n*n个点\n    function creatPoint() {\n        var points = [];\n        for (var row = 0; row < settings.n; row++) {\n            for (var col = 0; col < settings.n; col++) {\n                points.push({\n                    x :(settings.w/(settings.n+1))*(col+1),\n                    y :(settings.h/(settings.n+1))*(row+1),\n                });\n            }\n        }\n        return points;\n    }\n```\n\n添加事件监听\n```javascript\n    //事件监听\n    canvas.addEventListener('touchstart',function(e){\n        touch(e)\n    }, false);\n    canvas.addEventListener('touchmove',function(e){\n        touch(e)\n    }, false);\n    canvas.addEventListener('touchend',function(e){\n        touch(e)\n    }, false);\n```\ntouch函数统一处理滑动事件\n\n```javascript\n    //事件监听处理\n    function touch(e){\n        var e = e || window.event;\n        console.log(e.type);\n        switch(e.type){\n            case \"touchstart\":\n                isSelect(e.touches[0]);\n                break;\n            case \"touchend\":\n                draw();\n                alert(\"密码结果是：\"+pointActiveArr.join('-'));\n                pointActiveArr=[];\n                break;\n            case \"touchmove\":\n                isSelect(e.touches[0]);\n                draw(e.touches[0]);\n                e.preventDefault();\n                break;\n        }\n    }\n```\n\n滑动开始和滑动过程中通过isSelect判断当前的点是否进入了某个圆内，如果进入了某个圆且这个点没有添加到pointActiveArr数组中，则添加。\n```javascript\n    //判断是否在圆内\n    //通过数学计算来判断\n    function isSelect(touche){\n        //遍历所有点，查看当前位置是否在圆内\n        for (var i = 0; i < pointArr.length; i++) {\n            var point = pointArr[i];\n            var x_diff = Math.abs(point.x - touche.pageX*dpi);\n            var y_diff = Math.abs(point.y - touche.pageY*dpi);\n\n            //如果 (x_diff*x_diff + y_diff*y_diff) > settings.r*settings.r  则在圆外\n            if ((x_diff*x_diff + y_diff*y_diff) < (settings.r)*(settings.r)  ) {\n                if(pointActiveArr.indexOf(i) < 0){ pointActiveArr.push(i);}\n                break;\n            }\n        }\n    }\n```\n滑动结束以后输出当前pointActiveArr中的内容，作为密码进行判断，具体判断的逻辑可以自己实现\n\n接下来就是最主要的，绘制canvas，先上代码\n```javascript\n    //绘制canvas\n    function draw(touch){\n        ctx.clearRect(0,0,settings.w,settings.h);\n        //绘制n*n个圈\n        for (var i = 0; i < pointArr.length; i++) {\n            var point = pointArr[i];\n            ctx.fillStyle = settings.pointDefault;\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, settings.r, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n            ctx.fillStyle = '#ffffff';\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, settings.r -6, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n\n\n            //如果当前点已被选中，这中间添加一个小的圆\n            if(pointActiveArr.indexOf(i)>=0)\n            {\n                ctx.fillStyle = settings.pointColor;\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, settings.sr, 0, Math.PI * 2, true);\n                ctx.closePath();\n                ctx.fill();\n            }\n\n        }\n\n\n\n        //如果有传当前移动位置，则添加和最后一个选中点的连线\n        if(touch!=null)\n        {\n            var lastPoint=pointArr[pointActiveArr[pointActiveArr.length-1]];\n            ctx.beginPath();\n            ctx.moveTo(lastPoint.x,lastPoint.y);\n            ctx.lineTo(touch.pageX*dpi,touch.pageY*dpi);\n            ctx.stroke();\n            ctx.closePath();\n        }\n\n\n        //绘制选中的线\n        if (pointActiveArr.length > 0) {\n            ctx.beginPath();\n            for (var i = 0; i < pointActiveArr.length; i++) {\n                var index = pointActiveArr[i];\n                ctx.lineTo(pointArr[index].x, pointArr[index].y);\n            }\n            ctx.lineWidth = 10;\n            ctx.strokeStyle = settings.pointColor;\n            ctx.stroke();\n            ctx.closePath();\n\n        }\n    }\n```\n绘制的时候先画了我们`pointArr`中定义的点，画`N*N`个圆。如果当前点在`pointActiveArr`中存在，则在圆内部画一个小圆。\n根据`pointActiveArr`，在相邻的两个点中间，画直线。\n`touch`传入的是当前滑动到的位置，将其与 `pointActiveArr`中的最后一个相连。\n\n到此位置基本的功能就实现完了。\n\n### 本例可以做一些进一步的优化\n- 可以去除jQuery，用原生js来，因为页面本身引入了jQuery，就直接拿来用了\n- canvas底部的N*N的点不需要每次都重绘，可以用两个canvas进行叠加\n- 本例只是实现了绘制的部分，并没有进行具体的解锁逻辑处理。\n\n  可以将密码保存到 localStorage 里，页面打开的时候从本地读取密码，如果没有设置就让用户设置密码，具体的密码规则自己定制。\n\n- 没有添加密码错误/正确的样式，可以在配置中添加相应的颜色，再绘制canvas的时候选择对象的颜色。\n\n\n\n\n\n\n\n",
      "mdContent": "<blockquote>\n<p>对于canvas不熟悉的可以查看 MDN 上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\">canvas教程</a></p>\n</blockquote>\n<p>在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内\n通过判断一个点到圆心的距离是否大于半径。\n例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） <code>（x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R</code> 那么在圆外 反之在圆内</p>\n<!-- more -->\n\n<h3 id=\"toc-e6969a\">准备及布局设置</h3>\n<p>本例引入了jQuery，写成了jQuery插件的形式，真实使用的时候，可以去掉jQuery，用原生的js写。</p>\n<p>jQuery插件的写法</p>\n<pre><code class=\"hljs lang-javascript\">    (<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$</span>){\n        $.fn.<span class=\"hljs-property\">locked</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">settings</span>) {\n        settings = $.<span class=\"hljs-title function_\">extend</span>({},defaultSettings,settings);\n        }\n    })(jQuery);\n\n\n    $(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n        $(<span class=\"hljs-string\">&#x27;#canvas&#x27;</span>).<span class=\"hljs-title function_\">locked</span>({\n            <span class=\"hljs-attr\">n</span>:<span class=\"hljs-number\">4</span>\n        });\n    });\n</code></pre>\n<p>默认配置\njQuery插件调用时传入的配置会覆盖defaultSettings\n其中<code>document.body.offsetWidth</code>获取的是网页可见区域宽，没特殊需要可以不改</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//两个变量记录，所有的点以及选中的点</span>\n    <span class=\"hljs-keyword\">var</span> pointArr = []; <span class=\"hljs-comment\">//点数组</span>\n    <span class=\"hljs-keyword\">var</span> pointActiveArr = [];<span class=\"hljs-comment\">//已激活点数组</span>\n\n    <span class=\"hljs-comment\">//默认配置</span>\n    <span class=\"hljs-keyword\">var</span> defaultSettings = {\n        r :<span class=\"hljs-number\">25</span>,<span class=\"hljs-comment\">//大圆半径</span>\n        sr :<span class=\"hljs-number\">8</span>,<span class=\"hljs-comment\">//小圆半径，小圆既选中状态，内部的小圆</span>\n        w :<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">offsetWidth</span>,<span class=\"hljs-comment\">//canvas宽度</span>\n        h : <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">offsetWidth</span>,<span class=\"hljs-comment\">//canvas高度</span>\n        n : <span class=\"hljs-number\">3</span>,<span class=\"hljs-comment\">//数量n*n</span>\n        <span class=\"hljs-attr\">pointColor</span>:<span class=\"hljs-string\">&#x27;#ff0000&#x27;</span>,<span class=\"hljs-comment\">//选中状态点线颜色</span>\n        <span class=\"hljs-attr\">pointDefault</span>:<span class=\"hljs-string\">&#x27;#686868&#x27;</span><span class=\"hljs-comment\">//默认点颜色</span>\n\n    };\n</code></pre>\n<p>获取到canvas对象，并根据设备<code>dpi</code>对settings配置进行修改</p>\n<blockquote>\n<p>根据<code>dpi</code>处理，主要是为了防止手机端访问的时候，canvas变模糊</p>\n</blockquote>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-keyword\">var</span> canvas = $(<span class=\"hljs-variable language_\">this</span>)[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//jQuery对象转成js对象</span>\n    <span class=\"hljs-keyword\">var</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n\n    <span class=\"hljs-comment\">//防止手机端canvas模糊，计算dpi</span>\n    <span class=\"hljs-keyword\">var</span> dpi = <span class=\"hljs-title function_\">getPixelRatio</span>(ctx);\n    settings.<span class=\"hljs-property\">r</span> *= dpi;\n    settings.<span class=\"hljs-property\">sr</span> *= dpi;\n    settings.<span class=\"hljs-property\">w</span> *= dpi;\n    settings.<span class=\"hljs-property\">h</span> *= dpi;\n\n    <span class=\"hljs-comment\">//设置canvas宽度高度</span>\n    canvas.<span class=\"hljs-property\">width</span> = settings.<span class=\"hljs-property\">w</span>;\n    canvas.<span class=\"hljs-property\">height</span> = settings.<span class=\"hljs-property\">h</span>;\n</code></pre>\n<p>获取<code>dpi</code>的方式</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//获取dpi</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPixelRatio</span>(<span class=\"hljs-params\">context</span>) {\n        <span class=\"hljs-keyword\">var</span> backingStore = context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">webkitBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">mozBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">msBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">oBackingStorePixelRatio</span> ||\n            context.<span class=\"hljs-property\">backingStorePixelRatio</span> || <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">devicePixelRatio</span> || <span class=\"hljs-number\">1</span>) / backingStore;\n    }\n</code></pre>\n<p>创建N*N个点并将x,y点的坐标记录到pointArr数组中，点的位置根据canvas宽高平均分配</p>\n<pre><code class=\"hljs lang-javascript\">    pointArr = <span class=\"hljs-title function_\">creatPoint</span>();\n\n    <span class=\"hljs-comment\">//创建n*n个点</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">creatPoint</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">var</span> points = [];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> row = <span class=\"hljs-number\">0</span>; row &lt; settings.<span class=\"hljs-property\">n</span>; row++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> col = <span class=\"hljs-number\">0</span>; col &lt; settings.<span class=\"hljs-property\">n</span>; col++) {\n                points.<span class=\"hljs-title function_\">push</span>({\n                    x :(settings.<span class=\"hljs-property\">w</span>/(settings.<span class=\"hljs-property\">n</span>+<span class=\"hljs-number\">1</span>))*(col+<span class=\"hljs-number\">1</span>),\n                    y :(settings.<span class=\"hljs-property\">h</span>/(settings.<span class=\"hljs-property\">n</span>+<span class=\"hljs-number\">1</span>))*(row+<span class=\"hljs-number\">1</span>),\n                });\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> points;\n    }\n</code></pre>\n<p>添加事件监听</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//事件监听</span>\n    canvas.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;touchstart&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>){\n        <span class=\"hljs-title function_\">touch</span>(e)\n    }, <span class=\"hljs-literal\">false</span>);\n    canvas.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;touchmove&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>){\n        <span class=\"hljs-title function_\">touch</span>(e)\n    }, <span class=\"hljs-literal\">false</span>);\n    canvas.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;touchend&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>){\n        <span class=\"hljs-title function_\">touch</span>(e)\n    }, <span class=\"hljs-literal\">false</span>);\n</code></pre>\n<p>touch函数统一处理滑动事件</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//事件监听处理</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">touch</span>(<span class=\"hljs-params\">e</span>){\n        <span class=\"hljs-keyword\">var</span> e = e || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">event</span>;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">type</span>);\n        <span class=\"hljs-keyword\">switch</span>(e.<span class=\"hljs-property\">type</span>){\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;touchstart&quot;</span>:\n                <span class=\"hljs-title function_\">isSelect</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>]);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;touchend&quot;</span>:\n                <span class=\"hljs-title function_\">draw</span>();\n                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;密码结果是：&quot;</span>+pointActiveArr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>));\n                pointActiveArr=[];\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;touchmove&quot;</span>:\n                <span class=\"hljs-title function_\">isSelect</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>]);\n                <span class=\"hljs-title function_\">draw</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>]);\n                e.<span class=\"hljs-title function_\">preventDefault</span>();\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n</code></pre>\n<p>滑动开始和滑动过程中通过isSelect判断当前的点是否进入了某个圆内，如果进入了某个圆且这个点没有添加到pointActiveArr数组中，则添加。</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//判断是否在圆内</span>\n    <span class=\"hljs-comment\">//通过数学计算来判断</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isSelect</span>(<span class=\"hljs-params\">touche</span>){\n        <span class=\"hljs-comment\">//遍历所有点，查看当前位置是否在圆内</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointArr.<span class=\"hljs-property\">length</span>; i++) {\n            <span class=\"hljs-keyword\">var</span> point = pointArr[i];\n            <span class=\"hljs-keyword\">var</span> x_diff = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(point.<span class=\"hljs-property\">x</span> - touche.<span class=\"hljs-property\">pageX</span>*dpi);\n            <span class=\"hljs-keyword\">var</span> y_diff = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(point.<span class=\"hljs-property\">y</span> - touche.<span class=\"hljs-property\">pageY</span>*dpi);\n\n            <span class=\"hljs-comment\">//如果 (x_diff*x_diff + y_diff*y_diff) &gt; settings.r*settings.r  则在圆外</span>\n            <span class=\"hljs-keyword\">if</span> ((x_diff*x_diff + y_diff*y_diff) &lt; (settings.<span class=\"hljs-property\">r</span>)*(settings.<span class=\"hljs-property\">r</span>)  ) {\n                <span class=\"hljs-keyword\">if</span>(pointActiveArr.<span class=\"hljs-title function_\">indexOf</span>(i) &lt; <span class=\"hljs-number\">0</span>){ pointActiveArr.<span class=\"hljs-title function_\">push</span>(i);}\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n</code></pre>\n<p>滑动结束以后输出当前pointActiveArr中的内容，作为密码进行判断，具体判断的逻辑可以自己实现</p>\n<p>接下来就是最主要的，绘制canvas，先上代码</p>\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-comment\">//绘制canvas</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\">touch</span>){\n        ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,settings.<span class=\"hljs-property\">w</span>,settings.<span class=\"hljs-property\">h</span>);\n        <span class=\"hljs-comment\">//绘制n*n个圈</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointArr.<span class=\"hljs-property\">length</span>; i++) {\n            <span class=\"hljs-keyword\">var</span> point = pointArr[i];\n            ctx.<span class=\"hljs-property\">fillStyle</span> = settings.<span class=\"hljs-property\">pointDefault</span>;\n            ctx.<span class=\"hljs-title function_\">beginPath</span>();\n            ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">r</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n            ctx.<span class=\"hljs-title function_\">closePath</span>();\n            ctx.<span class=\"hljs-title function_\">fill</span>();\n            ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>;\n            ctx.<span class=\"hljs-title function_\">beginPath</span>();\n            ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">r</span> -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n            ctx.<span class=\"hljs-title function_\">closePath</span>();\n            ctx.<span class=\"hljs-title function_\">fill</span>();\n\n\n            <span class=\"hljs-comment\">//如果当前点已被选中，这中间添加一个小的圆</span>\n            <span class=\"hljs-keyword\">if</span>(pointActiveArr.<span class=\"hljs-title function_\">indexOf</span>(i)&gt;=<span class=\"hljs-number\">0</span>)\n            {\n                ctx.<span class=\"hljs-property\">fillStyle</span> = settings.<span class=\"hljs-property\">pointColor</span>;\n                ctx.<span class=\"hljs-title function_\">beginPath</span>();\n                ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">sr</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n                ctx.<span class=\"hljs-title function_\">closePath</span>();\n                ctx.<span class=\"hljs-title function_\">fill</span>();\n            }\n\n        }\n\n\n\n        <span class=\"hljs-comment\">//如果有传当前移动位置，则添加和最后一个选中点的连线</span>\n        <span class=\"hljs-keyword\">if</span>(touch!=<span class=\"hljs-literal\">null</span>)\n        {\n            <span class=\"hljs-keyword\">var</span> lastPoint=pointArr[pointActiveArr[pointActiveArr.<span class=\"hljs-property\">length</span>-<span class=\"hljs-number\">1</span>]];\n            ctx.<span class=\"hljs-title function_\">beginPath</span>();\n            ctx.<span class=\"hljs-title function_\">moveTo</span>(lastPoint.<span class=\"hljs-property\">x</span>,lastPoint.<span class=\"hljs-property\">y</span>);\n            ctx.<span class=\"hljs-title function_\">lineTo</span>(touch.<span class=\"hljs-property\">pageX</span>*dpi,touch.<span class=\"hljs-property\">pageY</span>*dpi);\n            ctx.<span class=\"hljs-title function_\">stroke</span>();\n            ctx.<span class=\"hljs-title function_\">closePath</span>();\n        }\n\n\n        <span class=\"hljs-comment\">//绘制选中的线</span>\n        <span class=\"hljs-keyword\">if</span> (pointActiveArr.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n            ctx.<span class=\"hljs-title function_\">beginPath</span>();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointActiveArr.<span class=\"hljs-property\">length</span>; i++) {\n                <span class=\"hljs-keyword\">var</span> index = pointActiveArr[i];\n                ctx.<span class=\"hljs-title function_\">lineTo</span>(pointArr[index].<span class=\"hljs-property\">x</span>, pointArr[index].<span class=\"hljs-property\">y</span>);\n            }\n            ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">10</span>;\n            ctx.<span class=\"hljs-property\">strokeStyle</span> = settings.<span class=\"hljs-property\">pointColor</span>;\n            ctx.<span class=\"hljs-title function_\">stroke</span>();\n            ctx.<span class=\"hljs-title function_\">closePath</span>();\n\n        }\n    }\n</code></pre>\n<p>绘制的时候先画了我们<code>pointArr</code>中定义的点，画<code>N*N</code>个圆。如果当前点在<code>pointActiveArr</code>中存在，则在圆内部画一个小圆。\n根据<code>pointActiveArr</code>，在相邻的两个点中间，画直线。\n<code>touch</code>传入的是当前滑动到的位置，将其与 <code>pointActiveArr</code>中的最后一个相连。</p>\n<p>到此位置基本的功能就实现完了。</p>\n<h3 id=\"toc-19b223\">本例可以做一些进一步的优化</h3>\n<ul>\n<li><p>可以去除jQuery，用原生js来，因为页面本身引入了jQuery，就直接拿来用了</p>\n</li>\n<li><p>canvas底部的N*N的点不需要每次都重绘，可以用两个canvas进行叠加</p>\n</li>\n<li><p>本例只是实现了绘制的部分，并没有进行具体的解锁逻辑处理。</p>\n<p>可以将密码保存到 localStorage 里，页面打开的时候从本地读取密码，如果没有设置就让用户设置密码，具体的密码规则自己定制。</p>\n</li>\n<li><p>没有添加密码错误/正确的样式，可以在配置中添加相应的颜色，再绘制canvas的时候选择对象的颜色。</p>\n</li>\n</ul>\n",
      "toc": "<ul>\n<li><a href=\"#toc-e6969a\">准备及布局设置</a></li>\n<li><a href=\"#toc-19b223\">本例可以做一些进一步的优化</a></li>\n</ul>\n",
      "url": "html-canvas-shou-ji-jiu-gong-ge-shou-shi-mi-ma-jie-suo-zhi-chi-nn-ge-dian",
      "created_timestamp": 1520680923000,
      "updated_timestamp": 1520680923000,
      "symbolsCount": 14983
    },
    {
      "id": "1ef3b5b7-e0bc-6ce0-ac15-c509070dad5f",
      "title": "深入分析css中单位px和em,rem的区别",
      "alias": "",
      "cover": "",
      "created_time": "2017-04-29T21:06:21.000Z",
      "updated_time": "2017-04-29T21:06:21.000Z",
      "categories": [
        "css"
      ],
      "tags": [],
      "excerpt": "PX特点IE无法调整那些使用px作为单位的字体大小;EM特点em的值并不是固定的;em会继承父级元素的字体大小。比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 emrem特点rem是CSS3新增的一个相对单位(root em，根em)。这个单位与em有什",
      "published": true,
      "content": "\n### PX特点\n\nIE无法调整那些使用px作为单位的字体大小;\n\n### EM特点\n\nem的值并不是固定的;\n\nem会继承父级元素的字体大小。\n\n比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 em\n\n### rem特点\n\nrem是CSS3新增的一个相对单位(root em，根em)。\n\n<!-- more -->\n\n- 这个单位与em有什么区别呢?\n\n使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素，比em容易计算。\n\n- 使用rem的问题\n\nIE8及更早版本不支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。\n\n### 个人建议\n\n同时使用rem和px，使用px只是为了兼容ie6-ie8这些不支持rem的浏览器\n\n具体实现\n\n根元素设置62.5%\n\n比如\n\n```css\n html{\nfont-size:62.5%; /* 10÷16=62.5% */\n}\nbody{\nfont-size:12px;\nfont-size:1.2rem ; /* 12÷10=1.2 */\n}\np{\nfont-size:14px;\nfont-size:1.4rem;\n}\n```",
      "mdContent": "<h3 id=\"toc-cba1f6\">PX特点</h3>\n<p>IE无法调整那些使用px作为单位的字体大小;</p>\n<h3 id=\"toc-37eebb\">EM特点</h3>\n<p>em的值并不是固定的;</p>\n<p>em会继承父级元素的字体大小。</p>\n<p>比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 em</p>\n<h3 id=\"toc-8e786e\">rem特点</h3>\n<p>rem是CSS3新增的一个相对单位(root em，根em)。</p>\n<!-- more -->\n\n<ul>\n<li>这个单位与em有什么区别呢?</li>\n</ul>\n<p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素，比em容易计算。</p>\n<ul>\n<li>使用rem的问题</li>\n</ul>\n<p>IE8及更早版本不支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。</p>\n<h3 id=\"toc-84672b\">个人建议</h3>\n<p>同时使用rem和px，使用px只是为了兼容ie6-ie8这些不支持rem的浏览器</p>\n<p>具体实现</p>\n<p>根元素设置62.5%</p>\n<p>比如</p>\n<pre><code class=\"hljs lang-css\"> <span class=\"hljs-selector-tag\">html</span>{\n<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">62.5%</span>; <span class=\"hljs-comment\">/* 10÷16=62.5% */</span>\n}\n<span class=\"hljs-selector-tag\">body</span>{\n<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">12px</span>;\n<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">1.2rem</span> ; <span class=\"hljs-comment\">/* 12÷10=1.2 */</span>\n}\n<span class=\"hljs-selector-tag\">p</span>{\n<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">14px</span>;\n<span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">1.4rem</span>;\n}\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-cba1f6\">PX特点</a></li>\n<li><a href=\"#toc-37eebb\">EM特点</a></li>\n<li><a href=\"#toc-8e786e\">rem特点</a></li>\n<li><a href=\"#toc-84672b\">个人建议</a></li>\n</ul>\n",
      "url": "shen-ru-fen-xi-css-zhong-dan-wei-px-he-emrem-de-qu-bie",
      "created_timestamp": 1493499981000,
      "updated_timestamp": 1493499981000,
      "symbolsCount": 1237
    }
  ],
  "pages": [
    {
      "id": "1ef3badd-688b-6840-a314-68e38f242798",
      "title": "uuice-doc",
      "alias": "uuice-doc",
      "cover": "",
      "created_time": "2024-07-06T23:38:48.000Z",
      "updated_time": "2024-07-06T23:38:48.000Z",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": true,
      "content": "\n### uuice 文档\n\n- <a href=\"/introduction\" target=\"_blank\">系统介绍</a>\n- <a href=\"/getting-started\" target=\"_blank\">入门</a>\n  - <a href=\"/getting-started#prepare\" target=\"_blank\">写在前面</a>\n  - <a href=\"/getting-started#install\" target=\"_blank\">安装部署</a>\n  - <a href=\"/getting-started#config\" target=\"_blank\">配置参考</a>\n  - <a href=\"/getting-started#upgrade\" target=\"_blank\">版本升级</a>\n- <a href=\"/user-guide\" target=\"_blank\">用户指南</a>\n  - <a href=\"/user-guide#index\" target=\"_blank\">操作手册</a>\n  - <a href=\"/user-guide#markdown\" target=\"_blank\">Markdown 语法</a>\n- <a href=\"/developer-guide\" target=\"_blank\">系统开发</a>\n  - <a href=\"/developer-guide#structure\" target=\"_blank\">系统结构</a>\n  - <a href=\"/developer-guide#code-style\" target=\"_blank\">代码风格</a>\n  - <a href=\"/developer-guide#rest-api\" target=\"_blank\">Rest Api</a>\n- <a href=\"/template-guide\" target=\"_blank\">主题相关</a>\n  - <a href=\"/template-guide#prepare\" target=\"_blank\">准备工作</a>\n  - <a href=\"/template-guide#config\" target=\"_blank\">配置文件</a>\n  - <a href=\"/template-guide#global-variable\" target=\"_blank\">全局变量</a>\n  - <a href=\"/template-guide#global-filter\" target=\"_blank\">全局过滤器</a>\n  - <a href=\"/template-guide#global-macro\" target=\"_blank\">全局宏模板</a>\n  - <a href=\"/template-guide#global-tag\" target=\"_blank\">全局标签</a>\n- <a href=\"/question\" target=\"_blank\">常见问题</a>\n  - <a href=\"/question#system\" target=\"_blank\">系统相关</a>\n  - <a href=\"/question#template\" target=\"_blank\">模板相关</a>\n",
      "mdContent": "<h3 id=\"toc-478708\">uuice 文档</h3>\n<ul>\n<li><a href=\"/introduction\" target=\"_blank\">系统介绍</a></li>\n<li><a href=\"/getting-started\" target=\"_blank\">入门</a><ul>\n<li><a href=\"/getting-started#prepare\" target=\"_blank\">写在前面</a></li>\n<li><a href=\"/getting-started#install\" target=\"_blank\">安装部署</a></li>\n<li><a href=\"/getting-started#config\" target=\"_blank\">配置参考</a></li>\n<li><a href=\"/getting-started#upgrade\" target=\"_blank\">版本升级</a></li>\n</ul>\n</li>\n<li><a href=\"/user-guide\" target=\"_blank\">用户指南</a><ul>\n<li><a href=\"/user-guide#index\" target=\"_blank\">操作手册</a></li>\n<li><a href=\"/user-guide#markdown\" target=\"_blank\">Markdown 语法</a></li>\n</ul>\n</li>\n<li><a href=\"/developer-guide\" target=\"_blank\">系统开发</a><ul>\n<li><a href=\"/developer-guide#structure\" target=\"_blank\">系统结构</a></li>\n<li><a href=\"/developer-guide#code-style\" target=\"_blank\">代码风格</a></li>\n<li><a href=\"/developer-guide#rest-api\" target=\"_blank\">Rest Api</a></li>\n</ul>\n</li>\n<li><a href=\"/template-guide\" target=\"_blank\">主题相关</a><ul>\n<li><a href=\"/template-guide#prepare\" target=\"_blank\">准备工作</a></li>\n<li><a href=\"/template-guide#config\" target=\"_blank\">配置文件</a></li>\n<li><a href=\"/template-guide#global-variable\" target=\"_blank\">全局变量</a></li>\n<li><a href=\"/template-guide#global-filter\" target=\"_blank\">全局过滤器</a></li>\n<li><a href=\"/template-guide#global-macro\" target=\"_blank\">全局宏模板</a></li>\n<li><a href=\"/template-guide#global-tag\" target=\"_blank\">全局标签</a></li>\n</ul>\n</li>\n<li><a href=\"/question\" target=\"_blank\">常见问题</a><ul>\n<li><a href=\"/question#system\" target=\"_blank\">系统相关</a></li>\n<li><a href=\"/question#template\" target=\"_blank\">模板相关</a></li>\n</ul>\n</li>\n</ul>\n",
      "toc": "<ul>\n<li><a href=\"#toc-478708\">uuice 文档</a></li>\n</ul>\n",
      "url": "uuice-doc",
      "created_timestamp": 1720309128000,
      "updated_timestamp": 1720309128000,
      "symbolsCount": 1543
    },
    {
      "id": "1ef3b581-c05d-65c0-ba84-f6ba83dd79a5",
      "title": "about",
      "alias": "about",
      "cover": "",
      "created_time": "2017-04-28T15:04:10.000Z",
      "updated_time": "2017-04-28T15:04:10.000Z",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": true,
      "content": "\n## 关于我\n\n- 我是一位专注于前端领域的开发者。我在工作中经常遇到各种问题，并且喜欢记录下来，以便日后复盘和分享经验。\n- 我也整理了一些学习笔记，包括学习过程中的重点、难点以及解决方案，这些笔记对我个人的学习和成长起到了很大的帮助。\n\n## 我的主要技术栈包括\n\n- Vue、Vue Router、Vuex、Axios、ES6、Sass/Less：这些是我常用的前端技术，用于构建现代化的、响应式的 Web 应用程序。\n- Angular、RxJS（目前在工作中使用）：使用 Angular 框架和 RxJS 响应式编程库。\n- Node.js：在后端开发中使用 Node.js，并熟悉 Express、Koa、Nestjs 等框架。这使我能够构建高性能的服务器端应用程序。\n- MySQL、Redis：熟悉关系型数据库 MySQL 和内存缓存数据库 Redis，用于数据存储和缓存。\n- ECharts：使用 ECharts 来开发可视化大屏，通过数据可视化的方式向用户展示复杂的信息和趋势。\n- Electron：使用 Electron 框架来开发桌面端应用程序，将前端技术运用到桌面应用的开发中。\n",
      "mdContent": "<h2 id=\"toc-6483e3\">关于我</h2>\n<ul>\n<li>我是一位专注于前端领域的开发者。我在工作中经常遇到各种问题，并且喜欢记录下来，以便日后复盘和分享经验。</li>\n<li>我也整理了一些学习笔记，包括学习过程中的重点、难点以及解决方案，这些笔记对我个人的学习和成长起到了很大的帮助。</li>\n</ul>\n<h2 id=\"toc-b868c8\">我的主要技术栈包括</h2>\n<ul>\n<li>Vue、Vue Router、Vuex、Axios、ES6、Sass/Less：这些是我常用的前端技术，用于构建现代化的、响应式的 Web 应用程序。</li>\n<li>Angular、RxJS（目前在工作中使用）：使用 Angular 框架和 RxJS 响应式编程库。</li>\n<li>Node.js：在后端开发中使用 Node.js，并熟悉 Express、Koa、Nestjs 等框架。这使我能够构建高性能的服务器端应用程序。</li>\n<li>MySQL、Redis：熟悉关系型数据库 MySQL 和内存缓存数据库 Redis，用于数据存储和缓存。</li>\n<li>ECharts：使用 ECharts 来开发可视化大屏，通过数据可视化的方式向用户展示复杂的信息和趋势。</li>\n<li>Electron：使用 Electron 框架来开发桌面端应用程序，将前端技术运用到桌面应用的开发中。</li>\n</ul>\n",
      "toc": "<ul>\n<li><a href=\"#toc-6483e3\">关于我</a></li>\n<li><a href=\"#toc-b868c8\">我的主要技术栈包括</a></li>\n</ul>\n",
      "url": "about",
      "created_timestamp": 1493391850000,
      "updated_timestamp": 1493391850000,
      "symbolsCount": 591
    },
    {
      "id": "1ef39ae2-3873-6150-b043-893f5d187aa3",
      "title": "introduction",
      "alias": "introduction",
      "cover": "",
      "created_time": "2024-07-04T10:35:55.000Z",
      "updated_time": "2024-07-04T10:35:55.000Z",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": true,
      "content": "\n## 项目介绍\n\n### 为什么会有这个项目\n\n原有的博客使用的是 Halo，但由于 Halo 是使用 Java 编写的，我对 Java 开发不熟悉，因此无法进行二次开发。此外，Halo 的主题开发也相对不太方便。因此，我决定寻找一个新的博客系统。\n\n在对比了 WordPress 和 Hexo 等博客系统之后，我发现 WordPress 的复杂度过高，而 Hexo 虽然简单，但灵活性又不够。因此，我决定自己开发一个博客系统。\n\n我参考了 Hexo 的思路，根据 Markdown 文件生成了一个 data.json 文件，并使用 Node.js 实时检索数据，并将其渲染为 HTML。我还封装了一些常用的模板标签和 API，以提供更便捷的使用方式。\n\n通过这个项目，我希望能够完善和美化博客系统，使其更符合我的需求和审美。这样，我就能够更自由地表达和展示我的想法和内容了。\n\n### 开发这个系统要达到什么目标\n\n传统的博客系统通常都包含文章、页面、配置等基本内容，这与 Hexo 是一致的。因此，在开发过程中，我采用了类似 Hexo 的开发思路，包括文件目录结构、一些模板标签等方面的设计。\n\n为了方便迁移已有的博客，我也保持了系统路由与 Halo 一致，以确保迁移后的博客路径和原始的博客保持一致。这样，读者和搜索引擎可以继续访问原有的博客内容，而无需修改书签或链接。\n\n在基于 Hexo 的基础上，我进一步添加了 API 模块，提供数据查询的功能。这样，可以通过 API 获取博客的相关数据，如文章列表、分类、标签、页面等，以便实现更丰富的功能和定制化需求。\n\n### 这个博客系统包括以下组件\n\n- uuice-cli：这是一个命令行工具，提供了几个命令来简化博客内容的创建和管理：\n\n  - uuice new 命令用于创建文章（post）和页面（page）。\n  - uuice gen 命令用于生成 data.json 文件，其中包含了所有博客内容的元数据。\n\n- uuice server 命令用于启动 Node.js 服务器。\n  uuice-server：这是一个 Node.js 服务器，它由三个模块组成：\n\n  - /api 模块：该模块提供了用于查询所有内容的 API 接口。通过这些接口，可以获取博客的文章列表、页面内容、标签、分类等信息。\n  - /front 模块：该模块用于动态生成前端的 HTML 页面。它接收来自前端的请求，并根据请求的内容动态渲染相应的页面，以实现更灵活的界面展示和交互效果。\n  - uuice-core：这是一个核心模块，封装了模板引擎所需的标签、过滤器等功能。它还提供了系统所需的所有查询服务，供 /api 和 /front 模块使用。该模块负责处理数据的获取、过滤和转换，以便提供给前端模块和 API 接口使用。\n\n通过这些组件，博客系统能够通过命令行工具创建和管理博客内容，通过 Node.js 服务器提供查询接口和动态生成的前端页面。同时，uuice-core 模块封装了模板引擎所需的功能，并提供系统查询服务，以支持 API 和前端模块的使用。您可以在这个基础上进行完善，以满足更多的需求。\n",
      "mdContent": "<h2 id=\"toc-c58688\">项目介绍</h2>\n<h3 id=\"toc-716aa0\">为什么会有这个项目</h3>\n<p>原有的博客使用的是 Halo，但由于 Halo 是使用 Java 编写的，我对 Java 开发不熟悉，因此无法进行二次开发。此外，Halo 的主题开发也相对不太方便。因此，我决定寻找一个新的博客系统。</p>\n<p>在对比了 WordPress 和 Hexo 等博客系统之后，我发现 WordPress 的复杂度过高，而 Hexo 虽然简单，但灵活性又不够。因此，我决定自己开发一个博客系统。</p>\n<p>我参考了 Hexo 的思路，根据 Markdown 文件生成了一个 data.json 文件，并使用 Node.js 实时检索数据，并将其渲染为 HTML。我还封装了一些常用的模板标签和 API，以提供更便捷的使用方式。</p>\n<p>通过这个项目，我希望能够完善和美化博客系统，使其更符合我的需求和审美。这样，我就能够更自由地表达和展示我的想法和内容了。</p>\n<h3 id=\"toc-2995f2\">开发这个系统要达到什么目标</h3>\n<p>传统的博客系统通常都包含文章、页面、配置等基本内容，这与 Hexo 是一致的。因此，在开发过程中，我采用了类似 Hexo 的开发思路，包括文件目录结构、一些模板标签等方面的设计。</p>\n<p>为了方便迁移已有的博客，我也保持了系统路由与 Halo 一致，以确保迁移后的博客路径和原始的博客保持一致。这样，读者和搜索引擎可以继续访问原有的博客内容，而无需修改书签或链接。</p>\n<p>在基于 Hexo 的基础上，我进一步添加了 API 模块，提供数据查询的功能。这样，可以通过 API 获取博客的相关数据，如文章列表、分类、标签、页面等，以便实现更丰富的功能和定制化需求。</p>\n<h3 id=\"toc-a3f08b\">这个博客系统包括以下组件</h3>\n<ul>\n<li><p>uuice-cli：这是一个命令行工具，提供了几个命令来简化博客内容的创建和管理：</p>\n<ul>\n<li>uuice new 命令用于创建文章（post）和页面（page）。</li>\n<li>uuice gen 命令用于生成 data.json 文件，其中包含了所有博客内容的元数据。</li>\n</ul>\n</li>\n<li><p>uuice server 命令用于启动 Node.js 服务器。\nuuice-server：这是一个 Node.js 服务器，它由三个模块组成：</p>\n<ul>\n<li>/api 模块：该模块提供了用于查询所有内容的 API 接口。通过这些接口，可以获取博客的文章列表、页面内容、标签、分类等信息。</li>\n<li>/front 模块：该模块用于动态生成前端的 HTML 页面。它接收来自前端的请求，并根据请求的内容动态渲染相应的页面，以实现更灵活的界面展示和交互效果。</li>\n<li>uuice-core：这是一个核心模块，封装了模板引擎所需的标签、过滤器等功能。它还提供了系统所需的所有查询服务，供 /api 和 /front 模块使用。该模块负责处理数据的获取、过滤和转换，以便提供给前端模块和 API 接口使用。</li>\n</ul>\n</li>\n</ul>\n<p>通过这些组件，博客系统能够通过命令行工具创建和管理博客内容，通过 Node.js 服务器提供查询接口和动态生成的前端页面。同时，uuice-core 模块封装了模板引擎所需的功能，并提供系统查询服务，以支持 API 和前端模块的使用。您可以在这个基础上进行完善，以满足更多的需求。</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-c58688\">项目介绍</a><ul>\n<li><a href=\"#toc-716aa0\">为什么会有这个项目</a></li>\n<li><a href=\"#toc-2995f2\">开发这个系统要达到什么目标</a></li>\n<li><a href=\"#toc-a3f08b\">这个博客系统包括以下组件</a></li>\n</ul>\n</li>\n</ul>\n",
      "url": "introduction",
      "created_timestamp": 1720089355000,
      "updated_timestamp": 1720089355000,
      "symbolsCount": 1446
    },
    {
      "id": "1ef39ae3-b52c-6e70-9811-148fdbae59a6",
      "title": "development",
      "alias": "development",
      "cover": "",
      "created_time": "2024-07-04T10:36:35.000Z",
      "updated_time": "2024-07-04T10:36:35.000Z",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": true,
      "content": "",
      "mdContent": "",
      "toc": "",
      "url": "development",
      "created_timestamp": 1720089395000,
      "updated_timestamp": 1720089395000,
      "symbolsCount": 0
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 系统结构\n",
      "mdContent": "<h1 id=\"toc-269e42\">系统结构</h1>\n",
      "toc": "<ul>\n<li><a href=\"#toc-269e42\">系统结构</a></li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 28
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# Rest Api\n\n<br>\n<br>\n\n## Admin\n\n- <a href=\"/doc/admin/api\" title=\"admin api list\" target=\"_blank\">Admin Api</a>\n  <br>\n  <br>\n\n## Content\n\n- <a href=\"/doc/content/api\" title=\"content api list\" target=\"_blank\">Content Api</a>\n",
      "mdContent": "<h1 id=\"restapi\">Rest Api</h1>\n<br>\n<br>\n\n<h2 id=\"admin\">Admin</h2>\n<ul>\n<li><a href=\"/doc/admin/api\" title=\"admin api list\" target=\"_blank\">Admin Api</a><br>\n<br></li>\n</ul>\n<h2 id=\"content\">Content</h2>\n<ul>\n<li><a href=\"/doc/content/api\" title=\"content api list\" target=\"_blank\">Content Api</a></li>\n</ul>\n",
      "toc": "<ul>\n<li><a href=\"#restapi\">Rest Api</a><ul>\n<li><a href=\"#admin\">Admin</a></li>\n<li><a href=\"#content\">Content</a></li>\n</ul>\n</li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 280
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 代码风格\n\n## eslint\n\n使用 eslint 进行格式化\n\n具体查看以下配置文件\n\n- .eslintrc.js\n- .eslintignore\n\n## editorconfig\n\n提供了 `.editorconfig` 配置文件用于控制编辑器的代码样式\n\nwebstorm 默认支持\n\nvscode 需要安装 `EditorConfig for VS Code` 插件\n\n## 其他\n\n后台服务（Nest.js）和后台管理系统（Angular）共用配置\n",
      "mdContent": "<h1 id=\"toc-d230d1\">代码风格</h1>\n<h2 id=\"eslint\">eslint</h2>\n<p>使用 eslint 进行格式化</p>\n<p>具体查看以下配置文件</p>\n<ul>\n<li>.eslintrc.js</li>\n<li>.eslintignore</li>\n</ul>\n<h2 id=\"editorconfig\">editorconfig</h2>\n<p>提供了 <code>.editorconfig</code> 配置文件用于控制编辑器的代码样式</p>\n<p>webstorm 默认支持</p>\n<p>vscode 需要安装 <code>EditorConfig for VS Code</code> 插件</p>\n<h2 id=\"toc-0d98c7\">其他</h2>\n<p>后台服务（Nest.js）和后台管理系统（Angular）共用配置</p>\n",
      "toc": "<ul>\n<li><a href=\"#toc-d230d1\">代码风格</a><ul>\n<li><a href=\"#eslint\">eslint</a></li>\n<li><a href=\"#editorconfig\">editorconfig</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n</li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 371
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 模板标签\n",
      "mdContent": "<h1 id=\"toc-d8605e\">模板标签</h1>\n",
      "toc": "<ul>\n<li><a href=\"#toc-d8605e\">模板标签</a></li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 28
    },
    {
      "id": "1ef3baae-d324-6af0-b942-3a6175925acc",
      "title": "prepare",
      "alias": "prepare",
      "cover": "",
      "created_time": "2024-07-06T23:17:58.000Z",
      "updated_time": "2024-07-06T23:17:58.000Z",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": true,
      "content": "\n# 准备工作\n\n## 注意事项\n\n`nunjucks`并不是在沙盒中运行的，所以使用用户定义的模板可能存在风险。这可能导致的风险有：在服务器上运行时敏感数据被窃取，或是在客户端运行时遭遇跨站脚本攻击。\n\n如下代码可以获取到 `nodejs`的全局变量\n\n```\n{{ (0).toString.constructor(\"return global.process.versions\")() | dump | safe }}\n```\n\n因此在系统开发中，应该对用户输入的内容进行过滤、转义， 避免直接渲染用户输入的模板代码， 系统底层也已经开启了全局转义\n\n## 模板引擎\n\n模板引擎使用了 `Nunjucks`\n\n### Nunjucks 文档地址\n\n<a href=\"https://mozilla.github.io/nunjucks/cn/getting-started.html\" title=\"Nunjucks\" target=\"_blank\">Nunjucks 文档地址</a>\n\n### 文件后缀名\n\n文件后缀名默认使用 `.njk`, 在 vscode 中搜索 `Nunjucks` 安装对应插件，可以实现代码高亮\n\n### 模板调试\n\n模板调试主要有两种方式:\n\n- 调用自定义的宏模板，系统已经有内置， 具体使用方式查看 `全局宏模板 - console` 部分 [传送门]()\n- 调用自定义的过滤器， 系统已经有内置， 具体使用方式查看 `全局过滤器 - console` 部分 [传送门]()\n\n### 自定义过滤器 （Custom Filters）\n\n在 `src/server/initView/filter` 中添加自定义过滤器， 然后在 `src/server/initView/index.ts` 中注册\n\n注册后就可以在模板中使用\n\n#### Custom Filters 相关文档\n\n<a href=\"https://mozilla.github.io/nunjucks/cn/api#custom-filters\" title=\"Custom Filters\" target=\"_blank\">Custom Filters 文档地址</a>\n\n### 自定义标签 （Custom Tags）\n\n在 `src/server/initView/tag` 中添加自定义标签， 然后在 `src/server/initView/index.ts` 中注册\n\n#### 注意事项\n\n自定义标签可以添加参数多个参数中间用 `,` 隔开\n\n如获取分类列表的标签\n\n```\n{% CategoryList %}\n    <ul>\n    {% for cate in list %}\n    {{cate | dump | console('page', 'log') | safe}}\n      <li>\n        {{ cate.id }}:{{ cate.title}}:{{cate.url}}\n      </li>\n    {% endfor %}\n  </ul>\n    {{ list | dump | console('result', 'table') | safe}}\n{% endCategoryList %}\n```\n\n#### 有闭合标签\n\n可以参考 `tagTest.ts`\n\n#### 使用方式\n\n```\n{% TagTest list=\"key1=1,key2=2,key3=3,key4=4\" %}\n  <ul>\n    {% for val in list %}\n      <li>\n        {{ val.id }}:{{ val.city}}\n      </li>\n    {% endfor %}\n  </ul>\n{% endTagTest %}\n```\n\n#### 无闭合标签\n\n可以参考 `tagTest2.ts`\n\n#### 使用方式\n\n```\n{% TagTest2 name=\"ddd\" %}\n```\n\n#### Custom Tags 相关文档\n\n<a href=\"https://mozilla.github.io/nunjucks/cn/api.html#custom-tags\" title=\"Custom Tags\" target=\"_blank\">Custom Tags 文档地址</a>\n\n### 渲染用户自定义模版\n\n#### 获取模版引擎实例\n\n模版引擎实例挂载在 res.app 上面\n\n```js\nconst viewInstance = res.app.get('viewInstance')res.app.get('viewInstance')\n```\n\n#### 调用 renderString 方法渲染\n\n```js\nviewInstance.renderString(\n  `{% TagTest2 name=\"ddd\" %} <br/> {% TagTest2 name=\"aaa\" %}Hello {{ username }}\n    {% TagTest list=\"key1=1,key2=2,key3=3,key4=4\" %}\n    <ul>\n      {% for val in list %}\n    <li>\n      {{ val.id }}:{{ val.city}}\n    </li>\n    {% endfor %}\n    </ul>\n    {% endTagTest %}`,\n  { username: 'James' }\n)\n```\n",
      "mdContent": "<h1 id=\"toc-882108\">准备工作</h1>\n<h2 id=\"toc-1bbbb2\">注意事项</h2>\n<p><code>nunjucks</code>并不是在沙盒中运行的，所以使用用户定义的模板可能存在风险。这可能导致的风险有：在服务器上运行时敏感数据被窃取，或是在客户端运行时遭遇跨站脚本攻击。</p>\n<p>如下代码可以获取到 <code>nodejs</code>的全局变量</p>\n<pre><code class=\"hljs lang-handlebars\"><span class=\"hljs-template-variable\">{{ (<span class=\"hljs-name\">0</span>).toString.constructor(<span class=\"hljs-name\">&quot;return global.process.versions&quot;</span>)() | dump | safe }}</span><span class=\"language-xml\">\n</span></code></pre>\n<p>因此在系统开发中，应该对用户输入的内容进行过滤、转义， 避免直接渲染用户输入的模板代码， 系统底层也已经开启了全局转义</p>\n<h2 id=\"toc-97c418\">模板引擎</h2>\n<p>模板引擎使用了 <code>Nunjucks</code></p>\n<h3 id=\"toc-78cef1\">Nunjucks 文档地址</h3>\n<p><a href=\"https://mozilla.github.io/nunjucks/cn/getting-started.html\" title=\"Nunjucks\" target=\"_blank\">Nunjucks 文档地址</a></p>\n<h3 id=\"toc-eee69f\">文件后缀名</h3>\n<p>文件后缀名默认使用 <code>.njk</code>, 在 vscode 中搜索 <code>Nunjucks</code> 安装对应插件，可以实现代码高亮</p>\n<h3 id=\"toc-ab0f78\">模板调试</h3>\n<p>模板调试主要有两种方式:</p>\n<ul>\n<li>调用自定义的宏模板，系统已经有内置， 具体使用方式查看 <code>全局宏模板 - console</code> 部分 <a href=\"\">传送门</a></li>\n<li>调用自定义的过滤器， 系统已经有内置， 具体使用方式查看 <code>全局过滤器 - console</code> 部分 <a href=\"\">传送门</a></li>\n</ul>\n<h3 id=\"toc-c6057b\">自定义过滤器 （Custom Filters）</h3>\n<p>在 <code>src/server/initView/filter</code> 中添加自定义过滤器， 然后在 <code>src/server/initView/index.ts</code> 中注册</p>\n<p>注册后就可以在模板中使用</p>\n<h4 id=\"toc-cfbfb4\">Custom Filters 相关文档</h4>\n<p><a href=\"https://mozilla.github.io/nunjucks/cn/api#custom-filters\" title=\"Custom Filters\" target=\"_blank\">Custom Filters 文档地址</a></p>\n<h3 id=\"toc-756075\">自定义标签 （Custom Tags）</h3>\n<p>在 <code>src/server/initView/tag</code> 中添加自定义标签， 然后在 <code>src/server/initView/index.ts</code> 中注册</p>\n<h4 id=\"toc-1bbbb2\">注意事项</h4>\n<p>自定义标签可以添加参数多个参数中间用 <code>,</code> 隔开</p>\n<p>如获取分类列表的标签</p>\n<pre><code class=\"hljs lang-handlebars\"><span class=\"language-xml\">{% CategoryList %}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    {% for cate in list %}\n    </span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">cate</span> | dump | console(<span class=\"hljs-name\">&#x27;page&#x27;</span>, <span class=\"hljs-string\">&#x27;log&#x27;</span>) | safe}}</span><span class=\"language-xml\">\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n        </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">cate.id</span> }}</span><span class=\"language-xml\">:</span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">cate.title</span>}}</span><span class=\"language-xml\">:</span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">cate.url</span>}}</span><span class=\"language-xml\">\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    {% endfor %}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">list</span> | dump | console(<span class=\"hljs-name\">&#x27;result&#x27;</span>, <span class=\"hljs-string\">&#x27;table&#x27;</span>) | safe}}</span><span class=\"language-xml\">\n{% endCategoryList %}\n</span></code></pre>\n<h4 id=\"toc-23aa32\">有闭合标签</h4>\n<p>可以参考 <code>tagTest.ts</code></p>\n<h4 id=\"toc-a65304\">使用方式</h4>\n<pre><code class=\"hljs lang-django\"><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\">TagTest</span> list=&quot;key1=1,key2=2,key3=3,key4=4&quot; %}</span><span class=\"language-xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    </span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\"><span class=\"hljs-name\">for</span></span> val <span class=\"hljs-keyword\">in</span> list %}</span><span class=\"language-xml\">\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n        </span><span class=\"hljs-template-variable\">{{ val.id }}</span><span class=\"language-xml\">:</span><span class=\"hljs-template-variable\">{{ val.city}}</span><span class=\"language-xml\">\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    </span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\"><span class=\"hljs-name\">endfor</span></span> %}</span><span class=\"language-xml\">\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\">endTagTest</span> %}</span><span class=\"language-xml\">\n</span></code></pre>\n<h4 id=\"toc-1f18dd\">无闭合标签</h4>\n<p>可以参考 <code>tagTest2.ts</code></p>\n<h4 id=\"toc-a65304\">使用方式</h4>\n<pre><code class=\"hljs lang-twig\"><span class=\"hljs-template-tag\">{%</span> <span class=\"hljs-name\">TagTest</span><span class=\"hljs-number\">2</span> name=<span class=\"hljs-string\">&quot;ddd&quot;</span> <span class=\"hljs-template-tag\">%}</span><span class=\"language-xml\">\n</span></code></pre>\n<h4 id=\"toc-71e319\">Custom Tags 相关文档</h4>\n<p><a href=\"https://mozilla.github.io/nunjucks/cn/api.html#custom-tags\" title=\"Custom Tags\" target=\"_blank\">Custom Tags 文档地址</a></p>\n<h3 id=\"toc-5b4759\">渲染用户自定义模版</h3>\n<h4 id=\"toc-4b6d8f\">获取模版引擎实例</h4>\n<p>模版引擎实例挂载在 res.app 上面</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">const</span> viewInstance = res.<span class=\"hljs-property\">app</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;viewInstance&#x27;</span>)res.<span class=\"hljs-property\">app</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;viewInstance&#x27;</span>)\n</code></pre>\n<h4 id=\"toc-fa56c4\">调用 renderString 方法渲染</h4>\n<pre><code class=\"hljs lang-js\">viewInstance.<span class=\"hljs-title function_\">renderString</span>(\n  <span class=\"hljs-string\">`{% TagTest2 name=&quot;ddd&quot; %} &lt;br/&gt; {% TagTest2 name=&quot;aaa&quot; %}Hello {{ username }}\n    {% TagTest list=&quot;key1=1,key2=2,key3=3,key4=4&quot; %}\n    &lt;ul&gt;\n      {% for val in list %}\n    &lt;li&gt;\n      {{ val.id }}:{{ val.city}}\n    &lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n    {% endTagTest %}`</span>,\n  { <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;James&#x27;</span> }\n)\n</code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-882108\">准备工作</a><ul>\n<li><a href=\"#toc-1bbbb2\">注意事项</a></li>\n<li><a href=\"#toc-97c418\">模板引擎</a><ul>\n<li><a href=\"#toc-78cef1\">Nunjucks 文档地址</a></li>\n<li><a href=\"#toc-eee69f\">文件后缀名</a></li>\n<li><a href=\"#toc-ab0f78\">模板调试</a></li>\n<li><a href=\"#toc-c6057b\">自定义过滤器 （Custom Filters）</a><ul>\n<li><a href=\"#toc-cfbfb4\">Custom Filters 相关文档</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-756075\">自定义标签 （Custom Tags）</a><ul>\n<li><a href=\"#toc-1bbbb2\">注意事项</a></li>\n<li><a href=\"#toc-23aa32\">有闭合标签</a></li>\n<li><a href=\"#toc-a65304\">使用方式</a></li>\n<li><a href=\"#toc-1f18dd\">无闭合标签</a></li>\n<li><a href=\"#toc-a65304\">使用方式</a></li>\n<li><a href=\"#toc-71e319\">Custom Tags 相关文档</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-5b4759\">渲染用户自定义模版</a><ul>\n<li><a href=\"#toc-4b6d8f\">获取模版引擎实例</a></li>\n<li><a href=\"#toc-fa56c4\">调用 renderString 方法渲染</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
      "url": "prepare",
      "created_timestamp": 1720307878000,
      "updated_timestamp": 1720307878000,
      "symbolsCount": 5602
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 全局变量\n",
      "mdContent": "<h1 id=\"toc-fcfffb\">全局变量</h1>\n",
      "toc": "<ul>\n<li><a href=\"#toc-fcfffb\">全局变量</a></li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 28
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 全局宏模板\n\n## Console\n\n通过添加 script 代码块，打印模板内容到浏览器控制台，主要用于调试\n\n注意: 仅在开发环境中生效\n\n### 参数\n\n- data: 属性内容\n- key: 属性名\n- type: <span>(可选)</span>浏览器 console 的所有方法都可以用，常用的 type 如下:\n  - log 打印内容的通用方法 **（默认）**\n  - info 打印资讯类说明信息\n  - table 将列表型的数据打印成表格\n  - warn 打印一个警告信息\n  - error 打印一条错误信息\n\n### 推荐使用方式\n\n在 layout.njk 中引入 `utils-macro.njk`, 然后在需要的地方调用\n列表数据建议用`table`打印， 输出更直观\n其他可以用 log、info 打印\n\n### 引入\n\n```\n{% import \"../helper/utils-macro.njk\" as utils %}\n```\n\n### 调用\n\n```\n{{ utils.console(message, '/message/') }}\n{{ utils.console(result, '/result/', 'table') }}\n```\n",
      "mdContent": "<h1 id=\"toc-1dd5ab\">全局宏模板</h1>\n<h2 id=\"console\">Console</h2>\n<p>通过添加 script 代码块，打印模板内容到浏览器控制台，主要用于调试</p>\n<p>注意: 仅在开发环境中生效</p>\n<h3 id=\"toc-3d0a2d\">参数</h3>\n<ul>\n<li>data: 属性内容</li>\n<li>key: 属性名</li>\n<li>type: <span>(可选)</span>浏览器 console 的所有方法都可以用，常用的 type 如下:<ul>\n<li>log 打印内容的通用方法 <strong>（默认）</strong></li>\n<li>info 打印资讯类说明信息</li>\n<li>table 将列表型的数据打印成表格</li>\n<li>warn 打印一个警告信息</li>\n<li>error 打印一条错误信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"toc-4bde44\">推荐使用方式</h3>\n<p>在 layout.njk 中引入 <code>utils-macro.njk</code>, 然后在需要的地方调用\n列表数据建议用<code>table</code>打印， 输出更直观\n其他可以用 log、info 打印</p>\n<h3 id=\"toc-e7fc50\">引入</h3>\n<pre><code class=\"hljs lang-capnproto\">{% <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;../helper/utils-macro.njk&quot;</span> <span class=\"hljs-keyword\">as</span> utils %}\n</code></pre>\n<h3 id=\"toc-97d29d\">调用</h3>\n<pre><code class=\"hljs lang-handlebars\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">utils.console</span>(<span class=\"hljs-name\">message</span>, <span class=\"hljs-string\">&#x27;/message/&#x27;</span>) }}</span><span class=\"language-xml\">\n</span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">utils.console</span>(<span class=\"hljs-name\">result</span>, <span class=\"hljs-string\">&#x27;/result/&#x27;</span>, <span class=\"hljs-string\">&#x27;table&#x27;</span>) }}</span><span class=\"language-xml\">\n</span></code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-1dd5ab\">全局宏模板</a><ul>\n<li><a href=\"#console\">Console</a><ul>\n<li><a href=\"#toc-3d0a2d\">参数</a></li>\n<li><a href=\"#toc-4bde44\">推荐使用方式</a></li>\n<li><a href=\"#toc-e7fc50\">引入</a></li>\n<li><a href=\"#toc-97d29d\">调用</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 1312
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "# 全局过滤器\n\n## Console\n\n配合`dump`、`safe` 两个过滤器，打印模板内容到浏览器控制台，主要用于调试\n\n注意: 仅在开发环境中生效\n\n### 参数\n\n- key: 属性名\n- type: <span>(可选)</span>浏览器 console 的所有方法都可以用，常用的 type 如下:\n  - log 打印内容的通用方法 **（默认）**\n  - info 打印资讯类说明信息\n  - table 将列表型的数据打印成表格\n  - warn 打印一个警告信息\n  - error 打印一条错误信息\n\n### 推荐使用方式\n\n`Console` 默认加载到了系统中， 可以直接使用\n\n列表数据建议用`table`打印， 输出更直观\n\n其他可以用 log、info 打印\n\n### 调用\n\n```\n{{ message | dump | console('message') | safe}}\n{{ result | dump | console('result', 'table') | safe}}\n```\n",
      "mdContent": "<h1 id=\"toc-3e07a2\">全局过滤器</h1>\n<h2 id=\"console\">Console</h2>\n<p>配合<code>dump</code>、<code>safe</code> 两个过滤器，打印模板内容到浏览器控制台，主要用于调试</p>\n<p>注意: 仅在开发环境中生效</p>\n<h3 id=\"toc-3d0a2d\">参数</h3>\n<ul>\n<li>key: 属性名</li>\n<li>type: <span>(可选)</span>浏览器 console 的所有方法都可以用，常用的 type 如下:<ul>\n<li>log 打印内容的通用方法 <strong>（默认）</strong></li>\n<li>info 打印资讯类说明信息</li>\n<li>table 将列表型的数据打印成表格</li>\n<li>warn 打印一个警告信息</li>\n<li>error 打印一条错误信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"toc-4bde44\">推荐使用方式</h3>\n<p><code>Console</code> 默认加载到了系统中， 可以直接使用</p>\n<p>列表数据建议用<code>table</code>打印， 输出更直观</p>\n<p>其他可以用 log、info 打印</p>\n<h3 id=\"toc-97d29d\">调用</h3>\n<pre><code class=\"hljs lang-handlebars\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">message</span> | dump | console(<span class=\"hljs-name\">&#x27;message&#x27;</span>) | safe}}</span><span class=\"language-xml\">\n</span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span> | dump | console(<span class=\"hljs-name\">&#x27;result&#x27;</span>, <span class=\"hljs-string\">&#x27;table&#x27;</span>) | safe}}</span><span class=\"language-xml\">\n</span></code></pre>\n",
      "toc": "<ul>\n<li><a href=\"#toc-3e07a2\">全局过滤器</a><ul>\n<li><a href=\"#console\">Console</a><ul>\n<li><a href=\"#toc-3d0a2d\">参数</a></li>\n<li><a href=\"#toc-4bde44\">推荐使用方式</a></li>\n<li><a href=\"#toc-97d29d\">调用</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 1032
    },
    {
      "id": "",
      "title": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "",
      "mdContent": "",
      "toc": "",
      "url": "",
      "created_timestamp": 0,
      "updated_timestamp": 0,
      "symbolsCount": 0
    }
  ],
  "menuConfig": [
    {
      "title": "首页",
      "icon": "",
      "url": "/",
      "target": "_self"
    },
    {
      "title": "归档",
      "icon": "",
      "url": "/archives",
      "target": "_self"
    },
    {
      "title": "友情链接",
      "icon": "",
      "url": "/links",
      "target": "_self"
    },
    {
      "title": "关于博主",
      "icon": "",
      "url": "/about",
      "target": "_self"
    }
  ],
  "linkConfig": [
    {
      "title": "Fayfox",
      "icon": "",
      "url": "https://www.fayfox.com/",
      "type": "码畜"
    }
  ],
  "configConfig": {
    "title": "Fayfox",
    "icon": "",
    "url": "https://www.fayfox.com/",
    "type": "码畜"
  },
  "linkYmlConfig": [
    {
      "title": "Fayfox",
      "icon": "",
      "url": "https://www.fayfox.com/",
      "type": "码畜"
    }
  ],
  "configYmlConfig": {
    "title": "Fayfox",
    "icon": "",
    "url": "https://www.fayfox.com/",
    "type": "码畜"
  },
  "systemConfig": {
    "title": "轻盈的鱼",
    "subTitle": "幻想变成轻盈的鱼， 畅游在自由的海洋",
    "description": "幻想变成轻盈的鱼， 畅游在自由的海洋",
    "keywords": null,
    "author": "uuice",
    "favicon": null,
    "url": "https://uuice.com",
    "theme": "default",
    "beian": "浙ICP备13002567号-4",
    "banner": null,
    "rss": true,
    "sitemap": true,
    "setting": true,
    "avatar": "/assets/images/avatar.jpg"
  },
  "tags": [
    {
      "id": "93c190a7-c5b9-54c1-b946-f85a2e786118",
      "title": "Rxjs",
      "description": "Rxjs",
      "url": "rxjs"
    },
    {
      "id": "bd37f5ff-1d79-544d-98a3-2e1d711a7eed",
      "title": "Angular",
      "description": "Angular",
      "url": "angular"
    },
    {
      "id": "b21febf8-23ac-5655-b40f-9bcd74a0fa5c",
      "title": "pnpm",
      "description": "pnpm",
      "url": "pnpm"
    },
    {
      "id": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "title": "angular",
      "description": "angular",
      "url": "angular"
    },
    {
      "id": "c04ca4e2-f311-5a59-b10a-17ca8db6524e",
      "title": "directive",
      "description": "directive",
      "url": "directive"
    }
  ],
  "categories": [
    {
      "id": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "title": "notes",
      "description": "notes",
      "url": "notes"
    },
    {
      "id": "fbe30cce-885f-5935-93b1-a721fcaa2bab",
      "title": "http",
      "description": "http",
      "url": "http"
    },
    {
      "id": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "title": "javascript",
      "description": "javascript",
      "url": "javascript"
    },
    {
      "id": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "title": "nodejs",
      "description": "nodejs",
      "url": "nodejs"
    },
    {
      "id": "487c96eb-1cad-5636-be91-f57aff09f227",
      "title": "linux",
      "description": "linux",
      "url": "linux"
    },
    {
      "id": "db987ebd-5794-596c-a53b-37b8f9c5c93c",
      "title": "html",
      "description": "html",
      "url": "html"
    },
    {
      "id": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "title": "angular",
      "description": "angular",
      "url": "angular"
    },
    {
      "id": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "title": "canvas",
      "description": "canvas",
      "url": "canvas"
    },
    {
      "id": "d37f4904-cd43-5471-b39d-5d159141c14a",
      "title": "css",
      "description": "css",
      "url": "css"
    }
  ],
  "postCategories": [
    {
      "postId": "1ef3b5e4-51b0-6ce0-b727-e8921436fadf",
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "966bf8e5-839d-5685-912e-f1830cc20e9d"
    },
    {
      "postId": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "df721695-fbe5-5c68-8c84-235b795c76b7"
    },
    {
      "postId": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "categoryId": "fbe30cce-885f-5935-93b1-a721fcaa2bab",
      "id": "33c470d7-615a-5898-9bb1-830f3c8dd260"
    },
    {
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "623af1cc-50a2-59c6-ba07-b35b7fe3c4e4"
    },
    {
      "postId": "1ef3b5a2-b387-6370-adf2-057eb14ae353",
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "92432101-afaf-560f-8270-96e7cb4d6db7"
    },
    {
      "postId": "1ef3b5ed-f869-6b00-8f14-0e29fe3fa024",
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "aac7ab3f-52d5-5d0c-bc3f-e2dfc818f372"
    },
    {
      "postId": "1ef3b5bb-0805-6d80-9432-553b597926f2",
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "6e0f1942-f79f-5719-8aa1-7895e950f6a4"
    },
    {
      "postId": "1ef3b5d9-1b23-6f70-9c72-cad688b0117d",
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "85d19e6b-4cea-51f9-b94b-14732059a8ec"
    },
    {
      "postId": "1ef3b5c3-e152-6d60-94dd-7da5eda79cf5",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "a0683a1c-1508-5ef8-9944-609a3ce43ee9"
    },
    {
      "postId": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "3ed2990a-46cb-5cfc-ba92-45f254b5ee9e"
    },
    {
      "postId": "1ef3b5b5-5f66-6ad0-9846-ac1b4e440327",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "e70e4f60-b5d6-5c2d-b09e-02fda7e7a9aa"
    },
    {
      "postId": "1ef3b5db-fc15-6310-b8d7-128489aa72d6",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "d18d2a78-4cfd-530b-887d-af11f3b8e1a8"
    },
    {
      "postId": "1ef3b5dd-e4d9-6b40-b309-a07bac6c751a",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "c46bb16d-d4b1-55e8-8ebb-34301c3c2207"
    },
    {
      "postId": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "categoryId": "487c96eb-1cad-5636-be91-f57aff09f227",
      "id": "6f8a6f59-71b4-5859-8cbb-ecf39e129810"
    },
    {
      "postId": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "ee0d41c2-237b-516d-a083-48e1e0216d69"
    },
    {
      "postId": "1ef3b5d3-d10c-6040-8228-d52499675442",
      "categoryId": "db987ebd-5794-596c-a53b-37b8f9c5c93c",
      "id": "9f3d34f1-3c09-5bc3-9726-5f5ad8a4c102"
    },
    {
      "postId": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "d6ec2c01-63bc-5f06-ab40-c964282bda04"
    },
    {
      "postId": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "categoryId": "db987ebd-5794-596c-a53b-37b8f9c5c93c",
      "id": "9ffe9bd3-e201-5239-88ca-5128e42f9380"
    },
    {
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "categoryId": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "id": "ada65018-4243-5d36-87d8-cf355667f1a0"
    },
    {
      "postId": "1ef3b5e1-c89c-6410-866c-c03a58533afa",
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "36b4f747-2a7b-5d84-aae6-ac96b5a72524"
    },
    {
      "postId": "1ef3b5e7-6a16-6cf0-bda8-629a71b2a5d5",
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "94faf05c-de9e-52c8-8cd5-1f15c1f78298"
    },
    {
      "postId": "1ef3b5b1-f8de-63b0-8838-ac54a1c91482",
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "8a5589bd-b4eb-58c6-a40f-623231aaedc8"
    },
    {
      "postId": "1ef3b5cf-0201-6880-9695-c8862c624a56",
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "114ac26d-399e-5dbe-9803-fb437aaf36ca"
    },
    {
      "postId": "1ef3b5cb-5325-6760-803d-418bab754735",
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "9a394756-7f9c-5f0a-b0ed-fd56ab9dab67"
    },
    {
      "postId": "1ef3b5b7-e0bc-6ce0-ac15-c509070dad5f",
      "categoryId": "d37f4904-cd43-5471-b39d-5d159141c14a",
      "id": "1d9f499f-bcd6-5821-b880-5b8ca1e11c3b"
    }
  ],
  "postTags": [
    {
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "tagId": "93c190a7-c5b9-54c1-b946-f85a2e786118",
      "id": "651a928f-8d0c-50c8-94a4-6f84af7d25de"
    },
    {
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "tagId": "bd37f5ff-1d79-544d-98a3-2e1d711a7eed",
      "id": "7d947e0d-9dec-59c4-91ce-19a2c444b875"
    },
    {
      "postId": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "tagId": "b21febf8-23ac-5655-b40f-9bcd74a0fa5c",
      "id": "2017f2e7-25e2-571e-ab97-0b782636b52d"
    },
    {
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "tagId": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "id": "ada65018-4243-5d36-87d8-cf355667f1a0"
    },
    {
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "tagId": "c04ca4e2-f311-5a59-b10a-17ca8db6524e",
      "id": "5b0d5829-f493-5b49-b7ae-5ac3942ef57b"
    }
  ]
}