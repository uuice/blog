{
  "posts": [
    {
      "title": {
        "[object Object]": null
      },
      "date": {
        "[object Object]": null
      },
      "tags": [],
      "id": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "",
      "_toc": ""
    },
    {
      "title": "pnpm install报错",
      "id": 98,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况解决方法安装重试失败， 可以先删除 pnpm本地store- 执行-  执行 rm -rf $(pnpm store path)-  重新安装目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<p>在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况</p>\n<p>解决方法</p>\n<p>pnpm install失败多次后， 可以删除 项目中的 <code>node_modules</code> 以及 <code>pnpm</code> 的本地store</p>\n<ul>\n<li>执行 <code>rm -rf node_modules</code></li>\n<li>执行 <code>rm -rf $(pnpm store path)</code></li>\n<li>重试 <code>pnpm install</code></li>\n</ul>\n<p>目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充</p>\n",
      "_toc": ""
    },
    {
      "title": "koa2 + redis使用笔记",
      "id": 48,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0028.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "安装redisyum install redis启动服务systemctl start redis添加开机启动项systemctl enable redisredis配置修改配置文件 /etc/redis.conf注释掉 bind 127.0.0.1去掉#requirepass foobared的注",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-4f9b67\">安装redis</h3>\n<pre><code class=\"language-bash\">yum install redis\n</code></pre>\n<h3 id=\"toc-33d81c\">启动服务</h3>\n<pre><code class=\"language-bash\">systemctl start redis\n</code></pre>\n<h3 id=\"toc-83b1df\">添加开机启动项</h3>\n<pre><code class=\"language-bash\">systemctl enable redis\n</code></pre>\n<h3 id=\"toc-a7948a\">redis配置</h3>\n<p>修改配置文件 /etc/redis.conf</p>\n<ul>\n<li>注释掉 bind 127.0.0.1</li>\n<li>去掉#requirepass foobared的注释并设置密码</li>\n</ul>\n<p>未完</p>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-4f9b67\">安装redis</a></li>\n<li><a href=\"#toc-33d81c\">启动服务</a></li>\n<li><a href=\"#toc-83b1df\">添加开机启动项</a></li>\n<li><a href=\"#toc-a7948a\">redis配置</a></li>\n</ul>\n"
    },
    {
      "title": "javascript观察者模式的简单实现",
      "id": 33,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0854.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "观察者模式当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式基本的代码框架function PubSub() {    this.handlers = {};}PubSub.prototype = {    // 订阅事件    on function(eventTyp",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-ed69b1\">观察者模式</h3>\n<p>当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式</p>\n<h3 id=\"toc-8627bc\">基本的代码框架</h3>\n<pre><code class=\"language-javascript\">function PubSub() {\n    this.handlers = {};\n}\nPubSub.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n    },\n    // 触发事件(发布事件)\n    emit: function(eventType){\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n    }\n};\n</code></pre>\n<p><code>this.handlers</code>保存了所有的事件名称和对应的操作</p>\n<ul>\n<li>事件的绑定</li>\n</ul>\n<pre><code class=\"language-javascript\">//订阅事件\nvar self = this;\nif(!(eventType in self.handlers)) {\n    self.handlers[eventType] = [];\n}\nself.handlers[eventType].push(handler);\nreturn this;\n</code></pre>\n<p>在绑定事件的时候先判断，当前事件名称是否已存在，如果不存在则创建事件名称的数组，再将事件加入</p>\n<ul>\n<li>触发事件(发布事件)</li>\n</ul>\n<pre><code class=\"language-javascript\">// 触发事件(发布事件)\nvar self = this;\nvar handlerArgs = Array.prototype.slice.call(arguments,1);\nfor(var i = 0; i &lt; self.handlers[eventType].length; i++) {\n    self.handlers[eventType][i].apply(self,handlerArgs);\n}\nreturn self;\n</code></pre>\n<p>触发事件时，通过通过事件名称获取绑定在这个事件名上的所有事件，循环调用事件</p>\n<ul>\n<li>事件删除</li>\n</ul>\n<pre><code class=\"language-javascript\">var currentEvent = this.handlers[eventType];\nvar len = 0;\nif (currentEvent) {\n    len = currentEvent.length;\n    for (var i = len - 1; i &gt;= 0; i--){\n        if (currentEvent[i] === handler){\n            currentEvent.splice(i, 1);\n        }\n    }\n}\nreturn this;\n</code></pre>\n<blockquote>\n<p>上面的代码中最后都有一个return this;是为了实现方法的链式操作</p>\n</blockquote>\n<h3 id=\"toc-480c21\">实例</h3>\n<pre><code class=\"language-javascript\">var pubsub = new PubSub();\nvar callback = function(data){\n    console.log(data);\n};\n//订阅事件A\npubsub.on(&#39;A&#39;, function(data){\n    console.log(1 + data);\n}).on(&#39;A&#39;, function(data){\n    console.log(2 + data);\n}).on(&#39;A&#39;, callback).emit(&#39;A&#39;, &#39;我是参数&#39;);\n//控制台将输出\n//1我是参数\n//2我是参数\n//我是参数\n</code></pre>\n<h3 id=\"toc-a88cff\">完整的代码</h3>\n<pre><code class=\"language-javascript\">function PubSub() {\n    this.handlers = {};\n}\nPubSub.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        if(!(eventType in self.handlers)) {\n            self.handlers[eventType] = [];\n        }\n        self.handlers[eventType].push(handler);\n        return this;\n    },\n    // 触发事件(发布事件)\n    emit: function(eventType){\n        var self = this;\n        var handlerArgs = Array.prototype.slice.call(arguments,1);\n        for(var i = 0; i &lt; self.handlers[eventType].length; i++) {\n            self.handlers[eventType][i].apply(self,handlerArgs);\n        }\n        return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i &gt;= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n\nvar pubsub = new PubSub();\nvar callback = function(data){\n    console.log(data);\n};\n//订阅事件A\npubsub.on(&#39;A&#39;, function(data){\n    console.log(1 + data);\n}).on(&#39;A&#39;, function(data){\n    console.log(2 + data);\n}).on(&#39;A&#39;, callback).emit(&#39;A&#39;, &#39;我是参数&#39;);\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-ed69b1\">观察者模式</a></li>\n<li><a href=\"#toc-8627bc\">基本的代码框架</a></li>\n<li><a href=\"#toc-480c21\">实例</a></li>\n<li><a href=\"#toc-a88cff\">完整的代码</a></li>\n</ul>\n"
    },
    {
      "title": "javascript 函数式编程之柯里化(currying)",
      "id": 45,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-b541c6\">什么是柯里化</h3>\n<p>函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<h3 id=\"toc-e2fb44\">js中柯里化的基本实现</h3>\n<pre><code class=\"language-javascript\">// 柯里化通用实现\nfunction currying(fn) {\n    var slice = Array.prototype.slice;\n    var args = slice.call(arguments, 1);\n    return function() {\n        var innerArgs = slice.call(arguments);\n        var finalArgs = args.concat(innerArgs);\n        return fn.apply(null, finalArgs);\n    }\n}\n</code></pre>\n<h3 id=\"toc-f50a54\">通过柯里化实现阶乘的函数</h3>\n<pre><code class=\"language-javascript\">//乘积\nfunction tailFactorial(total,n){\n    if(n == 1) return total;\n    return tailFactorial(n * total,n-1);\n}\nconst factorial  = currying(tailFactorial,1);\nconsole.log(factorial(5));//120\n</code></pre>\n<p><code>tailFactorial</code>传入了两个参数，最后返回一个函数</p>\n<h3 id=\"toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</h3>\n<pre><code class=\"language-javascript\">function currying2(fn){\n    var _args = [];\n    return function cb() {\n        if (arguments.length === 0) {\n            return fn.apply(this, _args);\n        }\n        Array.prototype.push.apply(_args, arguments);\n        return cb;\n    }\n}\n</code></pre>\n<p>在这个函数中，我们定义了一个_args变量，用于记录多次调用的参数，当最后一次调用没有传入参数时才最后处理</p>\n<ul>\n<li>下面定义一个累加函数，在这个例子中我们可以看到柯里化的一个特性--延迟求值</li>\n</ul>\n<pre><code class=\"language-javascript\">//逐步求值 (延迟执行)\nfunction add() {\n    var sum = 0, i, len;\n    for (i = 0, len = arguments.length; i &lt; len; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n}\nconst addCurry = currying2(add);\nconsole.log(addCurry(3)(3)(2)(1,1,1)());\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-b541c6\">什么是柯里化</a></li>\n<li><a href=\"#toc-e2fb44\">js中柯里化的基本实现</a></li>\n<li><a href=\"#toc-f50a54\">通过柯里化实现阶乘的函数</a></li>\n<li><a href=\"#toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</a></li>\n</ul>\n"
    },
    {
      "title": "jQuery 省市三级联动",
      "id": 39,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "<p>页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息</p>\n<pre><code class=\"language-js\">var regions = {\n  state: $(&#39;#state&#39;),\n  city: $(&#39;#city&#39;),\n  district: $(&#39;#district&#39;),\n  init: function () {\n    var _this = this\n    _this.getState(_this.state, 1)\n    _this.state.change(function () {\n      var id = $(this).val()\n      _this.city.find(&#39;option:gt(0)&#39;).remove()\n      _this.district.find(&#39;option:gt(0)&#39;).remove()\n      _this.getCity(_this.city, id)\n    })\n\n    _this.city.change(function () {\n      var id = $(this).val()\n      _this.district.find(&#39;option:gt(0)&#39;).remove()\n      _this.getDistrict(_this.district, id)\n    })\n  },\n  getState: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  getCity: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  getDistrict: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  render: function (elem, data, callback) {\n    if (data.regions &amp;&amp; !$.isEmptyObject(data.regions)) {\n      elem.find(&#39;option:gt(0)&#39;).remove()\n      $.each(data.regions, function (name, value) {\n        elem.append(\n          &#39;&lt;option value =&quot;&#39; + value.id + &#39;&quot;&gt;&#39; + value.name + &#39;&lt;/option&gt;&#39;\n        )\n      })\n      if (callback &amp;&amp; typeof callback == &#39;function&#39;) {\n        callback()\n      }\n    }\n  },\n  getJson: function (elem, id, callback) {\n    var _this = this\n    $.ajax({\n      type: &#39;post&#39;,\n      url: system.url(&#39;address/get-regions&#39;),\n      data: {\n        parent_id: id,\n      },\n      dataType: &#39;json&#39;,\n      cache: false,\n      success: function (resp) {\n        if (resp.status) {\n          _this.render(elem, resp.data, callback)\n        }\n      },\n      error: function () {},\n    })\n  },\n}\n</code></pre>\n<h4 id=\"toc-4b4d0f\">callback 的作用</h4>\n<p>当获取信息时，需要渲染对应的省市信息\n通过添加回调，可以依次获取省、市、地区信息</p>\n<pre><code class=\"language-js\">regions.getState(regions.state, 1, function () {\n  $(&#39;#state&#39;).val(_this.attr(&#39;data-state&#39;))\n  regions.getCity(regions.city, _this.attr(&#39;data-state&#39;), function () {\n    $(&#39;#city&#39;).val(_this.attr(&#39;data-city&#39;))\n    regions.getDistrict(regions.district, _this.attr(&#39;data-city&#39;), function () {\n      $(&#39;#district&#39;).val(_this.attr(&#39;data-district&#39;))\n    })\n  })\n})\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-4b4d0f\">callback 的作用</a></li>\n</ul>\n"
    },
    {
      "title": "HTML5 Canvas手机九宫格手势密码解锁 ，支持N*N个点",
      "id": 43,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0894.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "对于canvas不熟悉的可以查看 MDN 上的canvas教程在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内通过判断一个点到圆心的距离是否大于半径。例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） （x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R 那么在",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<blockquote>\n<p>对于canvas不熟悉的可以查看 MDN 上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\">canvas教程</a></p>\n</blockquote>\n<p>在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内\n通过判断一个点到圆心的距离是否大于半径。\n例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） <code>（x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R</code> 那么在圆外 反之在圆内</p>\n<h3 id=\"toc-e6969a\">准备及布局设置</h3>\n<p>本例引入了jQuery，写成了jQuery插件的形式，真实使用的时候，可以去掉jQuery，用原生的js写。</p>\n<p>jQuery插件的写法</p>\n<pre><code class=\"language-javascript\">    (function($){\n        $.fn.locked = function(settings) {\n        settings = $.extend({},defaultSettings,settings);\n        }\n    })(jQuery);\n\n\n    $(function(){\n        $(&#39;#canvas&#39;).locked({\n            n:4\n        });\n    });\n</code></pre>\n<p>默认配置\njQuery插件调用时传入的配置会覆盖defaultSettings\n其中<code>document.body.offsetWidth</code>获取的是网页可见区域宽，没特殊需要可以不改</p>\n<pre><code class=\"language-javascript\">    //两个变量记录，所有的点以及选中的点\n    var pointArr = []; //点数组\n    var pointActiveArr = [];//已激活点数组\n\n    //默认配置\n    var defaultSettings = {\n        r :25,//大圆半径\n        sr :8,//小圆半径，小圆既选中状态，内部的小圆\n        w :document.body.offsetWidth,//canvas宽度\n        h : document.body.offsetWidth,//canvas高度\n        n : 3,//数量n*n\n        pointColor:&#39;#ff0000&#39;,//选中状态点线颜色\n        pointDefault:&#39;#686868&#39;//默认点颜色\n\n    };\n</code></pre>\n<p>获取到canvas对象，并根据设备<code>dpi</code>对settings配置进行修改</p>\n<blockquote>\n<p>根据<code>dpi</code>处理，主要是为了防止手机端访问的时候，canvas变模糊</p>\n</blockquote>\n<pre><code class=\"language-javascript\">    var canvas = $(this)[0];//jQuery对象转成js对象\n    var ctx = canvas.getContext(&#39;2d&#39;);\n\n    //防止手机端canvas模糊，计算dpi\n    var dpi = getPixelRatio(ctx);\n    settings.r *= dpi;\n    settings.sr *= dpi;\n    settings.w *= dpi;\n    settings.h *= dpi;\n\n    //设置canvas宽度高度\n    canvas.width = settings.w;\n    canvas.height = settings.h;\n</code></pre>\n<p>获取<code>dpi</code>的方式</p>\n<pre><code class=\"language-javascript\">    //获取dpi\n    function getPixelRatio(context) {\n        var backingStore = context.backingStorePixelRatio ||\n            context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio || 1;\n\n        return (window.devicePixelRatio || 1) / backingStore;\n    }\n</code></pre>\n<p>创建N*N个点并将x,y点的坐标记录到pointArr数组中，点的位置根据canvas宽高平均分配</p>\n<pre><code class=\"language-javascript\">    pointArr = creatPoint();\n\n    //创建n*n个点\n    function creatPoint() {\n        var points = [];\n        for (var row = 0; row &lt; settings.n; row++) {\n            for (var col = 0; col &lt; settings.n; col++) {\n                points.push({\n                    x :(settings.w/(settings.n+1))*(col+1),\n                    y :(settings.h/(settings.n+1))*(row+1),\n                });\n            }\n        }\n        return points;\n    }\n</code></pre>\n<p>添加事件监听</p>\n<pre><code class=\"language-javascript\">    //事件监听\n    canvas.addEventListener(&#39;touchstart&#39;,function(e){\n        touch(e)\n    }, false);\n    canvas.addEventListener(&#39;touchmove&#39;,function(e){\n        touch(e)\n    }, false);\n    canvas.addEventListener(&#39;touchend&#39;,function(e){\n        touch(e)\n    }, false);\n</code></pre>\n<p>touch函数统一处理滑动事件</p>\n<pre><code class=\"language-javascript\">    //事件监听处理\n    function touch(e){\n        var e = e || window.event;\n        console.log(e.type);\n        switch(e.type){\n            case &quot;touchstart&quot;:\n                isSelect(e.touches[0]);\n                break;\n            case &quot;touchend&quot;:\n                draw();\n                alert(&quot;密码结果是：&quot;+pointActiveArr.join(&#39;-&#39;));\n                pointActiveArr=[];\n                break;\n            case &quot;touchmove&quot;:\n                isSelect(e.touches[0]);\n                draw(e.touches[0]);\n                e.preventDefault();\n                break;\n        }\n    }\n</code></pre>\n<p>滑动开始和滑动过程中通过isSelect判断当前的点是否进入了某个圆内，如果进入了某个圆且这个点没有添加到pointActiveArr数组中，则添加。</p>\n<pre><code class=\"language-javascript\">    //判断是否在圆内\n    //通过数学计算来判断\n    function isSelect(touche){\n        //遍历所有点，查看当前位置是否在圆内\n        for (var i = 0; i &lt; pointArr.length; i++) {\n            var point = pointArr[i];\n            var x_diff = Math.abs(point.x - touche.pageX*dpi);\n            var y_diff = Math.abs(point.y - touche.pageY*dpi);\n\n            //如果 (x_diff*x_diff + y_diff*y_diff) &gt; settings.r*settings.r  则在圆外\n            if ((x_diff*x_diff + y_diff*y_diff) &lt; (settings.r)*(settings.r)  ) {\n                if(pointActiveArr.indexOf(i) &lt; 0){ pointActiveArr.push(i);}\n                break;\n            }\n        }\n    }\n</code></pre>\n<p>滑动结束以后输出当前pointActiveArr中的内容，作为密码进行判断，具体判断的逻辑可以自己实现</p>\n<p>接下来就是最主要的，绘制canvas，先上代码</p>\n<pre><code class=\"language-javascript\">    //绘制canvas\n    function draw(touch){\n        ctx.clearRect(0,0,settings.w,settings.h);\n        //绘制n*n个圈\n        for (var i = 0; i &lt; pointArr.length; i++) {\n            var point = pointArr[i];\n            ctx.fillStyle = settings.pointDefault;\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, settings.r, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n            ctx.fillStyle = &#39;#ffffff&#39;;\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, settings.r -6, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n\n\n            //如果当前点已被选中，这中间添加一个小的圆\n            if(pointActiveArr.indexOf(i)&gt;=0)\n            {\n                ctx.fillStyle = settings.pointColor;\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, settings.sr, 0, Math.PI * 2, true);\n                ctx.closePath();\n                ctx.fill();\n            }\n\n        }\n\n\n\n        //如果有传当前移动位置，则添加和最后一个选中点的连线\n        if(touch!=null)\n        {\n            var lastPoint=pointArr[pointActiveArr[pointActiveArr.length-1]];\n            ctx.beginPath();\n            ctx.moveTo(lastPoint.x,lastPoint.y);\n            ctx.lineTo(touch.pageX*dpi,touch.pageY*dpi);\n            ctx.stroke();\n            ctx.closePath();\n        }\n\n\n        //绘制选中的线\n        if (pointActiveArr.length &gt; 0) {\n            ctx.beginPath();\n            for (var i = 0; i &lt; pointActiveArr.length; i++) {\n                var index = pointActiveArr[i];\n                ctx.lineTo(pointArr[index].x, pointArr[index].y);\n            }\n            ctx.lineWidth = 10;\n            ctx.strokeStyle = settings.pointColor;\n            ctx.stroke();\n            ctx.closePath();\n\n        }\n    }\n</code></pre>\n<p>绘制的时候先画了我们<code>pointArr</code>中定义的点，画<code>N*N</code>个圆。如果当前点在<code>pointActiveArr</code>中存在，则在圆内部画一个小圆。\n根据<code>pointActiveArr</code>，在相邻的两个点中间，画直线。\n<code>touch</code>传入的是当前滑动到的位置，将其与 <code>pointActiveArr</code>中的最后一个相连。</p>\n<p>到此位置基本的功能就实现完了。</p>\n<h3 id=\"toc-19b223\">本例可以做一些进一步的优化</h3>\n<ul>\n<li><p>可以去除jQuery，用原生js来，因为页面本身引入了jQuery，就直接拿来用了</p>\n</li>\n<li><p>canvas底部的N*N的点不需要每次都重绘，可以用两个canvas进行叠加</p>\n</li>\n<li><p>本例只是实现了绘制的部分，并没有进行具体的解锁逻辑处理。</p>\n<p>  可以将密码保存到 localStorage 里，页面打开的时候从本地读取密码，如果没有设置就让用户设置密码，具体的密码规则自己定制。</p>\n</li>\n<li><p>没有添加密码错误/正确的样式，可以在配置中添加相应的颜色，再绘制canvas的时候选择对象的颜色。</p>\n</li>\n</ul>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-e6969a\">准备及布局设置</a></li>\n<li><a href=\"#toc-19b223\">本例可以做一些进一步的优化</a></li>\n</ul>\n"
    },
    {
      "title": "Hello World",
      "id": "",
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quickstart\">Quick Start</h2>\n<h3 id=\"createanewpost\">Create a new post</h3>\n<pre><code class=\"language-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"runserver\">Run server</h3>\n<pre><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generatestaticfiles\">Generate static files</h3>\n<pre><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploytoremotesites\">Deploy to remote sites</h3>\n<pre><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
      "_toc": "<ul>\n<li><a href=\"#quickstart\">Quick Start</a><ul>\n<li><a href=\"#createanewpost\">Create a new post</a></li>\n<li><a href=\"#runserver\">Run server</a></li>\n<li><a href=\"#generatestaticfiles\">Generate static files</a></li>\n<li><a href=\"#deploytoremotesites\">Deploy to remote sites</a></li>\n</ul>\n</li>\n</ul>\n"
    },
    {
      "title": "express实践",
      "id": 38,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "Node.js 7.0发布之前，写一篇关于express的文章项目创建使用express-generator使用npm install express-generator -g代码修改自动重启使用nodemonnodemon ./bin/www全局设置//加载配置项global.Config = r",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<p>Node.js 7.0发布之前，写一篇关于express的文章</p>\n<h4 id=\"toc-05102a\">项目创建</h4>\n<p>使用express-generator</p>\n<ul>\n<li>使用npm install express-generator -g</li>\n</ul>\n<h4 id=\"toc-000d55\">代码修改自动重启</h4>\n<p>使用nodemon</p>\n<ul>\n<li>nodemon ./bin/www</li>\n</ul>\n<h4 id=\"toc-188768\">全局设置</h4>\n<pre><code class=\"language-js\">//加载配置项\nglobal.Config = require(path.resolve(Root, &#39;./config/config&#39;));\n//通用方法(设置为全局对象，方便调用)\nglobal.F = require(path.resolve(Root, &#39;./common/funcs&#39;));\n//socket事件方法\nglobal.Socket = require(path.resolve(Root, &#39;./socket/socket&#39;));\n//加载所有的数据库model\nglobal.M = {};\n//model存储路径 （暂时不支持二级目录）\nvar modelsPath = path.resolve(Root, &#39;models&#39;);\nfs.readdirSync(modelsPath).forEach(function (name) {\n  if (path.extname(name) !== &#39;&#39;) {\n    name = path.basename(name, &#39;.js&#39;);\n    M[name] = require(path.resolve(modelsPath,name));\n  }\n});\n</code></pre>\n<p>使用co、Promise（bluebird）进行异步处理</p>\n<p>定义通用方法run实行Promise,并抛出错误</p>\n<pre><code class=\"language-js\">let run = (fn,next) =&gt;{\n  co(fn).catch((err) =&gt; {\n    next(err);\n  });\n};\n</code></pre>\n<h4 id=\"toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</h4>\n<pre><code class=\"language-js\">module.exports = {\n    run:run,\n    promisify:promisify,\n    camelCase:camelCase,\n    defer:defer,\n    Class:Class,\n    extend:extend,\n    isClass:isClass,\n    isBoolean:isBoolean,\n    isNumber:isNumber,\n    isObject:isObject,\n    isString:isString,\n    isArray:isArray,\n    isFunction:isFunction,\n    isDate: util.isDate,\n    isRegExp: util.isRegExp,\n    isError: util.isError,\n    isIP: net.isIP,\n    isIP4: net.isIPv4,\n    isIP6: net.isIPv6,\n    isFile:isFile,\n    isFileAsync:isFileAsync,\n    isDir:isDir,\n    isDirAsync:isDirAsync,\n    isNumberString:isNumberString,\n    isPromise:isPromise,\n    isWritable:isWritable,\n    isBuffer:isBuffer,\n    isTrueEmpty:isTrueEmpty,\n    isEmpty:isEmpty,\n    clone:clone,\n    mkdir:mkdir,\n    rmdir:rmdir,\n    md5:md5,\n    chmod:chmod,\n    getFiles:getFiles,\n    escapeHtml:escapeHtml,\n    datetime:datetime,\n    getDateTime:getDateTime,\n    randomString:randomString\n}\n</code></pre>\n<h4 id=\"toc-415823\">数据库操作（mysql）</h4>\n<p>简单的数据库查询，没有封装sql（懒）</p>\n<pre><code class=\"language-js\">var mysql = require(&#39;mysql&#39;);\nvar Promise = require(&#39;bluebird&#39;);\nvar dbConfig = Config.db;\n\nvar pool  = mysql.createPool(dbConfig);\n\n//使用连接池\nlet query = sql =&gt; {\n  return new Promise((resolve,reject) =&gt; {\n    pool.getConnection((err, connection) =&gt; {\n      connection.query(sql, function(err, result) {\n        return err ? reject(err) : resolve(result);\n      });\n      connection.release();\n    });\n  });\n};\n\nlet insert = (table,data) =&gt; {\n  return new Promise((resolve,reject) =&gt; {\n    pool.getConnection((err, connection) =&gt; {\n      connection.query(&#39;INSERT INTO {table} SET ?&#39;, data, function(err, result) {\n        return err ? reject(err) : resolve(result.insertId);\n      });\n      connection.release();\n    });\n  });\n};\n\n\n//普通连接\nlet queryTest = sql =&gt; {\n  var connection = mysql.createConnection(dbConfig);\n  return new Promise((resolve,reject) =&gt; {\n    connection.connect();\n    connection.query(sql, (err, rows, fields) =&gt; {\n      return err ? reject(err) : resolve(rows);\n    });\n    connection.end();\n  });\n};\n\n\nmodule.exports = {\n  query:query,\n  queryTest:queryTest\n};\n</code></pre>\n<p>数据库连接测试代码 (使用了上面定义的run方法)</p>\n<pre><code class=\"language-js\">router.get(&#39;/&#39;, function(req, res, next) {\n  // 数据库操作测试\n  F.run(function* (){\n       var result = yield Db.query(&#39;SELECT * FROM fruitscities limit 5&#39;);\n       var result = yield Db.query(&#39;SELECT * FROM fruitscities limit 5&#39;);\n       req.session.admin = &#39;111111111&#39;;\n       console.log(req.session.admin);\n       res.render(&#39;index&#39;, { title: &#39;Express```&#39;});\n  },next)\n});\n\nrouter.get(&#39;/test&#39;, function(req, res, next) {\n  console.log(req.baseUrl);\n  console.log(req.route);\n  console.log(req.path);\n  // 数据库操作测试\n  F.run(function* (){\n       var result = yield Db.query(&#39;SELECT * FROM fruitscities limit 5&#39;);\n       var result = yield Db.query(&#39;SELECT * FROM fruitscities limit 5&#39;);\n       console.log(req.session.admin);\n  },next)\n});\n</code></pre>\n<h4 id=\"toc-5bd6e3\">使用nunjucks模板引擎</h4>\n<pre><code class=\"language-js\">//模板引擎\nvar nunjucks = require(&#39;nunjucks&#39;);\n// 模板引擎设置\nvar env = new nunjucks.configure(path.join(__dirname, &#39;views&#39;), { // 设置模板文件的目录，为views\n  autoescape: true,\n  watch: true,\n  express: app\n});\napp.set(&#39;view engine&#39;, &#39;html&#39;);\n</code></pre>\n<h4 id=\"toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</h4>\n<pre><code class=\"language-js\">//标签测试\nvar tags = require(path.resolve(Root, &#39;./common/tags&#39;));\n\n//绑定标签\nenv.addExtension(&quot;tagtest&quot;,new tags.tagtest());\ncommon/tags.js中的代码\n\nvar tags;\nvar nunjucks = require(&#39;nunjucks&#39;);\ntags = {\n  tagtest:function(){\n    //tag标签测试\n    this.tags = [&#39;tagtest&#39;];\n    this.parse = function(parser, nodes, lexer) {\n      let tok = parser.nextToken();\n      var args = parser.parseSignature(null, true);\n      parser.advanceAfterBlockEnd(tok.value);\n      let body = parser.parseUntilBlocks(&#39;endtagtest&#39;);// 结束标签\n      parser.advanceAfterBlockEnd();\n      //return new nodes.CallExtension(this, &#39;run&#39;, args);\n      return new nodes.CallExtensionAsync(this, &#39;run&#39;, args,[body]); //异步调用\n    };\n    this.run = function(context,args,body,callback){\n      console.log(JSON.stringify(args)); //前台返回参数\n      var data = [{\n        id: 1,\n        city: &#39;北京&#39;,\n        parent: 0,\n        spelling: &#39;BeiJing&#39;,\n        abbr: &#39;BJ&#39;,\n        short: &#39;B&#39; },\n        {\n          id: 2,\n          city: &#39;上海&#39;,\n          parent: 0,\n          spelling: &#39;ShangHai&#39;,\n          abbr: &#39;SH&#39;,\n          short: &#39;S&#39; },\n        {\n          id: 3,\n          city: &#39;天津&#39;,\n          parent: 0,\n          spelling: &#39;TianJin&#39;,\n          abbr: &#39;TJ&#39;,\n          short: &#39;T&#39; },\n        {\n          id: 4,\n          city: &#39;重庆&#39;,\n          parent: 0,\n          spelling: &#39;ZhongQing&#39;,\n          abbr: &#39;ZQ&#39;,\n          short: &#39;Z&#39; },\n        {\n          id: 5,\n          city: &#39;黑龙江&#39;,\n          parent: 0,\n          spelling: &#39;HeiLongJiang&#39;,\n          abbr: &#39;HLJ&#39;,\n          short: &#39;H&#39; } ];\n      context.ctx[&#39;list&#39;] = data;  //返回参数\n      let result = new nunjucks.runtime.SafeString(body());\n      return callback(null,result);\n    }\n  }\n};\n\nmodule.exports = tags;\n</code></pre>\n<h4 id=\"toc-ddaedc\">页面中使用</h4>\n<pre><code class=\"language-js\">{% tagtest list=&quot;key1=1,key2=2,key3=3,key4=4&quot; %}\n\n  {% for val in list %}\n  \n\n    {{ val.id }}:{{ val.city}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n\n\n{% tagtest key1=1,key2=2,key3=3,key4=4 %}\n\n  {% for val in list %}\n  \n\n    {{ val.id }}:{{ val.city}}\n  \n\n  {% endfor %}\n\n{% endtagtest %}\n</code></pre>\n<h4 id=\"toc-eb85c0\">使用log4js进行日志记录</h4>\n<p>记录access日志</p>\n<pre><code class=\"language-js\">app.use(log4js.connectLogger(log4js.getLogger(&#39;log_access&#39;), {level:&#39;INFO&#39;}));\n</code></pre>\n<p>配置文件 (配置可以根据需求修改)</p>\n<pre><code class=\"language-js\">module.exports = {\n  db: {\n    host     : &#39;&#39;,\n    user     : &#39;&#39;,\n    password : &#39;&#39;,\n    database : &#39;&#39;\n  },\n  cookieSession: {\n    name: &#39;session_uuice&#39;,\n    keys: [&#39;key1&#39;, &#39;key2&#39;],\n    secret: &#39;ksjf493248kjkj&#39;\n  },\n  log4js :{\n    &quot;appenders&quot;:\n        [\n            {\n                &quot;type&quot;:&quot;console&quot;,\n                &quot;category&quot;:&quot;console&quot;\n            },\n            {\n                &quot;category&quot;:&quot;log_file&quot;,\n                &quot;type&quot;: &quot;file&quot;,\n                &quot;filename&quot;: &quot;./logs/log_file/file.log&quot;,\n                &quot;maxLogSize&quot;: 104800,\n                &quot;backups&quot;: 100\n            },\n            {\n                &quot;category&quot;:&quot;log_date&quot;,\n                &quot;type&quot;: &quot;dateFile&quot;,\n                &quot;filename&quot;: &quot;./logs/log_date/date&quot;,\n                &quot;alwaysIncludePattern&quot;: true,\n                &quot;pattern&quot;: &quot;-yyyy-MM-dd-hh.log&quot;\n\n            },\n            {\n                &quot;category&quot;:&quot;log_access&quot;,\n                &quot;type&quot;: &quot;dateFile&quot;,\n                &quot;filename&quot;: &quot;./logs/log_access/date&quot;,\n                &quot;alwaysIncludePattern&quot;: true,\n                &quot;pattern&quot;: &quot;-yyyy-MM-dd-hh.log&quot;\n\n            }\n        ],\n      &quot;replaceConsole&quot;: true,\n      &quot;levels&quot;:\n      {\n          &quot;log_file&quot;:&quot;ALL&quot;,\n          &quot;console&quot;:&quot;ALL&quot;,\n          &quot;log_date&quot;:&quot;ALL&quot;\n      }\n  }\n};\n</code></pre>\n<p>其他记录日志代码</p>\n<pre><code class=\"language-js\">console.log(&quot;log_start start!&quot;);\n\nvar LogFile = log4js.getLogger(&#39;log_file&#39;);\n\nLogFile.trace(&#39;This is a Log4js-Test&#39;);\nLogFile.debug(&#39;We Write Logs with log4js&#39;);\nLogFile.info(&#39;You can find logs-files in the log-dir&#39;);\nLogFile.warn(&#39;log-dir is a configuration-item in the log4js.json&#39;);\nLogFile.error(&#39;In This Test log-dir is : \\&#39;./logs/log_test/\\&#39;&#39;);\n\nconsole.log(&quot;log_start end!&quot;);\n\n\n\nvar log_date = log4js.getLogger(&#39;log_date&#39;);\n\nlog_date.trace(&#39;This is a Log4js-Test&#39;);\nlog_date.debug(&#39;We Write Logs with log4js&#39;);\nlog_date.info(&#39;You can find logs-files in the log-dir&#39;);\nlog_date.warn(&#39;log-dir is a configuration-item in the log4js.json&#39;);\nlog_date.error(&#39;In This Test log-dir is : \\&#39;./logs/log_test/\\&#39;&#39;);\n\nconsole.log(&quot;log_date end!&quot;);\n</code></pre>\n<h4 id=\"toc-4a6b89\">socket通讯</h4>\n<p>使用socket.io\n在项目bin/www中添加</p>\n<pre><code class=\"language-js\"> //添加socket.io支持\n var io = require(&#39;socket.io&#39;)(server);\n io.on(&#39;connection&#39;, function(socket){\n   Socket(socket,io); //这里的Socket，就是app.js定义的全局变量\n });\n</code></pre>\n<p>在app.js中添加事件逻辑</p>\n<pre><code class=\"language-js\">//socket事件方法\nglobal.Socket = require(path.resolve(Root, &#39;./socket/socket&#39;));\n</code></pre>\n<p>错误处理\nPromise中的报错</p>\n<pre><code class=\"language-js\">let run = (fn,next) =&gt;{\n  co(fn).catch((err) =&gt; {\n    next(err);\n  });\n};\n</code></pre>\n<p>其他报错</p>\n<pre><code class=\"language-js\">// 将404交给错误处理中间件\napp.use(function(req, res, next) {\n  var err = new Error(&#39;Not Found&#39;);\n  err.status = 404;\n  next(err);\n});\n\n// 错误处理\n\n//开发环境报错，显示错误堆栈\nif (app.get(&#39;env&#39;) === &#39;development&#39;) {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    if(req.xhr){\n      res.json({\n        status: err.status,\n        message: err.message,\n        error: err.stack\n      });\n    }else{\n      res.render(&#39;error&#39;, {\n        status: err.status,\n        message: err.message,\n        error: err\n      });\n    }\n\n  });\n}\n\n//生产环境报错，不展示错误堆栈\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  if(req.xhr){\n    res.json({\n      status: err.status,\n      message: err.message,\n      error: {}\n    });\n  }else{\n    res.render(&#39;error&#39;, {\n      status: err.status,\n      message: err.message,\n      error: {}\n    });\n  }\n});\n</code></pre>\n<h4 id=\"toc-0d98c7\">其他</h4>\n<p>待补充</p>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-05102a\">项目创建</a></li>\n<li><a href=\"#toc-000d55\">代码修改自动重启</a></li>\n<li><a href=\"#toc-188768\">全局设置</a></li>\n<li><a href=\"#toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</a></li>\n<li><a href=\"#toc-415823\">数据库操作（mysql）</a></li>\n<li><a href=\"#toc-5bd6e3\">使用nunjucks模板引擎</a></li>\n<li><a href=\"#toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</a></li>\n<li><a href=\"#toc-ddaedc\">页面中使用</a></li>\n<li><a href=\"#toc-eb85c0\">使用log4js进行日志记录</a></li>\n<li><a href=\"#toc-4a6b89\">socket通讯</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n"
    },
    {
      "title": "ceshi",
      "id": "eab87f37-7a65-404f-a972-745d8a4d7a80",
      "date": "2023-12-11T22:51:43.000Z",
      "auther": "nianchu",
      "categories": [],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "",
      "_toc": ""
    },
    {
      "title": "Yarn && npm设置镜像源",
      "id": 34,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "安装yarnnpm i -g yarnyarnyarn config set registry https//registry.npm.taobao.org --global  &amp;&amp; \\yarn config set disturl https//npm.taobao.org/d",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-5a2a5b\">安装 yarn</h3>\n<pre><code class=\"hljs lang-coffeescript\"><span class=\"hljs-built_in\">npm</span> i -g yarn\n</code></pre>\n<h3 id=\"yarn\">yarn</h3>\n<pre><code class=\"hljs lang-jboss-cli\">yarn config <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> <span class=\"hljs-params\">--global</span> &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron/</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> <span class=\"hljs-params\">--global</span>\n</code></pre>\n<h3 id=\"npm\">npm</h3>\n<pre><code class=\"hljs lang-jboss-cli\">npm <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> &amp;&amp; \\\nnpm cache clean <span class=\"hljs-params\">--force</span>\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-5a2a5b\">安装 yarn</a></li>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#npm\">npm</a></li>\n</ul>\n"
    },
    {
      "title": "X-Frame-Options 响应头",
      "id": 44,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display ‘XXXX’ in a frame because it set ‘X-Frame-Options’ to ‘de",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<p>做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display &#39;XXXX&#39; in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny&#39;. 查询了MDN，具体原因如下(MDN上摘录)</p>\n<h3 id=\"toc-00452a\">X-Frame-Options是什么？</h3>\n<p>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p>\n<h3 id=\"toc-3c05a1\">使用X-Frame-Options</h3>\n<p>X-Frame-Options 有三个值:</p>\n<ul>\n<li>DENY\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li>\n<li>SAMEORIGIN\n表示该页面可以在相同域名页面的 frame 中展示。</li>\n<li>ALLOW-FROM uri\n表示该页面可以在指定来源的 frame 中展示。\n换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。</li>\n</ul>\n<h3 id=\"toc-171f7b\">服务器配置</h3>\n<ul>\n<li>配置 Apache\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 &#39;site&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-pgsql\"><span class=\"hljs-keyword\">Header</span> <span class=\"hljs-keyword\">always</span> append X-Frame-<span class=\"hljs-keyword\">Options</span> SAMEORIGIN\n</code></pre>\n<h3 id=\"toc-5f33f1\">配置 nginx</h3>\n<ul>\n<li>配置 nginx\n发送 X-Frame-Options 响应头，把下面这行添加到 &#39;http&#39;, &#39;server&#39; 或者 &#39;location&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-mathematica\"><span class=\"hljs-type\">add_header</span> <span class=\"hljs-variable\">X</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Frame</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Options</span> <span class=\"hljs-variable\">SAMEORIGIN</span><span class=\"hljs-operator\">;</span>\n</code></pre>\n<h3 id=\"toc-170914\">配置 IIS</h3>\n<ul>\n<li>配置 IIS</li>\n</ul>\n<p>发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中:</p>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n  ...\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;SAMEORIGIN&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n</code></pre>\n<h3 id=\"toc-0d98c7\">其他</h3>\n<p>可以直接通过meta标签来设置，不需要放在http头部请求中了。</p>\n<pre><code class=\"hljs lang-routeros\">&lt;meta <span class=\"hljs-attribute\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attribute\">content</span>=<span class=\"hljs-string\">&quot;deny&quot;</span>&gt;\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-00452a\">X-Frame-Options是什么？</a></li>\n<li><a href=\"#toc-3c05a1\">使用X-Frame-Options</a></li>\n<li><a href=\"#toc-171f7b\">服务器配置</a></li>\n<li><a href=\"#toc-5f33f1\">配置 nginx</a></li>\n<li><a href=\"#toc-170914\">配置 IIS</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n"
    },
    {
      "title": "Web动画优化--requestAnimationFrame",
      "id": 42,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0748.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "什么是requestAnimationFramewindow.requestAnimationFrame（callback）方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 callback该方法作为参数，在重绘之前调用回调。注意：如果您要在下一次重新绘制时进行别",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-ecace5\">什么是requestAnimationFrame</h3>\n<p><code>window.requestAnimationFrame（callback）</code>方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 <code>callback</code>该方法作为参数，在重绘之前调用回调。</p>\n<blockquote>\n<p>注意：如果您要在下一次重新绘制时进行别的动画处理，则您的回调本身必须调用requestAnimationFrame（）。</p>\n</blockquote>\n<h3 id=\"toc-ddcf3f\">例如：</h3>\n<pre><code class=\"language-javascript\">var i=0;\nfunction step(){\n    console.log(i++);\n    window.requestAnimationFrame(step);//调用step自身\n}\nwindow.requestAnimationFrame(step);\n</code></pre>\n<p>此例中<code>step</code>方法中必须调用<code>requestAnimationFrame</code>，才能循环输出</p>\n<h3 id=\"toc-52b8c1\">优点</h3>\n<p>该方法通过在系统准备好绘制动画帧时调用该帧，从而为创建动画网页提供了一种更平滑更高效的方法。在此 API 之前，使用 <code>setTimeout</code> 和 <code>setInterval</code> 绘制的动画并没有为 Web 开发人员提供有效的方法来规划动画的图形计时器。这导致了动画过度绘制，浪费 CPU 周期以及消耗额外的电能等问题。而且，即使看不到网站，特别是当网站使用背景选项卡中的页面或浏览器已最小化时，动画都会频繁出现。</p>\n<p>具体可以查看<a href=\"https://msdn.microsoft.com/library/hh920765(v=vs.85).aspx\" target=\"_blank\">MSDN</a></p>\n<h3 id=\"toc-ec0964\">使用方法</h3>\n<p><code>requestAnimationFrame</code>的用法与<code>settimeout</code>很相似，只是不需要设置时间间隔而已。<code>requestAnimationFrame</code>使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给<code>cancelAnimationFrame</code>用于取消这个函数的执行</p>\n<p>对上面的方法进行修改</p>\n<pre><code class=\"language-javascript\">    var i=0;\n    var time;\n    function step(){\n        console.log(i++);\n        time = window.requestAnimationFrame(step);\n        if(i&gt;10){\n            cancelAnimationFrame(time);//取消动画\n        }\n\n    }\n    time = window.requestAnimationFrame(step);\n</code></pre>\n<h3 id=\"toc-c11b90\">兼容性</h3>\n<p>在老的浏览器中，requestAnimationFrame的方法名是带浏览器前缀的。以下是张鑫旭为在各个浏览器中能统一的调用requestAnimationFrame做的处理。不支持requestAnimationFrame的用setTimeout来代替。</p>\n<pre><code class=\"language-javascript\">/* requestAnimationFrame.js\n * by zhangxinxu 2013-09-30\n*/\n(function() {\n    var lastTime = 0;\n    var vendors = [&#39;webkit&#39;, &#39;moz&#39;];\n    for(var x = 0; x &lt; vendors.length &amp;&amp; !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + &#39;RequestAnimationFrame&#39;];\n        window.cancelAnimationFrame = window[vendors[x] + &#39;CancelAnimationFrame&#39;] ||    // Webkit中此取消方法的名字变了\n                                      window[vendors[x] + &#39;CancelRequestAnimationFrame&#39;];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n}());\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-ecace5\">什么是requestAnimationFrame</a></li>\n<li><a href=\"#toc-ddcf3f\">例如：</a></li>\n<li><a href=\"#toc-52b8c1\">优点</a></li>\n<li><a href=\"#toc-ec0964\">使用方法</a></li>\n<li><a href=\"#toc-c11b90\">兼容性</a></li>\n</ul>\n"
    },
    {
      "title": "NODE.JS采集练手",
      "id": 46,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0883.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "使用类库request发送请求获取网页内容co执行Generator函数cheerio解析html，和jQuery一样通过选择器获取node-xlsx生成excel文档代码如下&quot;use strict&quot;;const request = require(&#39;request&#3",
      "categories": [
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-4843fb\">使用类库</h3>\n<ul>\n<li>request\n发送请求获取网页内容</li>\n<li>co\n执行Generator函数</li>\n<li>cheerio\n解析html，和jQuery一样通过选择器获取</li>\n<li>node-xlsx\n生成excel文档</li>\n</ul>\n<p>代码如下</p>\n<pre><code class=\"language-javascript\">&quot;use strict&quot;;\nconst request = require(&#39;request&#39;);\nconst co = require(&#39;co&#39;);\nconst cheerio = require(&#39;cheerio&#39;);\nconst xlsx = require(&#39;node-xlsx&#39;);\nconst fs = require(&#39;fs&#39;);\nlet base = &#39;https://aso100.com/app/rank/appid/1188599882/country/cn&#39;;\nlet base_url = &#39;https://aso100.com/app/rank/appid/1188599882/country/&#39;;\nlet urls = [];\nlet dataArray = [];\n\n//通过url，获取网页内容\nlet getUrl = (url) =&gt; {\n    return new Promise((resolve,reject) =&gt; {\n        request(url, function (err, response, body) {\n            if(err){\n                return reject(err);\n            }\n            return err ? reject(err) : resolve(body);\n\n        });\n\n    });\n};\n\n\n//通过url获取需要的字段内容，并存入dataArray\nlet getDetail = function* (url){\n    let data = yield getUrl(url);\n    let $ = cheerio.load(data);\n    let title = $(&#39;.appinfo-title&#39;).text();\n    let name = $(&#39;.appinfo-country .name&#39;).text();\n    console.log(title+name);\n\n    dataArray.push([title,name]);\n};\n\n//休眠函数，避免速度太快\nlet sleep = (t) =&gt; {\n    return new Promise((resolve,reject) =&gt; {\n        setTimeout(function(){\n            resolve();\n        },t)\n    });\n};\n\n\n//获取base目录中所有需要采集的url地址，并执行采集，最后导出excel\nlet getUrlArray = function* () {\n    let html = yield getUrl(base);\n    let $ = cheerio.load(html);\n    let ele = $(&#39;.select-container&#39;).find(&#39;a&#39;);\n    ele.each(function(){\n        if($(this).attr(&#39;data-country&#39;)){\n            urls.push(base_url + $(this).attr(&#39;data-country&#39;));\n        }\n    });\n\n    //获取内容\n    for(let i=0;i&lt;urls.length;i++){\n        yield sleep(20000);\n        yield getDetail(urls[i]);\n    }\n\n    //导出excel\n    let buffer = xlsx.build([{name: &quot;mySheetName&quot;, data: dataArray}]);\n    fs.writeFileSync(&quot;test.csv&quot;, buffer, &#39;binary&#39;);\n};\n\n//通过co执行Generator\nlet run = (fn) =&gt;{\n    co(fn).catch((err) =&gt; {\n        console.log(err);\n    });\n};\n\n//开始采集\nrun(getUrlArray());\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-4843fb\">使用类库</a></li>\n</ul>\n"
    },
    {
      "title": "Linux npm -g 全局安装的命令找不到",
      "id": 97,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "在Linux 上通过npm -g全局安装 pm2、yarn、pnpm 等命令找不到的解决方法修改 ~/.bash_profile vim ~/.bash_profile新增环境变量export PATH=$(npm prefix -g)/bin$PATH在宝塔面板中export PATH=$PAT",
      "categories": [
        "linux",
        "nodejs"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<p>在Linux 上通过<code>npm -g</code>全局安装 pm2、yarn、pnpm 等命令找不到的解决方法</p>\n<h2 id=\"toc-58e525\">修改 ~/.bash_profile</h2>\n<pre><code class=\"hljs lang-bash\"> vim ~/.bash_profile\n</code></pre>\n<h2 id=\"toc-b6dff4\">新增环境变量</h2>\n<pre><code class=\"hljs lang-routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=$(npm<span class=\"hljs-built_in\"> prefix </span>-g)/bin:<span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h3 id=\"toc-de21ab\">使用宝塔面板的服务器</h3>\n<pre><code class=\"hljs lang-elixir\">export <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$PATH</span><span class=\"hljs-symbol\">://usr/lib/node_modules/corepack/shims</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-variable\">$PATH</span>\nexport <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$(</span>npm prefix -g)/<span class=\"hljs-symbol\">bin:</span><span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h2 id=\"toc-9a72cf\">生效</h2>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">source</span> ~/.bash_profile\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-58e525\">修改 ~/.bash_profile</a></li>\n<li><a href=\"#toc-b6dff4\">新增环境变量</a><ul>\n<li><a href=\"#toc-de21ab\">使用宝塔面板的服务器</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-9a72cf\">生效</a></li>\n</ul>\n"
    },
    {
      "title": "通过视频url，获取缩略图",
      "id": 35,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0979.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "getVideoImg (url) {      let _this = this      // 创建视频对象      let video = document.createElement(&#39;video&#39;)      video.src = url      video.",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<pre><code class=\"language-javascript\">    getVideoImg (url) {\n      let _this = this\n      // 创建视频对象\n      let video = document.createElement(&#39;video&#39;)\n      video.src = url\n      video.width = 503\n      video.height = 295\n      video.setAttribute(&#39;crossOrigin&#39;, &#39;Anonymous&#39;)\n      video.autoplay = true\n      // video.play() // 开始播放\n      video.addEventListener(&#39;loadeddata&#39;, () =&gt; {\n        setTimeout(() =&gt; {\n          let canvas = document.createElement(&#39;canvas&#39;)\n          canvas.width = 503\n          canvas.height = 503\n          let ctx = canvas.getContext(&#39;2d&#39;)\n          let imgHeight = video.videoHeight\n          let imgWidth = video.videoWidth\n          // canvas.width = imgWidth\n          // canvas.height = imgHeight\n          ctx.drawImage(video, 0, 0, imgWidth, imgHeight, 0, 0, video.width, video.width)\n          let img = canvas.toDataURL(&#39;image/png&#39;)\n          // img 为图片信息\n          _this.$set(_this.imgList, url, img)\n        }, 10)\n      }, false)\n    },\n</code></pre>\n",
      "_toc": ""
    },
    {
      "title": "让浏览器兼容placeholder",
      "id": 40,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "什么是placeholderplaceholder 属性提供可描述输入字段预期值的提示信息（hint）。该提示会在输入字段为空时显示，并会在字段获得焦点时消失。placeholder兼容性解决$(function(){    if(!placeholderSupport()){   // 判断浏览器",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h4 id=\"toc-04a6ee\">什么是placeholder</h4>\n<p>placeholder 属性提供可描述输入字段预期值的提示信息（hint）。\n该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p>\n<h4 id=\"toc-9c8b5f\">placeholder兼容性解决</h4>\n<pre><code class=\"language-js\">$(function(){\n    if(!placeholderSupport()){   // 判断浏览器是否支持 placeholder\n        $(&#39;[placeholder]&#39;).focus(function() {\n            var input = $(this);\n            if (input.val() == input.attr(&#39;placeholder&#39;)) {\n                input.val(&#39;&#39;);\n                input.removeClass(&#39;placeholder&#39;);\n            }\n        }).blur(function() {\n            var input = $(this);\n            if (input.val() == &#39;&#39; || input.val() == input.attr(&#39;placeholder&#39;)) {\n                input.addClass(&#39;placeholder&#39;);\n                input.val(input.attr(&#39;placeholder&#39;));\n            }\n        }).blur();\n    };\n})\nfunction placeholderSupport() {\n    return &#39;placeholder&#39; in document.createElement(&#39;input&#39;);\n}\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-04a6ee\">什么是placeholder</a></li>\n<li><a href=\"#toc-9c8b5f\">placeholder兼容性解决</a></li>\n</ul>\n"
    },
    {
      "title": "短 URL 系统设计",
      "id": 37,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "原理通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。实现方式将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面通过访问短连接获取到62进制字符串",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-b6724c\">原理</h3>\n<p>通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。</p>\n<h3 id=\"toc-3e9100\">实现方式</h3>\n<ul>\n<li>将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面</li>\n<li>通过访问短连接获取到62进制字符串，转化为10进制，通过查询获得长链接进行跳转</li>\n</ul>\n<h3 id=\"toc-afda0a\">这里有几个问题</h3>\n<ul>\n<li>1、62进制如何用数据库或者KV存储来做</li>\n</ul>\n<p>这个问题就不展开了，自行解决</p>\n<ul>\n<li>2、如何保证同一个长地址，每次转出来都是一样的短地址</li>\n</ul>\n<p>上面的发号原理中，是不判断长地址是否已经转过的。同一个长地址，产生多条短地址记录，这明显是浪费空间的。\n目前没有好的解决方法</p>\n<h3 id=\"toc-ff0abc\">3、跳转用301还是302</h3>\n<p>301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。</p>\n<p>但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。</p>\n<p>对于搜索引擎SEO优化来说301跳转更合适</p>\n<p>10进制62进制互转 （php实现）</p>\n<p>这里用了php手册中的一个方法，支持任意进制的转换\n点击跳转到php手册</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction convBase($numberInput, $fromBaseInput, $toBaseInput)\n{\n    if ($fromBaseInput==$toBaseInput) return $numberInput;\n    $fromBase = str_split($fromBaseInput,1);\n    $toBase = str_split($toBaseInput,1);\n    $number = str_split($numberInput,1);\n    $fromLen=strlen($fromBaseInput);\n    $toLen=strlen($toBaseInput);\n    $numberLen=strlen($numberInput);\n    $retval=&#39;&#39;;\n    if ($toBaseInput == &#39;0123456789&#39;)\n    {\n        $retval=0;\n        for ($i = 1;$i &lt;= $numberLen; $i++)\n            $retval = bcadd($retval, bcmul(array_search($number[$i-1], $fromBase),bcpow($fromLen,$numberLen-$i)));\n        return $retval;\n    }\n    if ($fromBaseInput != &#39;0123456789&#39;)\n        $base10=convBase($numberInput, $fromBaseInput, &#39;0123456789&#39;);\n    else\n        $base10 = $numberInput;\n    if ($base10&lt;strlen($toBaseInput))\n        return $toBase[$base10];\n    while($base10 != &#39;0&#39;)\n    {\n        $retval = $toBase[bcmod($base10,$toLen)].$retval;\n        $base10 = bcdiv($base10,$toLen,0);\n    }\n    return $retval;\n}\n?&gt;\n</code></pre>\n<h3 id=\"toc-6c9ae3\">用法：</h3>\n<ul>\n<li>1、十进制转62进制</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho convBase(&#39;1234567890987654321&#39;,&#39;0123456789&#39;,&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;);\n?&gt;\n</code></pre>\n<ul>\n<li>2、62进制转十进制</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho convBase(&#39;1tckI2JJZDz&#39;,&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;,&#39;0123456789&#39;);\n?&gt;\n</code></pre>\n<p>这只是一个基本的思路，对于一般的使用也够了</p>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-b6724c\">原理</a></li>\n<li><a href=\"#toc-3e9100\">实现方式</a></li>\n<li><a href=\"#toc-afda0a\">这里有几个问题</a></li>\n<li><a href=\"#toc-ff0abc\">3、跳转用301还是302</a></li>\n<li><a href=\"#toc-6c9ae3\">用法：</a></li>\n</ul>\n"
    },
    {
      "title": "深入分析css中单位px和em,rem的区别",
      "id": 47,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "PX特点IE无法调整那些使用px作为单位的字体大小;EM特点em的值并不是固定的;em会继承父级元素的字体大小。比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 emrem特点rem是CSS3新增的一个相对单位(root em，根em)。这个单位与em有什",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-cba1f6\">PX特点</h3>\n<p>IE无法调整那些使用px作为单位的字体大小;</p>\n<h3 id=\"toc-37eebb\">EM特点</h3>\n<p>em的值并不是固定的;</p>\n<p>em会继承父级元素的字体大小。</p>\n<p>比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 em</p>\n<h3 id=\"toc-8e786e\">rem特点</h3>\n<p>rem是CSS3新增的一个相对单位(root em，根em)。</p>\n<ul>\n<li>这个单位与em有什么区别呢?</li>\n</ul>\n<p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素，比em容易计算。</p>\n<ul>\n<li>使用rem的问题</li>\n</ul>\n<p>IE8及更早版本不支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。</p>\n<h3 id=\"toc-84672b\">个人建议</h3>\n<p>同时使用rem和px，使用px只是为了兼容ie6-ie8这些不支持rem的浏览器</p>\n<p>具体实现</p>\n<p>根元素设置62.5%</p>\n<p>比如</p>\n<pre><code class=\"language-css\"> html{\nfont-size:62.5%; /* 10÷16=62.5% */\n}\nbody{\nfont-size:12px;\nfont-size:1.2rem ; /* 12÷10=1.2 */\n}\np{\nfont-size:14px;\nfont-size:1.4rem;\n}\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-cba1f6\">PX特点</a></li>\n<li><a href=\"#toc-37eebb\">EM特点</a></li>\n<li><a href=\"#toc-8e786e\">rem特点</a></li>\n<li><a href=\"#toc-84672b\">个人建议</a></li>\n</ul>\n"
    },
    {
      "title": "浏览器指定内核访问",
      "id": 41,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "excerpt": "360页面默认使用极速内核&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;页面默认使用ie兼容内核&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quo",
      "categories": [
        "notes"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<p>360页面默认使用极速内核</p>\n<pre><code class=\"language-html\">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;\n</code></pre>\n<p>页面默认使用ie兼容内核</p>\n<pre><code class=\"language-html\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt;\n</code></pre>\n<p>页面默认使用ie标准内核</p>\n<pre><code class=\"language-html\">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt;\n</code></pre>\n",
      "_toc": ""
    },
    {
      "title": "将布尔表达式转成json格式",
      "id": 129,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "简单的词法分析和推栈的应用",
      "categories": [
        "javascript"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-7c31fc\">完整代码</h3>\n<pre><code class=\"language-javascript\">const str = &quot;(((((1 &amp; 2) | 3) &amp; 4 &amp; 5) | 6) &amp; 7) | 8&quot;;\n\nconst operate = [&quot;&amp;&quot;, &quot;|&quot;]; // 操作符\nconst divide = [&quot;(&quot;, &quot;)&quot;]; // 分隔符\n\n// 字符串去除空格转数组 进行词法分析\nfunction translate(str) {\n  let arr = str.replace(/ /gi, &quot;&quot;).split(&quot;&quot;);\n  let arrTranslate = [];\n  arr.forEach((itm, idx) =&gt; {\n    if (operate.indexOf(itm) &gt; -1) {\n      // 操作\n      arrTranslate.push({\n        index: idx,\n        type: &quot;operate&quot;,\n        value: itm,\n      });\n    } else if (divide.indexOf(itm) &gt; -1) {\n      // 括号分隔符\n      arrTranslate.push({\n        index: idx,\n        type: &quot;divide&quot;,\n        value: itm,\n      });\n    } else {\n      // 数字等符号\n      arrTranslate.push({\n        index: idx,\n        type: &quot;token&quot;,\n        value: itm,\n      });\n    }\n  });\n\n  return getResultByStack(arrTranslate);\n}\n\nfunction getResultByStack(arrTranslate) {\n  // 通过栈分组 先匹配第一个括号 作为第一层的逻辑\n  let obj = {\n    operate: &quot;&quot;,\n    tokenList: [],\n    children: [],\n  };\n  let stack = [];\n  arrTranslate.forEach((item) =&gt; {\n    if (item.value === &quot;(&quot;) {\n      stack.push(item);\n    }\n    if (item.value === &quot;)&quot;) {\n      stack.push(item);\n      // 判断当前分组是否完备 即 （）成对匹配\n      if (checkStack(stack)) {\n        // 递归匹配子集\n        let child = getResultByStack(stack.slice(1, -1));\n        obj.children.push(child);\n        // 清空栈\n        stack = [];\n      }\n    }\n    if (item.type === &quot;operate&quot;) {\n      if (stack.length === 0) {\n        // 如果栈为空 则为当前分组的 操作符\n        obj.operate = item.value;\n      } else {\n        // 不为空则是子分组的 操作符\n        stack.push(item);\n      }\n    }\n\n    if (item.type === &quot;token&quot;) {\n      if (stack.length === 0) {\n        // 如果栈为空 则属于当前分组的 token 列表\n        obj.tokenList.push(item);\n      } else {\n        // 不为空则是子分组的 token 列表\n        stack.push(item);\n      }\n    }\n  });\n  return obj;\n}\n\n// 判断栈分组是否完备\nfunction checkStack(stack) {\n  let leftCount = stack.filter((itm) =&gt; itm.value === &quot;(&quot;).length;\n  let rightCount = stack.filter((itm) =&gt; itm.value === &quot;)&quot;).length;\n  return leftCount === rightCount;\n}\n\nconsole.log(JSON.stringify(translate(str)));\n</code></pre>\n<h3 id=\"toc-5ad7f5\">结果</h3>\n<pre><code class=\"language-json\">{\n    &quot;operate&quot;: &quot;|&quot;,\n    &quot;tokenList&quot;: [\n        {\n            &quot;index&quot;: 24,\n            &quot;type&quot;: &quot;token&quot;,\n            &quot;value&quot;: &quot;8&quot;\n        }\n    ],\n    &quot;children&quot;: [\n        {\n            &quot;operate&quot;: &quot;&amp;&quot;,\n            &quot;tokenList&quot;: [\n                {\n                    &quot;index&quot;: 21,\n                    &quot;type&quot;: &quot;token&quot;,\n                    &quot;value&quot;: &quot;7&quot;\n                }\n            ],\n            &quot;children&quot;: [\n                {\n                    &quot;operate&quot;: &quot;|&quot;,\n                    &quot;tokenList&quot;: [\n                        {\n                            &quot;index&quot;: 18,\n                            &quot;type&quot;: &quot;token&quot;,\n                            &quot;value&quot;: &quot;6&quot;\n                        }\n                    ],\n                    &quot;children&quot;: [\n                        {\n                            &quot;operate&quot;: &quot;&amp;&quot;,\n                            &quot;tokenList&quot;: [\n                                {\n                                    &quot;index&quot;: 13,\n                                    &quot;type&quot;: &quot;token&quot;,\n                                    &quot;value&quot;: &quot;4&quot;\n                                },\n                                {\n                                    &quot;index&quot;: 15,\n                                    &quot;type&quot;: &quot;token&quot;,\n                                    &quot;value&quot;: &quot;5&quot;\n                                }\n                            ],\n                            &quot;children&quot;: [\n                                {\n                                    &quot;operate&quot;: &quot;|&quot;,\n                                    &quot;tokenList&quot;: [\n                                        {\n                                            &quot;index&quot;: 10,\n                                            &quot;type&quot;: &quot;token&quot;,\n                                            &quot;value&quot;: &quot;3&quot;\n                                        }\n                                    ],\n                                    &quot;children&quot;: [\n                                        {\n                                            &quot;operate&quot;: &quot;&amp;&quot;,\n                                            &quot;tokenList&quot;: [\n                                                {\n                                                    &quot;index&quot;: 5,\n                                                    &quot;type&quot;: &quot;token&quot;,\n                                                    &quot;value&quot;: &quot;1&quot;\n                                                },\n                                                {\n                                                    &quot;index&quot;: 7,\n                                                    &quot;type&quot;: &quot;token&quot;,\n                                                    &quot;value&quot;: &quot;2&quot;\n                                                }\n                                            ],\n                                            &quot;children&quot;: []\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-7c31fc\">完整代码</a></li>\n<li><a href=\"#toc-5ad7f5\">结果</a></li>\n</ul>\n"
    },
    {
      "title": "在Directive中获取组件DOM以及实例",
      "id": 71,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "在Directive中获取组件DOM以及实例",
      "categories": [
        "angular"
      ],
      "tags": [
        "angular",
        "directive"
      ],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-291011\">获取DOM</h3>\n<p>从 <code>@angular/core</code> 导入 <code>ElementRef</code>。<code>ElementRef</code> 的 <code>nativeElement </code>属性会提供对宿主 DOM 元素的直接访问权限。</p>\n<pre><code class=\"language-javascript\">import { Directive, ElementRef } from &#39;@angular/core&#39;;\n\n@Directive({\n  selector: &#39;[appTest]&#39;\n})\nexport class TestDirective {\n  constructor(\n    private el: ElementRef,\n  ) {\n    el.nativeElement.style.backgroundColor = &#39;yellow&#39;;\n  }\n}\n</code></pre>\n<h3 id=\"toc-fd30cc\">获取组件实例</h3>\n<blockquote>\n<p>组件已知的情况下，在自定义指令中获取组件实例</p>\n</blockquote>\n<p>直接在<code>constructor</code>中注入对应组件就可以</p>\n<p>如下面代码，通过 <code>this.com</code> 就可以调用组件的属性和事件</p>\n<pre><code class=\"language-javascript\">import { Directive } from &#39;@angular/core&#39;;\nimport { comTest } from &#39;comTest&#39;;\n@Directive({\n  selector: &#39;[appTest]&#39;\n})\nexport class TestDirective {\n  constructor(\n    private com: comTest\n  ) {\n    console.log(this.com)\n  }\n}\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-291011\">获取DOM</a></li>\n<li><a href=\"#toc-fd30cc\">获取组件实例</a></li>\n</ul>\n"
    },
    {
      "title": "“被污染”的 canvas",
      "id": 36,
      "date": "2023-11-24T21:10:41.000Z",
      "auther": "nginx",
      "cover": "https://uuice-1254189824.cos.ap-chengdu.myqcloud.com/halo-uuice/bing/0037.jpg?imageMogr2/thumbnail/640x/interlace/1",
      "excerpt": "什么是“被污染”的 canvas?尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 toBlob(), toDataURL() 或 getImageData() 方法，调用它们会抛出安全错误。这种机制可以避免未经许可拉取远程",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "alias": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-e5fb87\">什么是“被污染”的 canvas?</h3>\n<p>尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 方法，调用它们会抛出安全错误。</p>\n<p>这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。</p>\n<h3 id=\"toc-020feb\">如何在canvas中使用跨越图片</h3>\n<p>HTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域  元素的图像。</p>\n<p>设置 Access-Control-Allow-Origin 为 &quot;*&quot;</p>\n<h3 id=\"toc-f4e9b1\">例如通过url获取base64图片，代码如下</h3>\n<pre><code class=\"language-javascript\">getImgBase64 (path, callback) {\n    let img = new Image()\n    img.crossOrigin = &#39;anonymous&#39;\n    img.onload = function () {\n        let canvas = document.createElement(&#39;canvas&#39;)\n        let ctx = canvas.getContext(&#39;2d&#39;)\n        // 获取图片宽高\n        let imgWidth = img.width\n        let imgHeight = img.height\n        // 设置画布宽高与图片宽高相同\n        canvas.width = imgWidth\n        canvas.height = imgHeight\n        // 绘制图片\n        ctx.drawImage(img, 0, 0, imgWidth, imgHeight)\n\n        // 图片展示的 data URI\n        let dataUrl = canvas.toDataURL(&#39;image/jpeg&#39;)\n        callback(dataUrl)\n    }\n\n    img.onerror = function () {\n    }\n    img.src = path\n}\n</code></pre>\n<p>回调处理</p>\n<pre><code class=\"language-javascript\">getImgBase64(imgUrl, function (base64) {\n    console.log(base64)\n})\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-e5fb87\">什么是“被污染”的 canvas?</a></li>\n<li><a href=\"#toc-020feb\">如何在canvas中使用跨越图片</a></li>\n<li><a href=\"#toc-f4e9b1\">例如通过url获取base64图片，代码如下</a></li>\n</ul>\n"
    },
    {
      "title": "canvas实现圆形进度条",
      "id": 49,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "categories": [
        "canvas"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-450c58\">需要关注的几个点</h3>\n<ul>\n<li>弧形的圆角\n通过定义<code>ctx.lineCap = &#39;round&#39;;</code>来实现</li>\n<li>避免移动端canvas模糊，需要先计算<code>dpi</code>来进行适配，通过<code>getPixelRatio</code>方法。也可以直接计算为2倍或3倍（偷懒的做法）</li>\n<li>可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。</li>\n</ul>\n<h3 id=\"toc-72aa4d\">代码如下</h3>\n<p>html</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;canvas_box&quot;&gt;\n    &lt;canvas id=&quot;canvas&quot; width=&quot;420&quot; height=&quot;420&quot; data-val=&quot;90&quot;&gt;&lt;/canvas&gt;\n    &lt;div id=&quot;canvas_text&quot;&gt;\n        &lt;p class=&quot;s_title&quot;&gt;预期年化利率&lt;/p&gt;\n        &lt;p class=&quot;s_value&quot;&gt;\n            6&lt;em&gt;%&lt;/em&gt;\n            &lt;i&gt;+9%&lt;/i&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>css</p>\n<pre><code class=\"language-css\">        .canvas_box {\n            position: relative;\n            display: block;\n            width: 210px;\n            height: 200px;\n            margin: 15px auto 0;\n            overflow: hidden\n        }\n\n        .canvas_box #canvas,.canvas_box #canvas_text {\n            width: 210px;\n            height: 210px;\n            margin: 0 auto;\n            position: relative;\n            display: block\n        }\n\n        .canvas_box #canvas_text {\n            top: -210px\n        }\n\n        .canvas_box #canvas_text .s_title {\n            margin-top: 65px;\n            color: #6b6d7c;\n            text-align: center;\n            font-size: 14px\n        }\n\n        .canvas_box #canvas_text .s_value {\n            margin-top: 20px;\n            text-align: center;\n            color: #ff5971;\n            font-size: 40px;\n            font-weight: 700;\n            position: relative\n        }\n\n        .canvas_box #canvas_text .s_value em {\n            font-size: 14px;\n            font-style: normal\n        }\n\n        .canvas_box #canvas_text .s_value i {\n            width: 42px;\n            height: 22px;\n            font-size: 12px;\n            font-style: normal;\n            position: absolute;\n            top: -15px;\n            left: 45%;\n            margin-left: 35px;\n            line-height: 18px;\n            text-align: center;\n            -webkit-background-size: 100% 100%;\n            -moz-background-size: 100% 100%;\n            -o-background-size: 100% 100%;\n            background-size: 100% 100%;\n            color: #7ac6f5\n        }\n</code></pre>\n<p>js</p>\n<pre><code class=\"language-javascript\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    function draw(degrees){\n        var canvas = document.getElementById(&#39;canvas&#39;);\n        var ctx = canvas.getContext(&#39;2d&#39;);\n        var dpi = getPixelRatio(ctx);\n        canvas.width = 210*dpi;\n        canvas.height = 210*dpi;\n\n\n        ctx.beginPath();\n        ctx.clearRect(0,0,210*dpi,210*dpi);\n        ctx.arc(105*dpi, 105*dpi, 90*dpi, Math.PI*0.75, Math.PI*0.25, false);\n        ctx.lineWidth = 8*dpi;\n        ctx.lineCap = &#39;round&#39;;\n        ctx.strokeStyle = &#39;rgb(236,236,236)&#39;;\n        ctx.stroke();\n\n        if(degrees != 0.75){\n            ctx.beginPath();\n            ctx.arc(105*dpi, 105*dpi, 90*dpi, Math.PI*0.75, Math.PI*degrees, false);\n            ctx.lineWidth = 12*dpi;\n            ctx.lineCap = &#39;round&#39;;\n            ctx.strokeStyle = &#39;rgb(255,89,113)&#39;;\n            ctx.stroke();\n        }\n\n        // ctx.beginPath();\n        // ctx.font = &quot;14px serif&quot;;\n        // ctx.fillText(&quot;预期年化利率&quot;, 105, 65);\n        // ctx.fillStyle = &quot;#6b6d7c&quot;;\n        // ctx.textAlign = &quot;center&quot;;\n\n    }\n    (function($){\n        $(function(){\n            var canvas = $(&#39;#canvas&#39;);\n            var val = canvas.attr(&#39;data-val&#39;);\n            var _val = 0;\n            var degrees = 0;\n\n            var t = setInterval(function(){\n                degrees = 0.75 + 1.5*_val/100;\n                draw(degrees);\n                if(_val == val){\n                    clearInterval(t);\n                }else {\n                    _val++;\n                    if(_val &gt;val){\n                        clearInterval(t);\n                    }\n                }\n            },10);\n\n        });\n    })(jQuery);\n\n\n    function getPixelRatio(context) {\n        var backingStore = context.backingStorePixelRatio ||\n            context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio || 1;\n\n        return (window.devicePixelRatio || 1) / backingStore;\n    }\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-450c58\">需要关注的几个点</a></li>\n<li><a href=\"#toc-72aa4d\">代码如下</a></li>\n</ul>\n"
    },
    {
      "title": "通过takeUntil取消订阅可观察对象 / Angular Observable destroy with takeUntil",
      "id": 161,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "Angular 中的单例 Service通过@NgModule()装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单利service （单例模式）。Angular 中的非单例 Service通过@Component()装饰器来声明一个service时，会成为一个非单例的se",
      "categories": [
        "rxjs",
        "angular"
      ],
      "tags": [],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-133f92\">Angular 中的单例 Service / Angular singleton Service</h3>\n<p>通过<code>@NgModule()</code>装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单例service （单例模式）。</p>\n<h3 id=\"toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</h3>\n<p>通过<code>@Component()</code>装饰器来声明一个service时，会成为一个非单例的service， 生命周期与component 一致， 当Angular销毁组件实例时，Angular将同时销毁与之绑定的service实例。</p>\n<p>非单例service 拥有ngOnDestroy()生命周期， 因此可以通过创建一个非单例的service来取消订阅可观察对象。</p>\n<h3 id=\"toc-6b81a9\">创建DestroyService / Create DestoryService</h3>\n<pre><code class=\"language-javascript\">import { Injectable, OnDestroy } from &#39;@angular/core&#39;;\nimport { Subject } from &#39;rxjs&#39;;\n\n@Injectable()\nexport class DestroyService extends Subject&lt;void&gt; implements OnDestroy {\n  ngOnDestroy(): void {\n    this.next();\n    this.complete();\n  }\n}\n</code></pre>\n<h3 id=\"toc-8cb489\">使用方法 /  How to use</h3>\n<pre><code class=\"language-javascript\">@Component({\n  providers: [DestroyService]\n})\n\nconstructor( private destroy$: DestroyService ) {}\n\nsome$.pipe( takeUntil(this.destroy$)).subscribe(...)\n</code></pre>\n<h3 id=\"toc-1f84c1\">可能的问题 / Memory Leaks</h3>\n<p>当有多个操作符时，应该始终保证takeUntil是序列中的最后一个操作符， 不然会有内存泄漏的可能。</p>\n<p>To avoid problems with memory leaks, the general rule is that takeUntil should be the last operator in the sequence</p>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-133f92\">Angular 中的单例 Service / Angular singleton Service</a></li>\n<li><a href=\"#toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</a></li>\n<li><a href=\"#toc-6b81a9\">创建DestroyService / Create DestoryService</a></li>\n<li><a href=\"#toc-8cb489\">使用方法 / How to use</a></li>\n<li><a href=\"#toc-1f84c1\">可能的问题 / Memory Leaks</a></li>\n</ul>\n"
    }
  ],
  "pages": [
    {
      "title": "在Directive中获取组件DOM以及实例",
      "id": 71,
      "date": "2023-11-24T21:10:42.000Z",
      "auther": "nginx",
      "excerpt": "在Directive中获取组件DOM以及实例",
      "categories": [
        "angular"
      ],
      "tags": [
        "angular",
        "directive"
      ],
      "alias": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "published": "",
      "content": "",
      "_content": "<h3 id=\"toc-291011\">获取DOM</h3>\n<p>从 <code>@angular/core</code> 导入 <code>ElementRef</code>。<code>ElementRef</code> 的 <code>nativeElement </code>属性会提供对宿主 DOM 元素的直接访问权限。</p>\n<pre><code class=\"language-javascript\">import { Directive, ElementRef } from &#39;@angular/core&#39;;\n\n@Directive({\n  selector: &#39;[appTest]&#39;\n})\nexport class TestDirective {\n  constructor(\n    private el: ElementRef,\n  ) {\n    el.nativeElement.style.backgroundColor = &#39;yellow&#39;;\n  }\n}\n</code></pre>\n<h3 id=\"toc-fd30cc\">获取组件实例</h3>\n<blockquote>\n<p>组件已知的情况下，在自定义指令中获取组件实例</p>\n</blockquote>\n<p>直接在<code>constructor</code>中注入对应组件就可以</p>\n<p>如下面代码，通过 <code>this.com</code> 就可以调用组件的属性和事件</p>\n<pre><code class=\"language-javascript\">import { Directive } from &#39;@angular/core&#39;;\nimport { comTest } from &#39;comTest&#39;;\n@Directive({\n  selector: &#39;[appTest]&#39;\n})\nexport class TestDirective {\n  constructor(\n    private com: comTest\n  ) {\n    console.log(this.com)\n  }\n}\n</code></pre>\n",
      "_toc": "<ul>\n<li><a href=\"#toc-291011\">获取DOM</a></li>\n<li><a href=\"#toc-fd30cc\">获取组件实例</a></li>\n</ul>\n"
    },
    {
      "id": "tester",
      "alias": "about",
      "title": "",
      "cover": "",
      "created_time": "",
      "updated_time": "",
      "categories": [],
      "tags": [],
      "excerpt": "",
      "published": "",
      "content": "",
      "_content": "",
      "_toc": ""
    }
  ],
  "linkConfig": [
    {
      "title": "Fayfox",
      "icon": "",
      "url": "https://www.fayfox.com/",
      "type": "码畜"
    }
  ],
  "configConfig": {
    "title": "Fayfox",
    "icon": "",
    "url": "https://www.fayfox.com/",
    "type": "码畜"
  },
  "systemConfig": {
    "title": "轻盈的鱼",
    "subtitle": "幻想变成轻盈的鱼， 畅游在自由的海洋",
    "description": null,
    "keywords": null,
    "author": "uuice",
    "favicon": null,
    "url": "http://example.com"
  },
  "tags": [
    {
      "id": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "title": "angular",
      "description": "angular"
    },
    {
      "id": "c04ca4e2-f311-5a59-b10a-17ca8db6524e",
      "title": "directive",
      "description": "directive"
    }
  ],
  "categories": [
    {
      "id": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "title": "nodejs",
      "description": "nodejs"
    },
    {
      "id": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "title": "javascript",
      "description": "javascript"
    },
    {
      "id": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "title": "canvas",
      "description": "canvas"
    },
    {
      "id": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "title": "notes",
      "description": "notes"
    },
    {
      "id": "487c96eb-1cad-5636-be91-f57aff09f227",
      "title": "linux",
      "description": "linux"
    },
    {
      "id": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "title": "angular",
      "description": "angular"
    },
    {
      "id": "42eca871-e020-58fd-8cf9-a043af638c39",
      "title": "rxjs",
      "description": "rxjs"
    }
  ],
  "postCategories": [
    {
      "postId": 98,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "a8a12242-edf9-4df6-9be4-fea2fb17f237"
    },
    {
      "postId": 48,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "f6a5c7bd-2517-4290-8635-0405e1bbd60a"
    },
    {
      "postId": 33,
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "0bb5e036-8bd8-490f-bb6d-4d09f22b0b3b"
    },
    {
      "postId": 45,
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "a26a4550-c3a5-4f54-84fe-8a9d4b53e7fe"
    },
    {
      "postId": 39,
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "750d471b-24d2-46b8-b864-e4e2d532d884"
    },
    {
      "postId": 43,
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "72d5b1d9-d58e-4d64-b786-cb681435f8e4"
    },
    {
      "postId": 38,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "bd99593b-e5b8-45e9-91ab-dc38859c08dc"
    },
    {
      "postId": 34,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "00b1ea9a-1cf3-4c5f-8d5d-06f59c6a7249"
    },
    {
      "postId": 44,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "b24ff0c9-d215-44c1-aaf2-c130ee4daf7f"
    },
    {
      "postId": 42,
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "c95747d9-5a5d-4fce-ad7c-133b9ba53bc0"
    },
    {
      "postId": 46,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "ea70a02d-a113-4868-b8be-a881fe8d8518"
    },
    {
      "postId": 97,
      "categoryId": "487c96eb-1cad-5636-be91-f57aff09f227",
      "id": "47097b04-4cd4-4894-bbaf-0578661f65ff"
    },
    {
      "postId": 97,
      "categoryId": "80d82b70-8dd1-5b0e-a576-6d05686610f9",
      "id": "bf3cc00c-62b7-49f1-bf17-9a31ac8c87d8"
    },
    {
      "postId": 35,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "7e5a88b4-6bb4-48c3-b148-17ee8aecfbeb"
    },
    {
      "postId": 40,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "35076371-cc0a-44c8-a6b4-ac27d325e98b"
    },
    {
      "postId": 37,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "312d7391-16ca-46f5-8bfe-de7c14d81fff"
    },
    {
      "postId": 47,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "44cdf648-9003-4ad6-a0b1-3f85e05c3ef1"
    },
    {
      "postId": 41,
      "categoryId": "7eda8bb5-6a8f-59c0-9954-45091dc66b21",
      "id": "6cb08472-6092-4e98-8f85-b35b2814bb67"
    },
    {
      "postId": 129,
      "categoryId": "0a347cfa-d40a-5cde-816b-6899edf5386f",
      "id": "b127b33f-d1b3-4d41-be88-58e7936dd8f6"
    },
    {
      "postId": 71,
      "categoryId": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "id": "bcd95cc3-07f4-4ab3-a397-8b8e443b580a"
    },
    {
      "postId": 36,
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "6df56af2-5a7b-4306-9685-55b1a611c05c"
    },
    {
      "postId": 49,
      "categoryId": "6bd59eb3-0b90-5a8a-9138-24dd6bf586b7",
      "id": "a9e2c73d-9643-4ed8-a711-b97ad7551839"
    },
    {
      "postId": 161,
      "categoryId": "42eca871-e020-58fd-8cf9-a043af638c39",
      "id": "7698fe8a-a459-4f48-9379-676d0b15d756"
    },
    {
      "postId": 161,
      "categoryId": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "id": "2051db0e-7620-4d74-a6af-c9aa6ff6536e"
    }
  ],
  "postTags": [
    {
      "postId": 71,
      "tagId": "d22b62a2-d564-576e-96dd-0b8433662e2d",
      "id": "f0a3ac51-bbee-471e-a306-b25f5577fcb6"
    },
    {
      "postId": 71,
      "tagId": "c04ca4e2-f311-5a59-b10a-17ca8db6524e",
      "id": "a76a0b1a-e44d-4ded-8eba-4e1c69202ab2"
    }
  ]
}